<?php

defined('BASEPATH') OR exit('No direct script access allowed');
error_reporting(0);
require APPPATH . '/libraries/REST_Controller.php';
 

class Contract extends REST_Controller
{
    public $session_user_id=NULL; 
    public $session_user_info=NULL;
    public $session_user_business_units=NULL;
    public $session_user_business_units_user=NULL;
    public $session_user_contracts=NULL;
    public $session_user_contract_reviews=NULL;
    public $session_user_contract_documents=NULL;
    public $session_user_contract_action_items=NULL;
    public $session_user_delegates=NULL;
    public $session_user_contributors=NULL;
    public $session_user_reporting_owners=NULL;
    public $session_user_bu_owners=NULL;
    public $session_user_customer_admins=NULL;
    public $session_user_customer_all_users=NULL;
    public $session_user_customer_relationship_categories=NULL;
    public $session_user_customer_relationship_classifications=NULL;
    public $session_user_customer_calenders=NULL;
    public $session_user_master_currency=NULL;
    public $session_user_master_language=NULL;
    public $session_user_master_countries=NULL;
    public $session_user_master_templates=NULL;
    public $session_user_master_customers=NULL;
    public $session_user_master_users=NULL;
    public $session_user_master_user_roles=NULL;
    public $session_user_contract_review_modules=NULL;
    public $session_user_master_contract_review_modules=NULL;
    public $session_user_contract_review_topics=NULL;
    public $session_user_master_contract_review_topics=NULL;
    public $session_user_contract_review_questions=NULL;
    public $session_user_contract_review_question_options=NULL;
    public $session_user_wadmin_relationship_categories=NULL;
    public $session_user_wadmin_relationship_classifications=NULL;
    public $session_user_master_contract_review_questions=NULL;
    public $session_user_master_contract_review_question_options=NULL;
    public $session_user_master_template_modules=NULL;
    public $session_user_master_template_module_topics=NULL;
    public $session_user_master_template_module_topic_questions=NULL;
    public $session_user_contract_review_discussions=NULL;
    public $session_user_contract_review_discussion_questions=NULL;
    public $session_user_wadmin_email_templates=NULL;
    public $session_user_customer_email_templates=NULL;
    public $session_user_own_business_units=NULL;
    public $session_user_review_business_units=NULL;
    public function __construct()
    {
        parent::__construct();
        $this->load->model('Validation_model');
        $this->load->model('Project_model');
        $getLoggedUserId=$this->User_model->getLoggedUserId();
        // echo '<pre>'.$this->db->last_query();exit;
        $_SERVER['HTTP_LOGGEDIN_USER'] = $this->session_user_id=$getLoggedUserId[0]['id'];
        $this->session_user_info=$this->User_model->getUserInfo(array('user_id'=>$this->session_user_id));

        //api access check 
        if($this->session_user_info->user_role_id == 7)
        {
            $apiaccess = Apiaccess($this->session_user_info->user_role_id , $_SERVER['PATH_INFO']);
            if(!$apiaccess)
            {
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')));
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        
        if($this->session_user_info->user_role_id<3 || $this->session_user_info->user_role_id==5)
            $this->session_user_business_units=$this->Validation_model->getBusinessUnitList(array('customer_id'=>$this->session_user_info->customer_id));
        else if($this->session_user_info->user_role_id==3 || $this->session_user_info->user_role_id==4 || $this->session_user_info->user_role_id==8)
            $this->session_user_business_units=$this->Validation_model->getBusinessUnitListByUser(array('user_id'=>$this->session_user_info->id_user));
        else if($this->session_user_info->user_role_id==6){
            if($this->session_user_info->is_allow_all_bu==1)
                $this->session_user_business_units=$this->Validation_model->getBusinessUnitList(array('customer_id'=>$this->session_user_info->customer_id));
            else
                $this->session_user_business_units=$this->Validation_model->getBusinessUnitListByUser(array('user_id'=>$this->session_user_info->id_user));
        }
        $this->session_user_own_business_units=$this->session_user_business_units;
        $this->session_user_review_business_units=$this->Validation_model->getReviewBusinessUnits(array('id_user'=>$this->session_user_id));
        $this->session_user_business_units=array_merge($this->session_user_business_units,$this->session_user_review_business_units);
        // echo '<pre>'.print_r($this->session_user_business_units);exit;
        if($this->session_user_info->user_role_id==5)
            $this->session_user_contracts=$this->Validation_model->getContributorContract(array('business_unit_id'=>$this->session_user_business_units,'customer_user'=>$this->session_user_info->id_user));
        else
            $this->session_user_contracts=$this->Validation_model->getContracts(array('business_unit_id'=>$this->session_user_business_units));
        //$this->session_user_contracts=$this->Validation_model->getContracts(array('business_unit_id'=>$this->session_user_business_units_user));
        $assigned_contracts=$this->Validation_model->getContributorContract(array('customer_user'=>$this->session_user_info->id_user));
        $this->session_user_contracts=array_merge($this->session_user_contracts,$assigned_contracts);
        $this->session_user_contract_reviews=$this->Validation_model->getContractReviews(array('contract_id'=>$this->session_user_contracts));
        $review_documents=$this->Validation_model->getContractReviewDocuments(array('contract_review_id'=>$this->session_user_contract_reviews));
        $documents=$this->Validation_model->getContractDocuments(array('contract_id'=>$this->session_user_contracts));
        $this->session_user_contract_documents=array_merge($review_documents,$documents);
        $getContractActionItems=$this->Validation_model->getContractActionItems(array('contract_id'=>$this->session_user_contracts));
        $getContractActionItemsByUser=$this->Validation_model->getContractActionItemsByUser(array('user_id'=>$this->session_user_id));
        $this->session_user_contract_action_items=array_merge($getContractActionItems,$getContractActionItemsByUser);
        $this->session_user_delegates=$this->Validation_model->getCustomerUsers(array('customer_id'=>array($this->session_user_info->customer_id),'user_role_id'=>4));
        $this->session_user_contributors=$this->Validation_model->getCustomerUsers(array('customer_id'=>array($this->session_user_info->customer_id),'user_role_id'=>5));
        $this->session_user_reporting_owners=$this->Validation_model->getCustomerUsers(array('customer_id'=>array($this->session_user_info->customer_id),'user_role_id'=>6));
        $this->session_user_bu_owners=$this->Validation_model->getCustomerUsers(array('customer_id'=>array($this->session_user_info->customer_id),'user_role_id'=>3));
        $this->session_user_customer_admins=$this->Validation_model->getCustomerUsers(array('customer_id'=>array($this->session_user_info->customer_id),'user_role_id'=>2));
        $this->session_user_customer_all_users=$this->Validation_model->getCustomerUsers(array('customer_id'=>array($this->session_user_info->customer_id)));

        $this->session_user_customer_relationship_categories=$this->Validation_model->getCustomerRelationshipCategories(array('customer_id'=>array($this->session_user_info->customer_id)));
        $this->session_user_customer_relationship_classifications=$this->Validation_model->getCustomerRelationshipClassifications(array('customer_id'=>array($this->session_user_info->customer_id)));
        $this->session_user_customer_calenders=$this->Validation_model->getCustomerCalenders(array('customer_id'=>array($this->session_user_info->customer_id)));
        $this->session_user_master_currency=$this->Validation_model->getCurrency();
        $this->session_user_master_user_roles=$this->Validation_model->getUserRoles();
        $this->session_user_contract_review_modules=$this->Validation_model->getContractReviewModules(array('contract_review_id'=>$this->session_user_contract_reviews));
        $this->session_user_master_contract_review_modules=$this->Validation_model->getMasterContractReviewModules();
        $this->session_user_contract_review_topics=$this->Validation_model->getContractReviewTopics(array('module_id'=>$this->session_user_contract_review_modules));
        $this->session_user_master_contract_review_topics=$this->Validation_model->getMasterContractReviewTopics();
        $this->session_user_contract_review_questions=$this->Validation_model->getContractReviewQuestions(array('topic_id'=>$this->session_user_contract_review_topics));

        $this->session_user_contract_review_discussions=$this->Validation_model->getContractReviewDiscussions(array('contract_review_id'=>$this->session_user_contract_reviews));
        $this->session_user_contract_review_discussion_questions=$this->Validation_model->getContractReviewDiscussionQuestions(array('contract_review_discussion_id'=>$this->session_user_contract_review_discussions));

        $this->session_user_wadmin_email_templates=$this->Validation_model->getCustomerEmailTemplates(array('customer_id'=>array(0)));
        $this->session_user_customer_email_templates=$this->Validation_model->getCustomerEmailTemplates(array('customer_id'=>array($this->session_user_info->customer_id)));
        $this->load->model('Download_model');
        $this->router->fetch_method();
    }

    public function list_get()
    { 
        $data = $this->input->get();
        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($data['customer_id']!=$this->session_user_info->customer_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'1');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'3');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['business_unit_id']) && strtolower($data['business_unit_id'])!='all') {
            $data['id_business_unit'] = pk_decrypt($data['business_unit_id']);
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            if($this->session_user_info->user_role_id != 7)
            if(!in_array($data['id_business_unit'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'4');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['delegate_id'])) {
            $data['delegate_id'] = pk_decrypt($data['delegate_id']);
            if(!in_array($data['delegate_id'],$this->session_user_delegates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'5');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_owner_id'])) {
            $data['contract_owner_id'] = pk_decrypt($data['contract_owner_id']);
            if(!in_array($data['contract_owner_id'],$this->session_user_customer_all_users)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'6');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['relationship_category_id'])) {
            $data['relationship_category_id'] = pk_decrypt($data['relationship_category_id']);
        }
        if(in_array($this->session_user_info->user_role_id,array(3,4,8))){
            $business_unit = $this->Business_unit_model->getBusinessUnitUser(array('user_id' => $data['id_user'],'status' => '1'));
            $data['business_unit_id'] = array_map(function($i){ return $i['id_business_unit']; },$business_unit);
            $data['session_user_role']=$this->session_user_info->user_role_id;
            $data['session_user_id']=$this->session_user_id;
        }
        if($this->session_user_info->user_role_id==6){
            $data['business_unit_id'] = $this->session_user_business_units;
            if(count($data['business_unit_id'])==0 && $this->session_user_info->is_allow_all_bu==0)
            {
                $data['business_unit_id']=array(0);
            }
        }
        if($this->session_user_info->user_role_id == 7){
            $data['provider_id'] = $this->session_user_info->provider;
        }
        
        if(isset($data['parent_contract_id'])) {
            $data['parent_contract_id'] = pk_decrypt($data['parent_contract_id']);
        }
        if(count($data['business_unit_id'])==0)
            unset($data['business_unit_id']);

        /*helper function for ordering smart table grid options*/
        // echo '<pre>'.print_r($data);exit;
        $data = tableOptions($data);
        if(strlen($data['advancedsearch_get'])>2) 
            $data['advancedsearch_get']=json_decode($data['advancedsearch_get']);
        else
            $data['advancedsearch_get']=false;

        //echo $this->session_user_info->user_role_id; exit;
        $data['can_review']=1;
        $data['project_workflow_type']='parent';
       
        if(!empty($data['validation_key'])){
            if($data['validation_key']=='not_ready_for_val'){
                $data['validation_filter_status']=array(0,1);
            }
            if($data['validation_key']=='val_ongoing'){
                $data['validation_filter_status']=array(2);
            }
            if($data['validation_key']=='val_completed'){
                $data['validation_filter_status']=array(3);
            }
            $data['validation_filter_contribution_type']=1;

        }
        // $data['contribution_type']='my_activities';
        // $data['contribution_type']='my_contribution';
        // if(!empty($data['contribution_type'])){

        //     if($this->session_user_info->user_role_id==2 && $data['contribution_type']=='my_contribution'){
        //         $result['total_records']=0;
        //         $result['data']=array();
        //         $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        //         $this->response($result, REST_Controller::HTTP_OK);
        //     }
        //     if($data['contribution_type']=='my_activities' && $this->session_user_info->user_role_id==3){
        //         $data['contract_owner_id']=$this->session_user_info->id_user;
        //     }
        //     if($data['contribution_type']=='my_activities' && $this->session_user_info->user_role_id==4){
        //         $data['delegate_id']=$this->session_user_info->id_user;
        //     }
        //     unset($data['can_access']);
        //     if($data['contribution_type']=='my_contribution' && in_array($this->session_user_info->user_role_id,array(3,4))){
        //     unset($data['can_access']);
        //     // print_r($data);exit;
        //         if(empty($data['validation_key'])){
        //             if($this->session_user_info->contribution_type==1){
        //                 $data['validation_filter_status']=array(2);
        //             }
        //             else{
        //                 $data['validation_filter_status']=array(0,1);
        //             }
        //             $data['contributor_user_id']=$this->session_user_info->id_user;
        //         }
        //     }
                
        // }
    
        $data['is_advance_filter'] = 1;
        if(isset($data['is_advance_filter']) && $data['is_advance_filter'] == 1)
        {
            $get_filters=$this->User_model->getFilter(array('status'=>1,'user_id'=>$this->session_user_info->id_user,'module'=>'all_activities','is_union_table'=>0));
            $data['adv_filters']=$get_filters;
            $get_union_filters=$this->User_model->getFilter(array('status'=>1,'user_id'=>$this->session_user_info->id_user,'module'=>'all_activities','is_union_table'=>1));
            $data['adv_union_filters']=$get_union_filters;
            //modifed for advanced filters validation filter
            $key = array_search('validation_status', array_column($get_filters, 'database_field'));  
            if (!empty($key) || $key === 0) {  
                $data['validation_filter_status'] =[];
                foreach(explode(',',$get_filters[$key]['value']) as $validationStatus){
                    if($validationStatus=='Validation in preparation'){
                        array_push($data['validation_filter_status'],0,1);
                    }
                    elseif($validationStatus=='Validation ongoing'){
                        array_push($data['validation_filter_status'],2);
                    }
                    elseif($validationStatus=='Validation finalized'){
                        array_push($data['validation_filter_status'],3);
                    }
                }
                $data['validation_filter_contribution_type']=1; 
            } 
        }
        $result = $this->Contract_model->getContractList($data);//echo $this->db->last_query();exit;
        unset($data['can_review']);
        unset($data['adv_filters']);
        unset($data['adv_union_filters']);
        for($s=0;$s<count($result['data']);$s++) //parent contracts
        {
            // $result['data'][$s]['is_initiated']=$result['data'][$s]['contract_review_status']=='workflow in progress' || $result['data'][$s]['contract_review_status']=='review in progress'?1:0;
            $result['data'][$s]['is_initiated']=0;
            if(!empty($result['data'][$s]['id_contract_review'])){
                $get_review_status=$this->User_model->check_record('contract_review',array('id_contract_review'=>$result['data'][$s]['id_contract_review']));
                if(in_array($get_review_status[0]['contract_review_status'],array('review in progress','workflow in progress'))){
                    $result['data'][$s]['is_initiated']=1;
                }
                else{
                    $result['data'][$s]['is_initiated']=0;
                }
            }
            //due to union query we wear getting error with same column name. that's why we are managing one column without changing old code.
            $result['data'][$s]['provider_name'] = $result['data'][$s]['providerName'];
            unset($result['data'][$s]['providerName']);

            //Assigning id_contract_review to 0 if the contract status is not in progress
            if(!($result['data'][$s]['contract_review_status'] == 'review in progress' || $result['data'][$s]['contract_review_status'] == 'workflow in progress' || $result['data'][$s]['contract_review_status'] == 'finished'))
                $result['data'][$s]['id_contract_review'] = '0';

            if(strlen($result['data'][$s]['relationship_category_name'])>2){
                preg_match_all('/[A-Z]/', ucwords(strtolower($result['data'][$s]['relationship_category_name'])), $matches);
                $result['data'][$s]['relationship_category_short_name'] = implode('',$matches[0]);
            }else{
                $result['data'][$s]['relationship_category_short_name'] = $result['data'][$s]['relationship_category_name'];
            }
            // echo '-<pre>'.$result['data'][$s]['id_contract_review'];
            $result['data'][$s]['review_by'] = '---';$result['data'][$s]['last_review']=NULL;
            // $last_finalized_review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $result['data'][$s]['id_contract'],'contract_workflow_id'=>$result['data'][$s]['id_contract_workflow'],'order' => 'DESC','contract_review_status'=>'finished','is_workflow'=>$result['data'][$s]['is_workflow']));

            if($result['data'][$s]['is_workflow']==1){

                $last_finalized_review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $result['data'][$s]['id_contract'],'order' => 'DESC','contract_review_status'=>'finished','is_workflow'=>$result['data'][$s]['is_workflow'],'contract_workflow_id'=>$result['data'][$s]['id_contract_workflow']));
            }
            else{
                $last_finalized_review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $result['data'][$s]['id_contract'],'order' => 'DESC','contract_review_status'=>'finished','is_workflow'=>$result['data'][$s]['is_workflow']));
            }

            if(!empty($last_finalized_review) && isset($last_finalized_review[0]['id_contract_review']) && $last_finalized_review[0]['id_contract_review']!='' && $last_finalized_review[0]['id_contract_review']!=0) {
                $result['data'][$s]['review_by'] = $last_finalized_review[0]['review_by'];
                if($last_finalized_review[0]['review_on']!='---')
                    $result['data'][$s]['last_review'] = date('Y-m-d',strtotime($last_finalized_review[0]['review_on']));
            }
            $review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $result['data'][$s]['id_contract'],'order' => 'DESC'));
            $result['data'][$s]['id_contract_review'] = $review[0]['id_contract_review'] = $result['data'][$s]['id_contract_review'];
            if($result['data'][$s]['type']=='project'){
                $result['data'][$s]['last_review']='---';
            }
            $IssubTaskVal = $result['data'][$s]['workflow_parent_id']>0?1:0;
            
            /////////////////////comment this section because of intigrate new scoreing functionality/////////
            $contract_progress_score=$this->calculateScoreAndProgress(array('id_contract_review'=>$result['data'][$s]['id_contract_review'],'user_id'=>0,'is_subtask'=>$IssubTaskVal));//new funcion for calculating  the score and contract 
            $result['data'][$s]['contract_progress']=$contract_progress_score['contract_progress'];
            $result['data'][$s]['score']=$contract_progress_score['score'];
            $result['data'][$s]['contract_start_date'] = date('Y-m-d',strtotime($result['data'][$s]['contract_start_date']));
            $result['data'][$s]['contract_end_date'] = date('Y-m-d',strtotime($result['data'][$s]['contract_end_date']));
            $result['data'][$s]['created_on'] = date('Y-m-d',strtotime($result['data'][$s]['created_on']));
            //getting action items of a recent review based on user role
            $action_data = array('id_contract' => $result['data'][$s]['id_contract']);
            if (isset($data['id_user']))
                $action_data['id_user'] = $data['id_user'];
            if (isset($data['user_role_id']))
                $action_data['user_role_id'] = $data['user_role_id'];
            $action_data['item_status'] = 1;
            //$action_data['id_contract_review'] = $review[0]['id_contract_review'];
            $action_data['responsible_user_id'] = $data['id_user'];
            $action_data['status'] = 'open';
            $action_data['contract_workflow_id'] = $result['data'][$s]['id_contract_workflow'];
            //getting action items count of a recent review
            $result['data'][$s]['action_item_count'] = count($this->Contract_model->getContractReviewActionItemsList($action_data));
            //echo '<pre>'.$this->db->last_query();exit;
            //echo $result['data'][$s]['is_workflow'].'<br>';
            if($result['data'][$s]['is_workflow'] == 0){
                //$result['data'][$s]['deadline'] = ($this->Contract_model->getContractDeadline(array('relationship_category_id'=>$result['data'][$s]['relationship_category_id'],'id_contract'=>$result['data'][$s]['id_contract'])));
                $contract_id = $result['data'][$s]['id_contract'];
                // $check_contract_in_calender_sql = "SELECT * FROM calender WHERE status = 1 AND (LEFT(contract_id,".strlen($contract_id).") = ".$contract_id." OR RIGHT(contract_id,".strlen($contract_id).") = ".$contract_id." OR contract_id LIKE '%,".$contract_id.",%');";
                // $check_contract_in_calender_sql = $this->User_model->custom_query($check_contract_in_calender_sql);

                $reminder_days = array();
                if($result['data'][$s]['can_review'] == 1){
                    //Getting reminder days of a contract category
                    $reminder_days = $this->User_model->check_record('relationship_category_remainder',array('relationship_category_id'=>$result['data'][$s]['relationship_category_id']));
                }
                if(count($reminder_days) == 0){
                    $reminder_days[0]['days'] = 0;
                }
                $check_contract_in_calender_sql = $this->Contract_model->check_contract_in_calender(
                                                                        array(
                                                                            'contract_id' => $result['data'][$s]['id_contract'],
                                                                            'business_unit_id' => $result['data'][$s]['business_unit_id'],
                                                                            'relationship_category_id' => $result['data'][$s]['relationship_category_id'],
                                                                            'provider_id' => $result['data'][$s]['provider_id'],
                                                                            'only_one_contract' => true,
                                                                            'is_workflow' => 0
                                                                        ));
                if(count($check_contract_in_calender_sql)>0){
                    //Meanse there are contracts planned by selecting them
                    $result['data'][$s]['deadline'] = $check_contract_in_calender_sql[0]['date'];
                    $result['data'][$s]['review_name'] = $check_contract_in_calender_sql[0]['workflow_name'];
                }else{
                    //Meanse ther is not plan available 
                    $result['data'][$s]['deadline'] = null;
                    $result['data'][$s]['review_name'] = null;
                }
            }else{
                //$result['data'][$s]['deadline'] = ($this->Contract_model->getContractDeadline(array('relationship_category_id'=>$result['data'][$s]['relationship_category_id'],'id_contract'=>$result['data'][$s]['id_contract'])));
                if($result['data'][$s]['id_contract_workflow'] > 0){
                    $check_contract_in_calender_sql = $this->User_model->check_record('contract_workflow',array('id_contract_workflow'=>$result['data'][$s]['id_contract_workflow'],'status'=>1));
                    $result['data'][$s]['deadline'] = $check_contract_in_calender_sql[0]['Execute_by'];
                    $result['data'][$s]['review_name'] = $check_contract_in_calender_sql[0]['workflow_name'];
                }else{
                    //Meanse ther is not plan available 
                    $result['data'][$s]['deadline'] = null;
                    $result['data'][$s]['review_name'] = null;
                }
            }
            // print_r(date('Y-m-d'));exit;]
            if(!empty($result['data'][$s]['deadline'])){
                if(date('Y-m-d')<= $result['data'][$s]['deadline']){
                    $result['data'][$s]['overdue']=0;
                }
                else{
                    $result['data'][$s]['overdue']=1;
                }
            }
            else{
                $result['data'][$s]['overdue']=0;
            }
            if(true){
                //Review / Workflow names accordian
                $review_or_workflow = array(); 
                $review_or_workflow['is_workflow'] = $result['data'][$s]['is_workflow'];
                $id_contract_workflow = array();
                //Checking Calender planning for review
                $check_review_schedule = $this->Contract_model->check_contract_in_calender(
                    array(
                        'contract_id' => $result['data'][$s]['id_contract'],
                        'business_unit_id' => $result['data'][$s]['business_unit_id'],
                        'relationship_category_id' => $result['data'][$s]['relationship_category_id'],
                        'provider_id' => $result['data'][$s]['provider_name'],
                        'is_workflow' => 0
                    ));
                if(isset($result['data'][$s]['is_workflow']) && $result['data'][$s]['is_workflow']==1 && isset($result['data'][$s]['id_contract_workflow']) && $result['data'][$s]['id_contract_workflow'] > 0){
                    $contract_workflow_data = $this->User_model->check_record('contract_workflow',array('id_contract_workflow' => $result['data'][$s]['id_contract_workflow']));
                    $review_or_workflow['review_name'] = $contract_workflow_data[0]['workflow_name'];
                    $id_contract_workflow = array($result['data'][$s]['id_contract_workflow']);
                    $review_or_workflow['review_data'][] = array('is_workflow'=>0,'id_contract'=>$result['data'][$s]['id_contract'],'id_contract_review'=>count($currentReviewId)>0?$currentReviewId[0]['id_contract_review']:0,'id_contract_workflow'=>0,'review_name'=>isset($check_review_schedule[0])?$check_review_schedule[0]['workflow_name']:'---');
                }else{
                    if(count($check_review_schedule) > 0)
                        $review_or_workflow['review_name'] = $check_review_schedule[0]['workflow_name'];
                    else
                        $review_or_workflow['review_name'] = null;
                }
                
                $contract_workflow_data = $this->Contract_model->getcontractworkflow(array('contract_id'=>$result['data'][$s]['id_contract'],'id_contract_workflow'=>$id_contract_workflow)); 
                
                if(count($review_or_workflow['review_data']) > 0)
                    $review_or_workflow['review_data'] = array_merge($review_or_workflow['review_data'],$contract_workflow_data);
                else
                    $review_or_workflow['review_data'] = $contract_workflow_data;
                $new_review_data = array();
                foreach($review_or_workflow['review_data'] as $v){
                    if($this->session_user_info->user_role_id == 2 || $this->session_user_info->user_role_id == 6)
                        $new_review_data[]=$v;
                    else if($this->session_user_info->user_role_id == 3){
                        if(count($this->User_model->check_record('contract',array('id_contract'=>$v['id_contract'],'contract_owner_id'=>$this->session_user_id)))>0 || (count($this->User_model->check_record('contract_user',array('contract_id'=>$v['id_contract'],'contract_review_id'=>$v['id_contract_review'],'status'=>1,'user_id'=>$this->session_user_id)))>0 && count($this->User_model->check_record('contract_review',array('contract_id'=>$v['id_contract'],'id_contract_review'=>$v['id_contract_review'],'contract_workflow_id'=>$v['id_contract_workflow'])))>0))
                            $new_review_data[]=$v;
                    }
                    else if($this->session_user_info->user_role_id == 4){
                        if(count($this->User_model->check_record('contract',array('id_contract'=>$v['id_contract'],'delegate_id'=>$this->session_user_id)))>0 || (count($this->User_model->check_record('contract_user',array('contract_id'=>$v['id_contract'],'contract_review_id'=>$v['id_contract_review'],'status'=>1,'user_id'=>$this->session_user_id)))>0 && count($this->User_model->check_record('contract_review',array('contract_id'=>$v['id_contract'],'id_contract_review'=>$v['id_contract_review'],'contract_workflow_id'=>$v['id_contract_workflow'])))>0))
                            $new_review_data[]=$v;
                    }
                    else if($this->session_user_info->user_role_id == 7 && count($this->User_model->check_record('contract_user',array('contract_id'=>$v['id_contract'],'contract_review_id'=>$v['id_contract_review'],'status'=>1,'user_id'=>$this->session_user_id)))>0)
                            $new_review_data[]=$v;
                    
                }
                $review_or_workflow['review_data'] = $new_review_data;
                foreach($review_or_workflow['review_data'] as $kr => $vr){
                    $review_or_workflow['review_data'][$kr]['id_contract'] = pk_encrypt($vr['id_contract']);
                    $review_or_workflow['review_data'][$kr]['id_contract_review'] = pk_encrypt($vr['id_contract_review']);
                    if($vr['id_contract_workflow'] > 0)
                        $review_or_workflow['review_data'][$kr]['id_contract_workflow'] = pk_encrypt($vr['id_contract_workflow']);
                }
                $stake_holder_lables = $this->User_model->check_record_selected('lable1,lable2,lable3','contract_stakeholder_lables',array('contract_id'=>$contract_id));
                $query = 'SELECT *FROM calender WHERE FIND_IN_SET("'.$result['data'][$s]['id_contract'].'", contract_id) AND is_workflow='.$result['data'][$s]['is_workflow'].'';
                $contract_calender_data=$this->User_model->custom_query($query);
                $contract_recurrence = $this->User_model->check_record('review_recurrence_master',array('id_review_recurrence' => $contract_calender_data[0]['recurrence']));
                $review_or_workflow['recurrenc']=$contract_recurrence[0]['recurrence_name'];
                $review_or_workflow['recurrence_till']=$contract_calender_data[0]['recurrence_till'];
                //Review workflow actions end
            }
            $result['data'][$s]['review_or_workflow'] = $review_or_workflow;
            ///Assigning edit access for contracts
            $result['data'][$s]['ieaaei'] = 'annus';
            //checking is customer admin
            if(isset($data['user_role_id']) && $data['user_role_id'] == 2) {
                $result['data'][$s]['ieaaei'] = 'itako';
            }//chechking is contract created_by or contract_owner
            else if($data['id_user'] == $result['data'][$s]['created_by'] || $data['id_user'] == $result['data'][$s]['contract_owner_id']) {
                $result['data'][$s]['ieaaei'] = 'itako';
            }
            $result['data'][$s]['ideedi']=count($this->User_model->check_record('contract_review_discussion',array('contract_review_id'=>$result['data'][$s]['id_contract_review'],'discussion_status'=>1)))>0?"itako":'annus';
           
            $get_validation_status=$this->User_model->check_record_selected('validation_status','contract_review',array('id_contract_review'=>$result['data'][$s]['id_contract_review']));//get the validation status for review    
            // echo $this->db->last_query();exit;
            // print_r($get_validation_status[0]['validation_status']);exit;
            $validation_info='';
            if($result['data'][$s]['workflow_parent_id']==0){
                if(!empty($result['data'][$s]['id_contract_review'])){
                    // $get_validator_modules=$this->Contract_model->getvalidatorContributors(array('contract_review_id'=>$result['data'][$s]['id_contract_review']));
                    $get_validator_module=$this->Project_model->getvalidatormodule(array('contract_review_id'=>$result['data'][$s]['id_contract_review']));
                    // echo $this->db->last_query();exit;
                    if(!empty($get_validator_module)){
                        if($get_validation_status[0]['validation_status']<=1){
                            $validation_info=1;
                            if(str_replace('%','',$result['data'][$s]['contract_progress'])=='100'){
                                $validation_info=4;                            
                            }
                        }
                        else{
                            $validation_info=$get_validation_status[0]['validation_status'];
                        }
                    }
                }

            }
            // print_r($result['data'][$s]['is_workflow']);exit;
            if($result['data'][$s]['type']=='project'){
                if($result['data'][$s]['workflow_parent_id']>0){
                    // print_r($result['data'][$s]);exit;
                    $get_parent_name=$this->User_model->check_record('contract_workflow',array('id_contract_workflow'=>$result['data'][$s]['workflow_parent_id']));
                    $result['data'][$s]['Parent_name']='Subtask to '.$get_parent_name[0]['workflow_name'];
                    // print_r($result['data'][$s]);exit;

                }
            }
            if($result['data'][$s]['type']=='contract'){
                if($result['data'][$s]['parent_contract_id']>0){
                    $getcontract_parent_name=$this->User_model->check_record('contract',array('id_contract'=>$result['data'][$s]['parent_contract_id']));
                    $result['data'][$s]['Parent_name']='Sub Agreement to '.$getcontract_parent_name[0]['contract_name'];
                }
            }
            $result['data'][$s]['validation_info']=$validation_info;
            $result['data'][$s]['validation_status'] = isset($get_validation_status[0])?$get_validation_status[0]['validation_status']:0;
            $result['data'][$s]['business_unit_id']=pk_encrypt($result['data'][$s]['business_unit_id']);
            $result['data'][$s]['classification_id']=pk_encrypt($result['data'][$s]['classification_id']);
            $result['data'][$s]['contract_owner_id']=pk_encrypt($result['data'][$s]['contract_owner_id']);
            $result['data'][$s]['created_by']=pk_encrypt($result['data'][$s]['created_by']);
            $result['data'][$s]['currency_id']=pk_encrypt($result['data'][$s]['currency_id']);
            $result['data'][$s]['id_contract']=pk_encrypt($result['data'][$s]['id_contract']);
            $result['data'][$s]['contract_id']=pk_encrypt($result['data'][$s]['contract_id']);
            $result['data'][$s]['relationship_category_id']=pk_encrypt($result['data'][$s]['relationship_category_id']);
            $result['data'][$s]['updated_by']=pk_encrypt($result['data'][$s]['updated_by']);
            if($result['data'][$s]['id_contract_review'] == '0')//Encrypting if value is not = '0' 
                $result['data'][$s]['id_contract_review'] = null;
            else
                $result['data'][$s]['id_contract_review']=pk_encrypt($result['data'][$s]['id_contract_review']);
            $result['data'][$s]['parent_contract_id']=pk_encrypt($result['data'][$s]['parent_contract_id']);

            $result['data'][$s]['template_id']=pk_encrypt($result['data'][$s]['template_id']);
            $result['data'][$s]['id_template']=pk_encrypt($result['data'][$s]['id_template']);
            $result['data'][$s]['workflow_id']=pk_encrypt($result['data'][$s]['workflow_id']);
            $result['data'][$s]['id_contract_workflow']=pk_encrypt($result['data'][$s]['id_contract_workflow']);
            //print_r($result['data'][$s]['is_sub']);exit;            
            $result['data'][$s]['is_subtask']=$result['data'][$s]['is_sub'];
            
            if((int)$result['data'][$s]['can_review'] == 0 && (int)$result['data'][$s]['is_workflow']==0){
                $result['data'][$s]['is_workflow'] = null;
                $result['data'][$s]['review_name'] = null;
            }
            if($result['data'][$s]['type']=="project")
            {
                $mappedProvidersDetails= $this->Customer_model->getproviderlist(array("customer_id"=>$data['customer_id'],"project_id"=>pk_decrypt($result['data'][$s]['id_contract']),"type"=>$result['data'][$s]['type']))['data'];
                if(!empty($mappedProvidersDetails))
                {
                    $result['data'][$s]['provider_name']  = array_map(function($i){ return $i['provider_name']; },$mappedProvidersDetails);
                }
                else{
                    $result['data'][$s]['provider_name']  =array();
                } 
            }
            else{
                $result['data'][$s]['provider_name'] = array($result['data'][$s]['provider_name']);
            }
            unset($result['data'][$s]['subTaskproviderName']);
            
        }
        unset($data['pagination']);
            for($s = 0;$s<count($result['data']); $s++) //sub contracts
            {
                //unset($data['project_workflow_type']);
                if($result['data'][$s]['type']=='project'){
                    $data['project_workflow_type']='child';
                    $data['parent_workflow_id'] = pk_decrypt($result['data'][$s]['id_contract_workflow']);

                }
                else{
                    $data['parent_contract_id'] = pk_decrypt($result['data'][$s]['id_contract']);
                }
                if($result['data'][$s]['is_workflow']==0 && $data['parent_contract_id'] > 0 || $result['data'][$s]['type']=='project'){
                    
                    //while getting sub-contracts, if parent contract has workflow then in sub-contract also displaying. actually it should not display.
                    //that is why we are passing one more param called 'workflowName_null' to avoid workflow record.
                    $data["workflowName_Null"] = ""; 
                    $data['can_review']=1;
                    // print_r($data);exit;
                    unset($data['hierarchy']);
                    $result['data'][$s]['sub_contracts'] = $this->Contract_model->getContractList($data);        // echo $this->db->last_query();exit;
                    unset($data['project_workflow_type']);
                    unset($data['can_review']);
                    $sub_contracts = $result['data'][$s]['sub_contracts']['data'];
                    for($t = 0; $t < count($sub_contracts); $t++){
                        $sub_contracts[$t]['Parent_name']='';

                        //due to union query we wear getting error with same column name. that's why we are managing one column without changing old code.                        
                        $sub_contracts[$t]['provider_name'] = $sub_contracts[$t]['providerName'];
                        unset($sub_contracts[$t]['providerName']);
                        // $sub_contracts[$t]['is_initiated']=$sub_contracts[$t]['contract_review_status']=='workflow in progress'?1:0;
                        $sub_contracts[$t]['is_initiated']=0;
                        if(!empty($sub_contracts[$t]['id_contract_review'])){
                            $get_review_status=$this->User_model->check_record('contract_review',array('id_contract_review'=>$sub_contracts[$t]['id_contract_review']));
                            if(in_array($get_review_status[0]['contract_review_status'],array('review in progress','workflow in progress'))){
                                $sub_contracts[$t]['is_initiated']=1;
                            }
                            else{
                                $sub_contracts[$t]['is_initiated']=0;
                            }
                        }
                        //Assigning id_contract_review to 0 if the contract status is not in progress
                        if(!($sub_contracts[$t]['contract_review_status'] == 'workflow in progress' || $sub_contracts[$t]['contract_review_status'] == 'review in progress' || $sub_contracts[$t]['contract_review_status'] == 'finished'))
                            $sub_contracts[$t]['id_contract_review'] = '0';

                        if(strlen($sub_contracts[$t]['relationship_category_name'])>2){
                            preg_match_all('/[A-Z]/', ucwords(strtolower($sub_contracts[$t]['relationship_category_name'])), $matches);
                            $sub_contracts[$t]['relationship_category_short_name'] = implode('',$matches[0]);
                        }else{
                            $sub_contracts[$t]['relationship_category_short_name'] = $sub_contracts[$t]['relationship_category_name'];
                        }
                        $sub_contracts[$t]['review_by'] = '---';$sub_contracts[$t]['last_review']=NULL;
                        $sub_contracts[$t]['is_subtask']=1;
                        $last_finalized_review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $sub_contracts[$t]['id_contract'],'order' => 'DESC','contract_review_status'=>'finished','is_workflow'=>$result['data'][$s]['is_workflow']));
                        if(!empty($last_finalized_review) && isset($last_finalized_review[0]['id_contract_review']) && $last_finalized_review[0]['id_contract_review']!='' && $last_finalized_review[0]['id_contract_review']!=0) {
                            $sub_contracts[$t]['review_by'] = $last_finalized_review[0]['review_by'];
                            if($last_finalized_review[0]['review_on']!='---')
                                $sub_contracts[$t]['last_review'] = date('Y-m-d',strtotime($last_finalized_review[0]['review_on']));
                        }
                        if($sub_contracts[$t]['type']=='project'){
                            $sub_contracts[$t]['last_review']='---';
                        }
                        $review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $sub_contracts[$t]['id_contract'],'order' => 'DESC'));
                        $sub_contracts[$t]['id_contract_review'] = $review[0]['id_contract_review'] = $sub_contracts[$t]['id_contract_review'];
                        ////////////comment because new common scoring functionality added//////////////
                        // if(!empty($review) && isset($review[0]['id_contract_review']) && $review[0]['id_contract_review']!='' && $review[0]['id_contract_review']!=0) {
                        //     /*$sub_contracts[$t]['review_by'] = $review[0]['review_by'];
                        //     if($review[0]['review_on']!='---')
                        //         $sub_contracts[$t]['last_review'] = date('Y-m-d',strtotime($review[0]['review_on']));*/

                        //     //getting score of recent review
                        //     // $module_score = $this->Contract_model->getContractReviewModuleScore(array('contract_review_id' => $review[0]['id_contract_review']));
                        //     $module_score = $this->Contract_model->getContractReviewModuleScoreProgress(array('contract_review_id' => $review[0]['id_contract_review']));
                        //     $sub_contracts[$t]['contract_progress'] =0;
                        //     for($sr=0;$sr<count($module_score);$sr++)
                        //     {
                        //         $module_score[$sr]['score'] = getScoreByCount($module_score[$sr]);
                        //         $sub_contracts[$t]['contract_progress'] += $this->Contract_model->progress(array('module_id'=>$module_score[$sr]['module_id'],'contract_review_id'=>$review[0]['id_contract_review']));
                        //     }
                        //     if(count($module_score)>0)
                        //         $sub_contracts[$t]['contract_progress'] = round($sub_contracts[$t]['contract_progress']/count($module_score)).'%';
                        //     else
                        //         $sub_contracts[$t]['contract_progress'] = '0%';
                        //         $sub_contracts[$t]['score'] = getScore($scope = array_map(function($i){ return strtolower($i['score']); },$module_score));
                        // }
                        if($sub_contracts[$t]['workflow_parent_id']>0){
                            $subTaskVal=1;
                        }
                        else{
                            $subTaskVal=0;
                            
                        }
                        $contract_progress_score=$this->calculateScoreAndProgress(array('id_contract_review'=>$sub_contracts[$t]['id_contract_review'],'user_id'=>0,'is_subtask'=>$subTaskVal));//new funcion for calculating  the score and contract progress
                        $sub_contracts[$t]['contract_progress']=$contract_progress_score['contract_progress'];
                        $sub_contracts[$t]['score']=$contract_progress_score['score'];
                        $sub_contracts[$t]['contract_start_date'] = date('Y-m-d',strtotime($sub_contracts[$t]['contract_start_date']));
                        $sub_contracts[$t]['contract_end_date'] = date('Y-m-d',strtotime($sub_contracts[$t]['contract_end_date']));
                        $sub_contracts[$t]['created_on'] = date('Y-m-d',strtotime($sub_contracts[$t]['created_on']));
                        //getting action items of a recent review based on user role
                        $action_data = array('id_contract' => $sub_contracts[$t]['id_contract']);
                        if (isset($data['id_user']))
                            $action_data['id_user'] = $data['id_user'];
                        if (isset($data['user_role_id']))
                            $action_data['user_role_id'] = $data['user_role_id'];
                        $action_data['item_status'] = 1;
                        //$action_data['id_contract_review'] = $review[0]['id_contract_review'];
                        $action_data['responsible_user_id'] = $data['id_user'];
                        $action_data['status'] = 'open';
                        $action_data['contract_workflow_id'] = $sub_contracts[$t]['id_contract_workflow'];
                        //getting action items count of a recent review
                        $sub_contracts[$t]['action_item_count'] = count($this->Contract_model->getContractReviewActionItemsList($action_data));
                        
                        // $sub_contracts[$t]['deadline'] = ($this->Contract_model->getContractDeadline(array('relationship_category_id'=>$sub_contracts[$t]['relationship_category_id'],'id_contract'=>$sub_contracts[$t]['id_contract'])));
                        if($sub_contracts[$t]['is_workflow'] == 0){
                            $contract_id = $sub_contracts[$t]['id_contract'];
                            // $check_contract_in_calender_sql = "SELECT * FROM calender WHERE status = 1 AND (LEFT(contract_id,".strlen($contract_id).") = ".$contract_id." OR RIGHT(contract_id,".strlen($contract_id).") = ".$contract_id." OR contract_id LIKE '%,".$contract_id.",%');";
                            // $check_contract_in_calender_sql = $this->User_model->custom_query($check_contract_in_calender_sql);

                            $reminder_days = array();
                            if($result['data'][$s]['can_review'] == 1){
                                //Getting reminder days of a contract category
                                $reminder_days = $this->User_model->check_record('relationship_category_remainder',array('relationship_category_id'=>$sub_contracts[$t]['relationship_category_id']));
                            }
                            if(count($reminder_days) == 0){
                                $reminder_days[0]['days'] = 0;
                            }

                            $check_contract_in_calender_sql = $this->Contract_model->check_contract_in_calender(
                                                                                    array(
                                                                                        'contract_id' => $sub_contracts[$t]['id_contract'],
                                                                                        'business_unit_id' => $sub_contracts[$t]['business_unit_id'],
                                                                                        'relationship_category_id' => $sub_contracts[$t]['relationship_category_id'],
                                                                                        'provider_id' => $sub_contracts[$t]['provider_id'],
                                                                                        'only_one_contract' => true,
                                                                                        'is_workflow' => 0
                                                                                    ));//echo '<pre>'.$this->db->last_query();exit;
                            if(count($check_contract_in_calender_sql)>0){
                                //Meanse there are contracts planned by selecting them
                                $sub_contracts[$t]['deadline'] = $check_contract_in_calender_sql[0]['date'];
                                $sub_contracts[$t]['review_name'] = $check_contract_in_calender_sql[0]['workflow_name'];
                            }else{
                                //Meanse ther is not plan available 
                                $sub_contracts[$t]['deadline'] = null;
                                $sub_contracts[$t]['review_name'] = null;
                            }
                        }else{
                            if($sub_contracts[$t]['id_contract_workflow'] > 0){
                                $check_contract_in_calender_sql = $this->User_model->check_record('contract_workflow',array('id_contract_workflow'=>$sub_contracts[$t]['id_contract_workflow'],'status'=>1));
                                $sub_contracts[$t]['deadline'] = $check_contract_in_calender_sql[0]['Execute_by'];
                                $sub_contracts[$t]['review_name'] = $check_contract_in_calender_sql[0]['workflow_name'];
                            }else{
                                //Meanse ther is not plan available 
                                $sub_contracts[$t]['deadline'] = null;
                                $sub_contracts[$t]['review_name'] = null;
                            }
                        }
                        ///Assigning edit access for contracts
                        $sub_contracts[$t]['ieaaei'] = 'annus';
                        //checking is customer admin
                        if(isset($data['user_role_id']) && $data['user_role_id'] == 2) {
                            $sub_contracts[$t]['ieaaei'] = 'itako';
                        }//chechking is contract created_by or contract_owner
                        else if($data['id_user'] == $sub_contracts[$t]['created_by'] || $data['id_user'] == $sub_contracts[$t]['contract_owner_id']) {
                            $sub_contracts[$t]['ieaaei'] = 'itako';
                        }
                        // $sub_contracts[$t]['ideedi']=count($this->Contract_model->getContractDiscussion(array('id_contract'=>$sub_contracts[$t]['id_contract'],'discussion_status'=>1)))>0?"itako":'annus';
                        $sub_contracts[$t]['ideedi']=count($this->User_model->check_record('contract_review_discussion',array('contract_review_id'=>$sub_contracts[$t]['id_contract_review'],'discussion_status'=>1)))>0?"itako":'annus';
                        /**
                         * Previous Can_access Condition
                            if($this->session_user_info->user_role_id == 2 || $this->session_user_info->user_role_id == 6)
                                $sub_contracts[$t]['can_access']=1;
                            else if($this->session_user_info->user_role_id == 3 && count($this->User_model->check_record('contract',array('id_contract'=>$sub_contracts[$t]['id_contract'],'contract_owner_id'=>$this->session_user_id)))>0)
                                $sub_contracts[$t]['can_access']=1;
                            else if($this->session_user_info->user_role_id == 4 && count($this->User_model->check_record('contract',array('id_contract'=>$sub_contracts[$t]['id_contract'],'delegate_id'=>$this->session_user_id)))>0)
                                $sub_contracts[$t]['can_access']=1;
                            else if($this->session_user_info->user_role_id == 7 && count($this->User_model->check_record('contract_user',array('contract_id'=>$sub_contracts[$t]['id_contract'],'status'=>1,'user_id'=>$this->session_user_id)))>0)
                                $sub_contracts[$t]['can_access']=1;
                            else
                                $sub_contracts[$t]['can_access']=0;
                         */
                        $get_validation_status=$this->User_model->check_record_selected('validation_status','contract_review',array('id_contract_review'=>$sub_contracts[$t]['id_contract_review']));//get the validation status for review
                        $sub_contracts[$t]['validation_status'] = isset($get_validation_status[0])?$get_validation_status[0]['validation_status']:0;
                        $validation_info='';
                        if($sub_contracts[$t]['workflow_parent_id']==0){
                            if(!empty($sub_contracts[$t]['id_contract_review'])){
                                // $get_validator_modules=$this->Contract_model->getvalidatorContributors(array('contract_review_id'=>$result['data'][$s]['id_contract_review']));
                                $get_validator_module=$this->Project_model->getvalidatormodule(array('contract_review_id'=>$sub_contracts[$t]['id_contract_review']));
                                if(!empty($get_validator_module)){
                                    if($sub_contracts[$t]['validation_status']<=1){
                                        $validation_info=1;
                                        if(str_replace('%','',$sub_contracts[$t]['contract_progress'])=='100'){
                                            $validation_info=4;                            
                                        }
                                    }
                                    else{
                                        $validation_info=$sub_contracts[$t]['validation_status'];
                                    }
                                }
                            }
            
                        }
            
                        $sub_contracts[$t]['validation_info']=$validation_info;
                        $sub_contracts[$t]['business_unit_id']=pk_encrypt($sub_contracts[$t]['business_unit_id']);
                        $sub_contracts[$t]['classification_id']=pk_encrypt($sub_contracts[$t]['classification_id']);
                        $sub_contracts[$t]['contract_owner_id']=pk_encrypt($sub_contracts[$t]['contract_owner_id']);
                        $sub_contracts[$t]['created_by']=pk_encrypt($sub_contracts[$t]['created_by']);
                        $sub_contracts[$t]['currency_id']=pk_encrypt($sub_contracts[$t]['currency_id']);
                        $sub_contracts[$t]['id_contract']=pk_encrypt($sub_contracts[$t]['id_contract']);
                        $sub_contracts[$t]['contract_id']=pk_encrypt($sub_contracts[$t]['contract_id']);
                        $sub_contracts[$t]['relationship_category_id']=pk_encrypt($sub_contracts[$t]['relationship_category_id']);
                        $sub_contracts[$t]['updated_by']=pk_encrypt($sub_contracts[$t]['updated_by']);
                        if($sub_contracts[$t]['id_contract_review'] == '0')//Encrypting if value is not = '0'
                            $sub_contracts[$t]['id_contract_review']= null;
                        else
                            $sub_contracts[$t]['id_contract_review']=pk_encrypt($sub_contracts[$t]['id_contract_review']);
                        $sub_contracts[$t]['parent_contract_id']=pk_encrypt($sub_contracts[$t]['parent_contract_id']);
                        
                        $sub_contracts[$t]['template_id']=pk_encrypt($sub_contracts[$t]['template_id']);
                        $sub_contracts[$t]['id_template']=pk_encrypt($sub_contracts[$t]['id_template']);
                        $sub_contracts[$t]['workflow_id']=pk_encrypt($sub_contracts[$t]['workflow_id']);
                        $sub_contracts[$t]['id_contract_workflow']=pk_encrypt($sub_contracts[$t]['id_contract_workflow']);
                        if((int)$sub_contracts[$t]['can_review'] == 0 && (int)$sub_contracts[$t]['is_workflow']==0)
                            $sub_contracts[$t]['is_workflow'] = null;
                        if($sub_contracts[$t]['type']=="project")
                        {
                            $sub_contracts[$t]['provider_name']  = $sub_contracts[$t]['subTaskproviderName'];
                        }
                        else{
                            $sub_contracts[$t]['provider_name'] = $sub_contracts[$t]['provider_name'];
                        } 
                        unset($sub_contracts[$t]['subTaskproviderName']);
                    }
                    $result['data'][$s]['sub_contracts'] = $sub_contracts;
                }//is_workflow if condition end
            }//end for loop  
            // $all_spent_amount=array_sum(array_column($result['data'],'contract_value'));
            // $result['data']['total_amount']=$all_spent_amount;
            // print_r($result);exit;
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }
    public function myreviewslist_get()
    {
        $data = $this->input->get();

        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($data['customer_id']!=$this->session_user_info->customer_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['business_unit_id']) && strtolower($data['business_unit_id'])!='all') {
            $data['id_business_unit'] = pk_decrypt($data['business_unit_id']);
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            if(!in_array($data['id_business_unit'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['delegate_id'])) {
            $data['delegate_id'] = pk_decrypt($data['delegate_id']);
            if(!in_array($data['delegate_id'],$this->session_user_delegates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_owner_id'])) {
            $data['contract_owner_id'] = pk_decrypt($data['contract_owner_id']);
            if(!in_array($data['contract_owner_id'],$this->session_user_customer_all_users)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if($this->session_user_info->user_role_id == 3|| $this->session_user_info->user_role_id == 8){
            $data['contract_owner_id'] = $this->session_user_id;
        }
        if($this->session_user_info->user_role_id == 4){
            $data['delegate_id'] = $this->session_user_id;
        }
        if($this->session_user_info->user_role_id == 6){
            $data['business_unit_id'] = $this->session_user_business_units;
            if(count($data['business_unit_id'])==0 && $this->session_user_info->is_allow_all_bu==0)
            {
                $data['business_unit_id']=array(0);
            }
        }
        if($this->session_user_info->user_role_id == 7){
            $data['provider_id'] = $this->session_user_info->provider;
        }
        if(count($data['business_unit_id'])==0)
            unset($data['business_unit_id']);
        /*helper function for ordering smart table grid options*/
        $data = tableOptions($data);
        if(strlen($data['advancedsearch_get'])>2) 
            $data['advancedsearch_get']=json_decode($data['advancedsearch_get']);
        else
            $data['advancedsearch_get']=false;
        //echo $this->session_user_info->user_role_id; exit;
        $result = $this->Contract_model->getMyReviewList($data);//echo $this->db->last_query();exit;
        
        for($s=0;$s<count($result['data']);$s++) //all contracts
        {
            /*
            due to duplicate provider names in query the providerName was changed as provider_name
            form getMyReviewList function it return the result with providerName,but our requirement need 
            the providerName as provider_name so the result value can assigned to provider_name varible
            */
            $result['data'][$s]['provider_name']=$result['data'][$s]['providerName'];
            unset($result['data'][$s]['providerName']);//unset previous varible
            $result['data'][$s]['is_initiated']=0;
            if(!empty($result['data'][$s]['id_contract_review'])){
                $get_review_status=$this->User_model->check_record('contract_review',array('id_contract_review'=>$result['data'][$s]['id_contract_review']));
                if(in_array($get_review_status[0]['contract_review_status'],array('review in progress','workflow in progress'))){
                    $result['data'][$s]['is_initiated']=1;
                }
                else{
                    $result['data'][$s]['is_initiated']=0;
                }
            }


            if(strlen($result['data'][$s]['relationship_category_name'])>2){
                preg_match_all('/[A-Z]/', ucwords(strtolower($result['data'][$s]['relationship_category_name'])), $matches);
                $result['data'][$s]['relationship_category_short_name'] = implode('',$matches[0]);
            }else{
                $result['data'][$s]['relationship_category_short_name'] = $result['data'][$s]['relationship_category_name'];
            }
            $result['data'][$s]['review_by'] = '---';$result['data'][$s]['last_review']=NULL;
            if($result['data'][$s]['is_workflow']==1){

                $last_finalized_review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $result['data'][$s]['id_contract'],'order' => 'DESC','contract_review_status'=>'finished','is_workflow'=>$result['data'][$s]['is_workflow'],'contract_workflow_id'=>$result['data'][$s]['id_contract_workflow']));
            }
            else{
                $last_finalized_review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $result['data'][$s]['id_contract'],'order' => 'DESC','contract_review_status'=>'finished','is_workflow'=>$result['data'][$s]['is_workflow']));
            }
            if($result['data'][$s]['type']=='project'){
                $result['data'][$s]['last_review']='---';
            }

            // echo $this->db->last_query();exit;
            if(!empty($last_finalized_review) && isset($last_finalized_review[0]['id_contract_review']) && $last_finalized_review[0]['id_contract_review']!='' && $last_finalized_review[0]['id_contract_review']!=0) {
                $result['data'][$s]['review_by'] = $last_finalized_review[0]['review_by'];
                if($last_finalized_review[0]['review_on']!='---')
                    $result['data'][$s]['last_review'] = date('Y-m-d',strtotime($last_finalized_review[0]['review_on']));
            }
            // print_r($result['data'][$s]);
            // print_r($last_finalized_review);exit;
            // Getting the latest review id of a contract.
            $review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $result['data'][$s]['id_contract'],'order' => 'DESC'));
            // print_r($result['data'][$s]);exit;
            $is_subtask=0;
            if(!empty($result['data'][$s]['id_contract_workflow'])){
                $get_task_type=$this->User_model->check_record('contract_workflow',array('id_contract_workflow'=>$result['data'][$s]['id_contract_workflow']));
                if($get_task_type[0]['parent_id']>0){
                    $is_subtask=1;
                }
                else{
                    $is_subtask=0;
                }
            }
            $result['data'][$s]['id_contract_review'] = $review[0]['id_contract_review'] = $result['data'][$s]['id_contract_review'];
            $contract_progress_score=$this->calculateScoreAndProgress(array('id_contract_review'=>$result['data'][$s]['id_contract_review'],'user_id'=>0,'is_subtask'=>$is_subtask));//new funcion for calculating  the score and contract progress
            // print_r($contract_progress_score);exit;
            $result['data'][$s]['contract_progress']=$contract_progress_score['contract_progress'];
            $result['data'][$s]['score']=$contract_progress_score['score'];
            /////////////////////comment this section because of intigrate new scoreing functionality/////////
            // if(!empty($review) && isset($review[0]['id_contract_review']) && $review[0]['id_contract_review']!='' && $review[0]['id_contract_review']!=0) {
            //     /*$result['data'][$s]['review_by'] = $review[0]['review_by'];
            //     if($review[0]['review_on']!='---')
            //         $result['data'][$s]['last_review'] = date('Y-m-d',strtotime($review[0]['review_on']));*/

            //     //getting score of recent review
            //     //Assigning the iteration review id to latest review variable because every where latest variable is used
            //     $result['data'][$s]['id_contract_review'] = $review[0]['id_contract_review'] = $result['data'][$s]['id_contract_review'];
            //     // $module_score = $this->Contract_model->getContractReviewModuleScore(array('contract_review_id' => $review[0]['id_contract_review']));
            //     $module_score = $this->Contract_model->getContractReviewModuleScoreProgress(array('contract_review_id' => $review[0]['id_contract_review']));//echo $this->db->last_query();exit;
            //     $result['data'][$s]['contract_progress'] =0;
            //     for($sr=0;$sr<count($module_score);$sr++)
            //     {
            //         $provider_visibility = array(1,0);
            //         $contributor_modules = $this->User_model->check_record_selected('module_id','contract_user',array('contract_review_id'=>$review[0]['id_contract_review'],'user_id'=>$this->session_user_id,'status'=>1));
            //         //echo '<pre>'.print_r($contributor_modules);exit;
            //         $contributor_modules = array_map(function($i){ return $i['module_id']; },$contributor_modules);
            //         if(count($contributor_modules)>0){
            //             if((int)$this->session_user_info->contribution_type == 3)
            //                 $provider_visibility = array(1);
            //         }
            //         $module_score[$sr]['score'] = getScoreByCount($module_score[$sr]);
            //         $result['data'][$s]['contract_progress'] += $this->Contract_model->progress(array('module_id'=>$module_score[$sr]['module_id'],'contract_review_id'=>$review[0]['id_contract_review'],'provider_visibility'=>$provider_visibility));
            //     }
            //     if(count($module_score)>0)
            //         $result['data'][$s]['contract_progress'] = round($result['data'][$s]['contract_progress']/count($module_score)).'%';
            //     else
            //         $result['data'][$s]['contract_progress'] = '0%';
            //     $result['data'][$s]['score'] = getScore($scope = array_map(function($i){ return strtolower($i['score']); },$module_score));
            // }
            /////////////////////comment this section because of intigrate new scoreing functionality/////////


            $result['data'][$s]['contract_start_date'] = date('Y-m-d',strtotime($result['data'][$s]['contract_start_date']));
            $result['data'][$s]['contract_end_date'] = date('Y-m-d',strtotime($result['data'][$s]['contract_end_date']));
            $result['data'][$s]['created_on'] = date('Y-m-d',strtotime($result['data'][$s]['created_on']));
            //getting action items of a recent review based on user role
            $action_data = array('id_contract' => $result['data'][$s]['id_contract']);
            if (isset($data['id_user']))
                $action_data['id_user'] = $data['id_user'];
            if (isset($data['user_role_id']))
                $action_data['user_role_id'] = $data['user_role_id'];
            $action_data['item_status'] = 1;
            //$action_data['id_contract_review'] = $review[0]['id_contract_review'];
            $action_data['responsible_user_id'] = $data['id_user'];
            $action_data['status'] = 'open';
            $action_data['contract_workflow_id'] = $result['data'][$s]['id_contract_workflow'];
            //getting action items count of a recent review
            $result['data'][$s]['action_item_count'] = count($this->Contract_model->getContractReviewActionItemsList($action_data));
            if($result['data'][$s]['is_workflow'] == 0){
                //$result['data'][$s]['deadline'] = ($this->Contract_model->getContractDeadline(array('relationship_category_id'=>$result['data'][$s]['relationship_category_id'],'id_contract'=>$result['data'][$s]['id_contract'])));
                $contract_id = $result['data'][$s]['id_contract'];
                // $check_contract_in_calender_sql = "SELECT * FROM calender WHERE status = 1 AND (LEFT(contract_id,".strlen($contract_id).") = ".$contract_id." OR RIGHT(contract_id,".strlen($contract_id).") = ".$contract_id." OR contract_id LIKE '%,".$contract_id.",%');";
                // $check_contract_in_calender_sql = $this->User_model->custom_query($check_contract_in_calender_sql);
                
                $reminder_days = array();
                if($result['data'][$s]['can_review'] == 1){
                    //Getting reminder days of a contract category
                    $reminder_days = $this->User_model->check_record('relationship_category_remainder',array('relationship_category_id'=>$result['data'][$s]['relationship_category_id']));
                }
                if(count($reminder_days) == 0){
                    $reminder_days[0]['days'] = 0;
                }

                $check_contract_in_calender_sql = $this->Contract_model->check_contract_in_calender(
                                                                        array(
                                                                            'contract_id' => $result['data'][$s]['id_contract'],
                                                                            'business_unit_id' => $result['data'][$s]['business_unit_id'],
                                                                            'is_workflow' => $result['data'][$s]['is_workflow'],
                                                                            'relationship_category_id' => $result['data'][$s]['relationship_category_id'],
                                                                            'provider_id' => $result['data'][$s]['provider_id']
                                                                        ));
                if(count($check_contract_in_calender_sql)>0){
                    //Meanse there are contracts planned by selecting them
                    $result['data'][$s]['deadline'] = $check_contract_in_calender_sql[0]['date'];
                    $result['data'][$s]['review_name'] = $check_contract_in_calender_sql[0]['workflow_name'];
                }else{
                    //Meanse ther is not plan available 
                    $result['data'][$s]['deadline'] = null;
                    $result['data'][$s]['review_name'] = null;
                }
                //echo '<pre>'.print_r($check_contract_in_calender_sql);exit;
            }else{
                //$result['data'][$s]['deadline'] = ($this->Contract_model->getContractDeadline(array('relationship_category_id'=>$result['data'][$s]['relationship_category_id'],'id_contract'=>$result['data'][$s]['id_contract'])));
                if($result['data'][$s]['id_contract_workflow'] > 0){
                    $check_contract_in_calender_sql = $this->User_model->check_record('contract_workflow',array('id_contract_workflow'=>$result['data'][$s]['id_contract_workflow'],'status'=>1));
                    $result['data'][$s]['deadline'] = $check_contract_in_calender_sql[0]['Execute_by'];
                    $result['data'][$s]['review_name'] = $check_contract_in_calender_sql[0]['workflow_name'];
                }else{
                    //Meanse ther is not plan available 
                    $result['data'][$s]['deadline'] = null;
                    $result['data'][$s]['review_name'] = null;
                }
            }
            if(!empty($result['data'][$s]['deadline'])){
                if(date('Y-m-d')<= $result['data'][$s]['deadline']){
                    $result['data'][$s]['overdue']=0;
                }
                else{
                    $result['data'][$s]['overdue']=1;
                }
            }
            else{
                $result['data'][$s]['overdue']=0;
            }
            ///Assigning edit access for contracts
            $result['data'][$s]['ieaaei'] = 'annus';
            //checking is customer admin
            if(isset($data['user_role_id']) && $data['user_role_id'] == 2) {
                $result['data'][$s]['ieaaei'] = 'itako';
            }//chechking is contract created_by or contract_owner
            else if($data['id_user'] == $result['data'][$s]['created_by'] || $data['id_user'] == $result['data'][$s]['contract_owner_id']) {
                $result['data'][$s]['ieaaei'] = 'itako';
            }
            // $result['data'][$s]['ideedi']=count($this->Contract_model->getContractDiscussion(array('id_contract'=>$result['data'][$s]['id_contract'],'discussion_status'=>1)))>0?"itako":'annus';
            $result['data'][$s]['ideedi']=count($this->User_model->check_record('contract_review_discussion',array('contract_review_id'=>$result['data'][$s]['id_contract_review'],'discussion_status'=>1)))>0?"itako":'annus';
           $result['data'][$s]['provider_name']  = $result['data'][$s]['provider_name'];
           // for getting provider name in array formate
            if($result['data'][$s]['type']=='project'){
                $provider_names=$this->Project_model->getactiveprojectProvider(array('project_id'=>$result['data'][$s]['id_contract']));
                if(!empty($provider_names))
                {
                    $result['data'][$s]['provider_name']  = array_map(function($i){ return $i['provider_name']; },$provider_names);
                    if(count($result['data'][$s]['provider_name'])==1)
                    {
                        $result['data'][$s]['provider_name'] = $result['data'][$s]['provider_name'][0];
                    }
                    else{
                        $result['data'][$s]['provider_name'] = "Multiple";
                    }
                }
                // else{
                //     $result['data'][$s]['provider_name']  = '---';
                //     //array();
                // } 
                // if(count($provider_names)==0 || count($provider_names)>1){
                //     $result['data'][$s]['provider_name']='---';
                // }
                // if(count($provider_names)==1){
                //     $result['data'][$s]['provider_name']=$provider_names[0]['provider_name'];
                // }
                //comment this code after changing provider name to array
            }
            if(($result['data'][$s]['parent_id']>0)&&($result['data'][$s]['is_workflow']!="0")){
                $result['data'][$s]['is_subtask']=1;
                //$result['data'][$s]['provider_name']=array($result['data'][$s]['subTaskproviderName']);
                $result['data'][$s]['provider_name']=$result['data'][$s]['subTaskproviderName'];
            }
            elseif($result['data'][$s]['is_workflow']!="0"){
                $result['data'][$s]['is_subtask']=0;    
            }
            else{
                $result['data'][$s]['is_subtask']='';
            }
            unset($result['data'][$s]['subTaskproviderName']);
            // for getting is it sub task are not 
            $validation_info='';
           if($result['data'][$s]['is_subtask']==0){
                if(!empty($result['data'][$s]['id_contract_review'])){
                    // $get_validator_modules=$this->Contract_model->getvalidatorContributors(array('contract_review_id'=>$result['data'][$s]['id_contract_review']));
                    $get_validator_module=$this->Project_model->getvalidatormodule(array('contract_review_id'=>$result['data'][$s]['id_contract_review']));
                    if(!empty($get_validator_module)){
                        if($result['data'][$s]['validation_status']<=1){
                            $validation_info=1;
                            if(str_replace('%','',$result['data'][$s]['contract_progress'])=='100'){
                                $validation_info=4; 
                            }
                        }
                        else{
                            $validation_info=$result['data'][$s]['validation_status'];
                        }
                    }
                    // foreach($get_validator_module  as $ky =>$vl){
                    //     if($vl['module_status']==3){
                    //         $validation_info=3;
                    //     }
                    //     if($vl['module_status']==2){
                    //         $validation_info=2;
                    //     }
                    //     if($vl['module_status']==1){
                    //         $validation_info=0;
                    //         break;
                    //     }
                    // }
                }

            }
            $result['data'][$s]['validation_info']=$validation_info;
            $result['data'][$s]['business_unit_id']=pk_encrypt($result['data'][$s]['business_unit_id']);
            $result['data'][$s]['classification_id']=pk_encrypt($result['data'][$s]['classification_id']);
            $result['data'][$s]['contract_owner_id']=pk_encrypt($result['data'][$s]['contract_owner_id']);
            $result['data'][$s]['created_by']=pk_encrypt($result['data'][$s]['created_by']);
            $result['data'][$s]['currency_id']=pk_encrypt($result['data'][$s]['currency_id']);
            $result['data'][$s]['id_contract']=pk_encrypt($result['data'][$s]['id_contract']);
            $result['data'][$s]['contract_id']=pk_encrypt($result['data'][$s]['contract_id']);
            $result['data'][$s]['relationship_category_id']=pk_encrypt($result['data'][$s]['relationship_category_id']);
            $result['data'][$s]['updated_by']=pk_encrypt($result['data'][$s]['updated_by']);
            $result['data'][$s]['id_contract_review']=pk_encrypt($result['data'][$s]['id_contract_review']);
            $result['data'][$s]['id_contract_workflow']=pk_encrypt($result['data'][$s]['id_contract_workflow']);
            $result['data'][$s]['id_template']=pk_encrypt($result['data'][$s]['id_template']);
            $result['data'][$s]['provider_id']=pk_encrypt($result['data'][$s]['provider_id']);
            $result['data'][$s]['template_id']=pk_encrypt($result['data'][$s]['template_id']);
            $result['data'][$s]['delegate_id']=pk_encrypt($result['data'][$s]['delegate_id']);
            $result['data'][$s]['parent_contract_id']=pk_encrypt($result['data'][$s]['parent_contract_id']);
            $result['data'][$s]['can_access']=1;
        }
        
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }
    public function mycontributionslist_get()
    {
        $data = $this->input->get();

        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($data['customer_id']!=$this->session_user_info->customer_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['business_unit_id']) && strtolower($data['business_unit_id'])!='all') {
            $data['id_business_unit'] = pk_decrypt($data['business_unit_id']);
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            if(!in_array($data['id_business_unit'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        
        if(in_array($this->session_user_info->user_role_id,array(3,4))){
            $business_unit = $this->Business_unit_model->getBusinessUnitUser(array('user_id' => $data['id_user'],'status' => '1'));
            $data['business_unit_id'] = array_map(function($i){ return $i['id_business_unit']; },$business_unit);
            $data['session_user_role']=$this->session_user_info->user_role_id;
            $data['session_user_id']=$this->session_user_id;
        }
        if($this->session_user_info->user_role_id == 7){
            $data['provider_id'] = $this->session_user_info->provider;
        }
        $data['customer_user'] = $this->session_user_id;
        // print_r($data['customer_user']);exit;
        if(count($data['business_unit_id'])==0)
            unset($data['business_unit_id']);

        /*helper function for ordering smart table grid options*/
        $data = tableOptions($data);
        if(strlen($data['advancedsearch_get'])>2) 
            $data['advancedsearch_get']=json_decode($data['advancedsearch_get']);
        else
            $data['advancedsearch_get']=false;
        //echo $this->session_user_info->user_role_id; exit;
        if($this->session_user_info->contribution_type==1){
            $data['mycontribution_filter']='validator';
        }
        if($this->session_user_info->user_role_id==7 && $this->session_user_info->contribution_type==3){
            $data['is_contribution']=1;
        }
        // print_r($this->session_user_info);exit;
        $result = $this->Contract_model->getMyContributionList($data);
        // echo $this->db->last_query();exit;
		// print_r($result);exit; 
        if($this->session_user_info->contribution_type==1){//to check and hide the validation completed contracts when validator login
        }
        for($s=0;$s<count($result['data']);$s++) //all contracts
        {
            // print_r($result['data'][$s]['parent_id']);exit;
            if($result['data'][$s]['parent_id']>0){
                $result['data'][$s]['is_subtask']=1;    
            }
            else{
                $result['data'][$s]['is_subtask']=0;    
            }
            if($this->session_user_info->user_role_id==7){
                $result['data'][$s]['is_display_dashboard']=1;
            }
            else{
                $result['data'][$s]['is_display_dashboard']=0;
            }
            /*
            due to duplicate provider names in query the providerName was changed as provider_name
            form getMyContributionList function it return the result with providerName,but our requirement need  
            the providerName as provider_name so the result value can assigned to provider_name varible
            */
            $result['data'][$s]['provider_name']=$result['data'][$s]['providerName'];
            unset($result['data'][$s]['providerName']);//unset previous varible
            $validation_posible = false;
            // $validation_color = '#ff0000';//Red
            $validation_color = '#ff0000';//Red
            $validation_title = 'Not Ready';
            $vc = false;
            //per line ; per contract review  : Look up values of those modules to which logged on validator has active access.
            if(isset($data['customer_user']) && $data['customer_user'] > 0){
                $get_contract_review_id = $this->User_model->check_record('contract_review',array('contract_id'=>$result['data'][$s]['id_contract'],'is_workflow'=>$result['data'][$s]['is_workflow'],'is_workflow'=>$result['data'][$s]['is_workflow']));
                // print_r($result['data'][$s]['contract_review_id']);exit; 
                // echo $this->db->last_query();exit;

                /**********21-12-2020 $get_contract_review_id[count($get_contract_review_id) - 1]['id_contract_review'] is replaced with  $result['data'][$s]['contract_review_id'] for getting the project  my contributions by nareshkumar*******/
                $get_review_modules_assigned = $this->User_model->check_record('contract_user',array('contract_id'=>$result['data'][$s]['id_contract'],'contract_review_id'=>$result['data'][$s]['contract_review_id'],'user_id'=>$this->session_user_id,'status'=>1));
                // print_r($get_contract_review_id);exit;
                // echo $this->db->last_query();exit;
                if(count($get_contract_review_id)>0){
                    foreach($get_review_modules_assigned as $k => $v){
                        $module_progress  =  $this->Contract_model->progress(array('module_id'=>$v['module_id'],'contract_review_id'=>$result['data'][$s]['contract_review_id']));//Geting the latest review
                        //echo '<pre>'.$this->db->last_query();
                        // echo '<pre>'.print_r($this->session_user_info);exit;
                        if($module_progress != null && ((int)$module_progress >= 100 || $module_progress == '100') && (int)$this->session_user_info->contribution_type==1){
                            $validation_posible = true;
                            $validation_color = '#808080';//Gray
                            $validation_title = 'Ready for Validation';break;
                        }
                    }
                    //echo '<pre>'.print_r($get_review_modules_assigned);exit;
                    foreach($get_review_modules_assigned as $k => $v){
                        $module_info = $this->User_model->check_record('module',array('id_module'=>$v['module_id']));
                        //echo '<pre>'.print_r($module_info);
                        if($validation_color == '#808080' && $module_info[0]['module_status']==3){
                            $validation_color = '#14ad00';//Green
                            $validation_title = 'Validation Completed';
                            // $validation_info=3;
                        }else if($module_info[0]['module_status']==2){
                            $validation_title = 'Ready for Validation';
                            $validation_color = '#808080';//Gray
                            // $validation_info=2;
                        }
                        else if($module_info[0]['module_status']==1){
                            $validation_color = '#ff0000';//Red
                            // $validation_info=0;
                            $validation_title = 'Not Ready';break;
                        }
                    }
                }
                if($this->session_user_info->contribution_type == 1){
                    $vc = true;
                    //echo '<pre>'.print_r($data);exit;

                }
                // print_r($result['data'][$s]);exit;
            $result['data'][$s]['validation_title'] = $validation_title;
            $result['data'][$s]['validation_color'] = $validation_color;
            $result['data'][$s]['validation_posible'] = $validation_posible;
            // $result['data'][$s]['validation_info'] = $validation_info;
            $result['data'][$s]['validation_contributor'] = $vc;
            }
            if(strlen($result['data'][$s]['relationship_category_name'])>2){
                preg_match_all('/[A-Z]/', ucwords(strtolower($result['data'][$s]['relationship_category_name'])), $matches);
                $result['data'][$s]['relationship_category_short_name'] = implode('',$matches[0]);
            }else{
                $result['data'][$s]['relationship_category_short_name'] = $result['data'][$s]['relationship_category_name'];
            }
            $result['data'][$s]['review_by'] = '---';$result['data'][$s]['last_review']=NULL;
            $last_finalized_review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $result['data'][$s]['id_contract'],'order' => 'DESC','contract_review_status'=>'finished'));
            if(!empty($last_finalized_review) && isset($last_finalized_review[0]['id_contract_review']) && $last_finalized_review[0]['id_contract_review']!='' && $last_finalized_review[0]['id_contract_review']!=0) {
                $result['data'][$s]['review_by'] = $last_finalized_review[0]['review_by'];
                if($last_finalized_review[0]['review_on']!='---')
                    $result['data'][$s]['last_review'] = date('Y-m-d',strtotime($last_finalized_review[0]['review_on']));
            }
            if($result['data'][$s]['type']=='project'){
                $result['data'][$s]['last_review']='---';
            }
            $review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $result['data'][$s]['id_contract'],'order' => 'DESC'));
            $result['data'][$s]['id_contract_review'] = $review[0]['id_contract_review'] = $result['data'][$s]['id_contract_review'];
           
            /////////////////////comment this section because of intigrate new scoreing functionality/////////
            $contract_progress_score=$this->calculateScoreAndProgress(array('id_contract_review'=>$result['data'][$s]['id_contract_review'],'user_id'=>!empty($this->session_user_id)?$this->session_user_id:0));//new funcion for calculating  the score and contract progress
            $result['data'][$s]['contract_progress']=$contract_progress_score['contract_progress'];
            $result['data'][$s]['score']=$contract_progress_score['score'];
            $result['data'][$s]['contract_start_date'] = date('Y-m-d',strtotime($result['data'][$s]['contract_start_date']));
            $result['data'][$s]['contract_end_date'] = date('Y-m-d',strtotime($result['data'][$s]['contract_end_date']));
            $result['data'][$s]['created_on'] = date('Y-m-d',strtotime($result['data'][$s]['created_on']));
            //getting action items of a recent review based on user role
            $action_data = array('id_contract' => $result['data'][$s]['id_contract']);
            if (isset($data['id_user']))
                $action_data['id_user'] = $data['id_user'];
            if (isset($data['user_role_id']))
                $action_data['user_role_id'] = $data['user_role_id'];
            $action_data['item_status'] = 1;
            //$action_data['id_contract_review'] = $review[0]['id_contract_review'];
            $action_data['responsible_user_id'] = $data['id_user'];
            $action_data['status'] = 'open';
            $action_data['contract_workflow_id'] = $result['data'][$s]['id_contract_workflow'];
            //getting action items count of a recent review
            $result['data'][$s]['action_item_count'] = count($this->Contract_model->getContractReviewActionItemsList($action_data));
            if($result['data'][$s]['is_workflow'] == 0){
                //$result['data'][$s]['deadline'] = ($this->Contract_model->getContractDeadline(array('relationship_category_id'=>$result['data'][$s]['relationship_category_id'],'id_contract'=>$result['data'][$s]['id_contract'])));
                $contract_id = $result['data'][$s]['id_contract'];
                // $check_contract_in_calender_sql = "SELECT * FROM calender WHERE status = 1 AND (LEFT(contract_id,".strlen($contract_id).") = ".$contract_id." OR RIGHT(contract_id,".strlen($contract_id).") = ".$contract_id." OR contract_id LIKE '%,".$contract_id.",%');";
                // $check_contract_in_calender_sql = $this->User_model->custom_query($check_contract_in_calender_sql);

                $reminder_days = array();
                if($result['data'][$s]['can_review'] == 1){
                    //Getting reminder days of a contract category
                    $reminder_days = $this->User_model->check_record('relationship_category_remainder',array('relationship_category_id'=>$result['data'][$s]['relationship_category_id']));
                }
                if(count($reminder_days) == 0){
                    $reminder_days[0]['days'] = 0;
                }

                $check_contract_in_calender_sql = $this->Contract_model->check_contract_in_calender(
                                                                            array(
                                                                                'contract_id' => $result['data'][$s]['id_contract'],
                                                                                'business_unit_id' => $result['data'][$s]['business_unit_id'],
                                                                                'is_workflow' => $result['data'][$s]['is_workflow'],
                                                                                'relationship_category_id' => $result['data'][$s]['relationship_category_id'],
                                                                                'provider_id' => $result['data'][$s]['provider_id']
                                                                            ));//echo '<pre>'.$this->db->last_query();exit;
                if(count($check_contract_in_calender_sql)>0){
                    //Meanse there are contracts planned by selecting them
                    $result['data'][$s]['deadline'] = $check_contract_in_calender_sql[0]['date'];
                    $result['data'][$s]['review_name'] = $check_contract_in_calender_sql[0]['workflow_name'];
                }else{
                    //Meanse ther is not plan available 
                    $result['data'][$s]['deadline'] = null;
                    $result['data'][$s]['review_name'] = null;
                }
            }else{
                //$result['data'][$s]['deadline'] = ($this->Contract_model->getContractDeadline(array('relationship_category_id'=>$result['data'][$s]['relationship_category_id'],'id_contract'=>$result['data'][$s]['id_contract'])));
                if($result['data'][$s]['id_contract_workflow'] > 0){
                    $check_contract_in_calender_sql = $this->User_model->check_record('contract_workflow',array('id_contract_workflow'=>$result['data'][$s]['id_contract_workflow'],'status'=>1));
                    $result['data'][$s]['deadline'] = $check_contract_in_calender_sql[0]['Execute_by'];
                    $result['data'][$s]['review_name'] = $check_contract_in_calender_sql[0]['workflow_name'];
                }else{
                    //Meanse ther is not plan available 
                    $result['data'][$s]['deadline'] = null;
                    $result['data'][$s]['review_name'] = null;
                }
            }
            if(!empty($result['data'][$s]['deadline'])){
                if(date('Y-m-d')<= $result['data'][$s]['deadline']){
                    $result['data'][$s]['overdue']=0;
                }
                else{
                    $result['data'][$s]['overdue']=1;
                }
            }
            else{
                $result['data'][$s]['overdue']=0;
            }
            ///Assigning edit access for contracts
            $result['data'][$s]['ieaaei'] = 'annus';
            //checking is customer admin
            if(isset($data['user_role_id']) && $data['user_role_id'] == 2) {
                $result['data'][$s]['ieaaei'] = 'itako';
            }//chechking is contract created_by or contract_owner
            else if($data['id_user'] == $result['data'][$s]['created_by'] || $data['id_user'] == $result['data'][$s]['contract_owner_id']){
                $result['data'][$s]['ieaaei'] = 'itako';
            }
            $discussion['contract_review_id'] = $result['data'][$s]['id_contract_review'];
            $discussion['id_user'] = $this->session_user_id;
            // echo '<pre>'.print_r($discussion);
            $user_modules = $this->Contract_model->getContractReviewModule($discussion);
            // echo '<pre>'.$this->db->last_query();
            $module_ids = array_map(function ($i) { return strtolower($i['id_module']); }, $user_modules);
            // $result['data'][$s]['ideedi']=count($this->User_model->check_record('contract_review_discussion',array('contract_review_id'=>$result['data'][$s]['id_contract_review'],'discussion_status'=>1)))>0?"itako":'annus';
            $result['data'][$s]['ideedi']=(count($this->Contract_model->getContractReviewDiscussionModuleCount(array('id_contract_review'=>$data['contract_review_id'],'discussion_status'=>1,'module_ids'=>$module_ids)))>0)?"itako":'annus';

            // print_r($result['data'][$s]);exit;
            if($result['data'][$s]['type']=='project'){
                $provider_names=$this->Project_model->getactiveprojectProvider(array('project_id'=>$result['data'][$s]['id_contract']));
                if(count($provider_names)==0 || count($provider_names)>1){
                    $result['data'][$s]['provider_name']='---';
                }
                if(count($provider_names)==1){
                    $result['data'][$s]['provider_name']=$provider_names[0]['provider_name'];
                }
            }

            $get_validation_status=$this->User_model->check_record_selected('validation_status','contract_review',array('id_contract_review'=>$result['data'][$s]['contract_review_id']));//get the validation status for review    
            // echo $this->db->last_query();print_r($get_validation_status);exit;
            $validation_info='';
            // if($result['data'][$s]['workflow_parent_id']==0){
                // print_r($result['data'][$s]);exit;
                if(!empty($result['data'][$s]['contract_review_id'])){
                    // $get_validator_modules=$this->Contract_model->getvalidatorContributors(array('contract_review_id'=>$result['data'][$s]['id_contract_review']));
                    $get_validator_module=$this->Project_model->getvalidatormodule(array('contract_review_id'=>$result['data'][$s]['contract_review_id']));
                    if(!empty($get_validator_module)){
                        if($get_validation_status[0]['validation_status']<=1){
                            $validation_info=1;
                            if(str_replace('%','',$result['data'][$s]['contract_progress'])=='100'){
                                $validation_info=4;                            
                            }
                            
                        }
                        else{
                            $validation_info=$get_validation_status[0]['validation_status'];
                        }
                    }
                }

            // }

            $result['data'][$s]['validation_info']=$validation_info;

            $result['data'][$s]['business_unit_id']=pk_encrypt($result['data'][$s]['business_unit_id']);
            $result['data'][$s]['classification_id']=pk_encrypt($result['data'][$s]['classification_id']);
            $result['data'][$s]['contract_owner_id']=pk_encrypt($result['data'][$s]['contract_owner_id']);
            $result['data'][$s]['created_by']=pk_encrypt($result['data'][$s]['created_by']);
            $result['data'][$s]['currency_id']=pk_encrypt($result['data'][$s]['currency_id']);
            $result['data'][$s]['id_contract']=pk_encrypt($result['data'][$s]['id_contract']);
            $result['data'][$s]['contract_id']=pk_encrypt($result['data'][$s]['contract_id']);
            $result['data'][$s]['delegate_id']=pk_encrypt($result['data'][$s]['delegate_id']);
            $result['data'][$s]['provider_id']=pk_encrypt($result['data'][$s]['provider_id']);
            $result['data'][$s]['id_template']=pk_encrypt($result['data'][$s]['id_template']);
            $result['data'][$s]['template_id']=pk_encrypt($result['data'][$s]['template_id']);
            $result['data'][$s]['id_contract_workflow']=pk_encrypt($result['data'][$s]['id_contract_workflow']);
            $result['data'][$s]['relationship_category_id']=pk_encrypt($result['data'][$s]['relationship_category_id']);
            $result['data'][$s]['updated_by']=pk_encrypt($result['data'][$s]['updated_by']);
            $result['data'][$s]['id_contract_review']=pk_encrypt($result['data'][$s]['id_contract_review']);
            $result['data'][$s]['parent_contract_id']=pk_encrypt($result['data'][$s]['parent_contract_id']);
            $result['data'][$s]['can_access']=1;
        }
        
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }
    public function deletedList_get()
    {
        $data = $this->input->get();

        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($data['customer_id']!=$this->session_user_info->customer_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['business_unit_id']) && strtolower($data['business_unit_id'])!='all') {
            $data['id_business_unit'] = pk_decrypt($data['business_unit_id']);
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            if(!in_array($data['id_business_unit'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['delegate_id'])) {
            $data['delegate_id'] = pk_decrypt($data['delegate_id']);
            if(!in_array($data['delegate_id'],$this->session_user_delegates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_owner_id'])) {
            $data['contract_owner_id'] = pk_decrypt($data['contract_owner_id']);
            if(!in_array($data['contract_owner_id'],$this->session_user_customer_all_users)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['customer_user'])) {
            $data['customer_user'] = pk_decrypt($data['customer_user']);
            if(!in_array($data['customer_user'],$this->session_user_contributors)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id']) && isset($data['id_user'])){
            if(in_array($data['user_role_id'],array(3))){
                $business_unit = $this->Business_unit_model->getBusinessUnitUser(array('user_id' => $data['id_user'],'status' => '1'));
                $data['business_unit_id'] = array_map(function($i){ return $i['id_business_unit']; },$business_unit);
                $data['session_user_role']=$this->session_user_info->user_role_id;
                $data['session_user_id']=$this->session_user_id;
            }
            /*if($data['user_role_id']==3){
                $data['contract_owner_id'] = $data['id_user'];
            }*/
            if($data['user_role_id']==4){
                $data['delegate_id'] = $data['id_user'];
                $data['session_user_role']=$this->session_user_info->user_role_id;
                $data['session_user_id']=$this->session_user_id;
                if(!in_array($data['delegate_id'],$this->session_user_delegates)){
                    $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                    $this->response($result, REST_Controller::HTTP_OK);
                }
            }
            if($data['user_role_id']==5){
                $data['customer_user'] = $data['id_user'];
                if(!in_array($data['customer_user'],$this->session_user_contributors)){
                    $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                    $this->response($result, REST_Controller::HTTP_OK);
                }
            }
            if($data['user_role_id']==6){
                $data['business_unit_id'] = $this->session_user_business_units;
            }
        }
        if(isset($data['parent_contract_id'])) {
            $data['parent_contract_id'] = pk_decrypt($data['parent_contract_id']);
        }
        /*helper function for ordering smart table grid options*/
        $data = tableOptions($data);
        $result = $this->Contract_model->getDeletedContractList($data);//echo $this->db->last_query();exit;
        //echo '<pre>'.print_r($result);exit;
        for($s=0;$s<count($result['data']);$s++)
        {
            if(strlen($result['data'][$s]['relationship_category_name'])>2){
                preg_match_all('/[A-Z]/', ucwords(strtolower($result['data'][$s]['relationship_category_name'])), $matches);
                $result['data'][$s]['relationship_category_short_name'] = implode('',$matches[0]);
            }else{
                $result['data'][$s]['relationship_category_short_name'] = $result['data'][$s]['relationship_category_name'];
            }
            // preg_match_all('/[A-Z]/', ucwords(strtolower($result['data'][$s]['relationship_category_name'])), $matches);
            // $result['data'][$s]['relationship_category_short_name'] = implode('',$matches[0]);
            $result['data'][$s]['review_by'] = '---';$result['data'][$s]['last_review']=NULL;
            $last_finalized_review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $result['data'][$s]['id_contract'],'order' => 'DESC','contract_review_status'=>'finished'));
            if(!empty($last_finalized_review) && isset($last_finalized_review[0]['id_contract_review']) && $last_finalized_review[0]['id_contract_review']!='' && $last_finalized_review[0]['id_contract_review']!=0) {
                $result['data'][$s]['review_by'] = $last_finalized_review[0]['review_by'];
                if($last_finalized_review[0]['review_on']!='---')
                    $result['data'][$s]['last_review'] = date('Y-m-d',strtotime($last_finalized_review[0]['review_on']));
            }
            $review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $result['data'][$s]['id_contract'],'order' => 'DESC'));
            if(!empty($review) && isset($review[0]['id_contract_review']) && $review[0]['id_contract_review']!='' && $review[0]['id_contract_review']!=0) {
                /*$result['data'][$s]['review_by'] = $review[0]['review_by'];
                if($review[0]['review_on']!='---')
                    $result['data'][$s]['last_review'] = date('Y-m-d',strtotime($review[0]['review_on']));*/

                //getting score of recent review
                $result['data'][$s]['id_contract_review'] = $review[0]['id_contract_review'];
                $module_score = $this->Contract_model->getContractReviewModuleScore(array('contract_review_id' => $review[0]['id_contract_review']));
                for($sr=0;$sr<count($module_score);$sr++)
                {
                    $module_score[$sr]['score'] = getScoreByCount($module_score[$sr]);
                }
                $result['data'][$s]['score'] = getScore($scope = array_map(function($i){ return strtolower($i['score']); },$module_score));
            }

            $result['data'][$s]['contract_start_date'] = date('Y-m-d',strtotime($result['data'][$s]['contract_start_date']));
            $result['data'][$s]['contract_end_date'] = date('Y-m-d',strtotime($result['data'][$s]['contract_end_date']));
            //getting action items of a recent review based on user role
            $action_data = array('id_contract' => $result['data'][$s]['id_contract']);
            if (isset($data['id_user']))
                $action_data['id_user'] = $data['id_user'];
            if (isset($data['user_role_id']))
                $action_data['user_role_id'] = $data['user_role_id'];
            $action_data['item_status'] = 1;
            //$action_data['id_contract_review'] = $review[0]['id_contract_review'];
            $action_data['responsible_user_id'] = $data['id_user'];
            $action_data['status'] = 'open';
            //getting action items count of a recent review
            $result['data'][$s]['action_item_count'] = count($this->Contract_model->getContractReviewActionItemsList($action_data));
            /*if(!empty($review) && isset($review[0]['id_contract_review']) && $review[0]['id_contract_review']!='' && $review[0]['id_contract_review']!=0) {
                $action_data = array('id_contract' => $result['data'][$s]['id_contract']);
                if (isset($data['id_user']))
                    $action_data['id_user'] = $data['id_user'];
                if (isset($data['user_role_id']))
                    $action_data['user_role_id'] = $data['user_role_id'];
                $action_data['item_status'] = 1;
                $action_data['id_contract_review'] = $review[0]['id_contract_review'];
                $action_data['responsible_user_id'] = $data['id_user'];
                //getting action items count of a recent review
                $result['data'][$s]['action_item_count'] = count($this->Contract_model->getContractReviewActionItemsList($action_data));
            }
            else{
                $result['data'][$s]['action_item_count']=0;
            }*/
            $result['data'][$s]['deadline'] = ($this->Contract_model->getContractDeadline(array('relationship_category_id'=>$result['data'][$s]['relationship_category_id'],'id_contract'=>$result['data'][$s]['id_contract'])));
            ///Assigning edit access for contracts
            $result['data'][$s]['ieaaei'] = 'annus';
            //checking is customer admin
            if($data['user_role_id'] == 2) {
                $result['data'][$s]['ieaaei'] = 'itako';
            }//chechking is contract created_by or contract_owner
            else if($data['id_user'] == $result['data'][$s]['created_by'] || $data['id_user'] == $result['data'][$s]['contract_owner_id']) {
                $result['data'][$s]['ieaaei'] = 'itako';
            }
            $result['data'][$s]['ideedi']=count($this->Contract_model->getContractDiscussion(array('id_contract'=>$result['data'][$s]['id_contract'],'discussion_status'=>1)))>0?"itako":'annus';

            $result['data'][$s]['business_unit_id']=pk_encrypt($result['data'][$s]['business_unit_id']);
            $result['data'][$s]['classification_id']=pk_encrypt($result['data'][$s]['classification_id']);
            $result['data'][$s]['contract_owner_id']=pk_encrypt($result['data'][$s]['contract_owner_id']);
            $result['data'][$s]['created_by']=pk_encrypt($result['data'][$s]['created_by']);
            $result['data'][$s]['currency_id']=pk_encrypt($result['data'][$s]['currency_id']);
            $result['data'][$s]['id_contract']=pk_encrypt($result['data'][$s]['id_contract']);
            $result['data'][$s]['relationship_category_id']=pk_encrypt($result['data'][$s]['relationship_category_id']);
            $result['data'][$s]['updated_by']=pk_encrypt($result['data'][$s]['updated_by']);
            $result['data'][$s]['id_contract_review']=pk_encrypt($result['data'][$s]['id_contract_review']);
            if($result['data'][$s]['type']=='project'){
                $project_providers=explode(',',$result['data'][$s]['project_provider_name']);
                if(count($project_providers)==0 || count($project_providers)>1){
                    $result['data'][$s]['provider_name']='---';
                }
                if(count($project_providers)==1){
                    $result['data'][$s]['provider_name']=!empty($project_providers[0])?$project_providers[0]:'---';
                }
                
            }
        }
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function listProviders_get(){
        $data = $this->input->get();

        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($data['customer_id']!=$this->session_user_info->customer_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['business_unit_id']) && strtolower($data['business_unit_id'])!='all') {
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            $data['id_business_unit'] = pk_decrypt($data['business_unit_id']);
            if(!in_array($data['id_business_unit'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['delegate_id'])) {
            $data['delegate_id'] = pk_decrypt($data['delegate_id']);
            if(!in_array($data['delegate_id'],$this->session_user_delegates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_owner_id'])) {
            $data['contract_owner_id'] = pk_decrypt($data['contract_owner_id']);
            if(!in_array($data['contract_owner_id'],$this->session_user_customer_all_users)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['customer_user'])) {
            $data['customer_user'] = pk_decrypt($data['customer_user']);
            if(!in_array($data['customer_user'],$this->session_user_contributors)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }

        if(isset($data['user_role_id']) && isset($data['id_user'])){
            if(in_array($data['user_role_id'],array(3))){
                $business_unit = $this->Business_unit_model->getBusinessUnitUser(array('user_id' => $data['id_user'],'status' => '1'));
                $data['business_unit_id'] = array_map(function($i){ return $i['id_business_unit']; },$business_unit);
                $data['session_user_role']=$this->session_user_info->user_role_id;
                $data['session_user_id']=$this->session_user_id;
            }
            if($data['user_role_id']==3){
                /*$data['contract_owner_id'] = $data['id_user'];
                if(!in_array($data['contract_owner_id'],$this->session_user_bu_owners)){
                    $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                    $this->response($result, REST_Controller::HTTP_OK);
                }*/
                $data['session_user_role']=$this->session_user_info->user_role_id;
                $data['session_user_id']=$this->session_user_id;
            }
            if($data['user_role_id']==4){
                $data['delegate_id'] = $data['id_user'];
                if(!in_array($data['delegate_id'],$this->session_user_delegates)){
                    $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                    $this->response($result, REST_Controller::HTTP_OK);
                }
                $data['session_user_role']=$this->session_user_info->user_role_id;
                $data['session_user_id']=$this->session_user_id;
            }
            if($data['user_role_id']==5){
                $data['customer_user'] = $data['id_user'];
                if(!in_array($data['customer_user'],$this->session_user_contributors)){
                    $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                    $this->response($result, REST_Controller::HTTP_OK);
                }
            }
            if($data['user_role_id']==6){
                $data['business_unit_id'] = $this->session_user_business_units;
            }
        }

        /*helper function for ordering smart table grid options*/
        $data = tableOptions($data);
        $result = $this->Contract_model->getProviders($data);
        //echo '<pre>';print_r($result);
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }
    public function actionItemFilters_get(){
        $data = $this->input->get();

        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($data['customer_id']!=$this->session_user_info->customer_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['business_unit_id']) && strtolower($data['business_unit_id'])!='all') {
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            if(!in_array($data['business_unit_id'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['delegate_id'])) {
            $data['delegate_id'] = pk_decrypt($data['delegate_id']);
            if(!in_array($data['delegate_id'],$this->session_user_delegates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_owner_id'])) {
            $data['contract_owner_id'] = pk_decrypt($data['contract_owner_id']);
            if(!in_array($data['contract_owner_id'],$this->session_user_customer_all_users)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['customer_user'])) {
            $data['customer_user'] = pk_decrypt($data['customer_user']);
            if(!in_array($data['customer_user'],$this->session_user_contributors)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id']) && isset($data['id_user'])){
            if(in_array($data['user_role_id'],array(3))){
                $business_unit = $this->Business_unit_model->getBusinessUnitUser(array('user_id' => $data['id_user'],'status' => '1'));
                $data['business_unit_id'] = array_map(function($i){ return $i['id_business_unit']; },$business_unit);
                $data['session_user_role']=$this->session_user_info->user_role_id;
                $data['session_user_id']=$this->session_user_id;
            }
            if($data['user_role_id']==3){
                $data['contract_owner_id'] = $data['id_user'];
                /*if(!in_array($data['contract_owner_id'],$this->session_user_bu_owners)){
                    $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                    $this->response($result, REST_Controller::HTTP_OK);
                }*/
            }
            if($data['user_role_id']==4){
                $data['delegate_id'] = $data['id_user'];
                if(!in_array($data['delegate_id'],$this->session_user_delegates)){
                    $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'3');
                    $this->response($result, REST_Controller::HTTP_OK);
                }
                $data['session_user_role']=$this->session_user_info->user_role_id;
                $data['session_user_id']=$this->session_user_id;
            }
            if($data['user_role_id']==5){
                $data['customer_user'] = $data['id_user'];
                if(!in_array($data['customer_user'],$this->session_user_contributors)){
                    $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'4');
                    $this->response($result, REST_Controller::HTTP_OK);
                }
            }
            if($data['user_role_id']==6){
                $data['business_unit_id'] = $this->session_user_business_units;
            }
            if($data['user_role_id']==7){
                $data['provider_id'] = $this->session_user_info->provider;
            }
        }
        if($this->session_user_info->contribution_type == 2 || $this->session_user_info->contribution_type == 3)
            $data['provider_id'] = $data['id_provider'] = $this->session_user_info->provider;
        $data['all_contract'] = true; // To escape parent child hierarchy in contract list.

        /*helper function for ordering smart table grid options*/
        $result['contracts'] = array();

        //Logged in User bussiness unit
        if($this->session_user_info->user_role_id != 2){
            $data['business_unit_id'] = $this->User_model->check_record('business_unit_user',array('user_id'=>$this->session_user_id,'status'=>1));
            $data['business_unit_id'] = array_map(function($i){ return $i['business_unit_id']; },$data['business_unit_id']);
        }
        if(count($data['business_unit_id'])==0)
            unset($data['business_unit_id']);
            $data['type']='action_items';
        $result_contracts = $this->Contract_model->getContractList($data)['data'];
        unset($data['type']);//echo '<pre>'.$this->db->last_query();exit;
        if($data['user_role_id'] == 3 || $data['user_role_id'] == 4)
            $data['provider_array'] = array_map(function($i){ return $i['provider_id']; },$result_contracts);
            $data['provider_array']=array_filter($data['provider_array']);
        if(isset($data['provider_array']) && count($data['provider_array'])==0)
            $data['provider_array'] = array(0);//If there are no contracts no providers to be shown in Action item filter
        $result['providers'] = $this->Customer_model->getproviderlist($data)['data'];//echo '<pre>'.$this->db->last_query();exit;
        foreach($result_contracts as $k=>$v){
            $result['contracts'][$k]['contract_id']=pk_encrypt($v['contract_id']);
            $result['contracts'][$k]['contract_name']=$v['contract_name'];
        }
        //echo '<pre>';print_r($result);
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function contractStatus_get(){
        //This is now considering in frontend only.
        $data[]=['key'=>'new','value'=>'New'];
        $data[]=['key'=>'pending review','value'=>'Reviews to Initiate'];
        $data[]=['key'=>'review in progress','value'=>'Reviews in Progress'];
        $data[]=['key'=>'review finalized','value'=>'Reviews Finalized'];
        $data[]=['key'=>'pending workflow','value'=>'Tasks to Initiate'];
        $data[]=['key'=>'workflow in progress','value'=>'Tasks in Progress'];
        $data[]=['key'=>'workflow finalized','value'=>'Tasks Finalized'];
        //$data[]=['key'=>'under discussion','value'=>'Under Discussion'];

        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$data);
        $this->response($result, REST_Controller::HTTP_OK);

    }

    public function add_post()
    {
        $data = $this->input->post();
        //parent_contract_id
        // echo '<pre>';print_r($data);exit;
        if(isset($data['contract'])){
            $data = $data['contract'];
        }
        if(isset($_FILES['file']))
            $totalFilesCount = count($_FILES['file']['name']);
        else
            $totalFilesCount=0;
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $this->form_validator->add_rules('business_unit_id', array('required'=>$this->lang->line('business_unit_id_req')));
        $this->form_validator->add_rules('contract_name', array('required'=>$this->lang->line('contract_name_req')));
        $this->form_validator->add_rules('contract_owner_id', array('required'=>$this->lang->line('contract_owner_id_req')));
        //$this->form_validator->add_rules('delegate_id', array('required'=>$this->lang->line('contract_delegate_id_req')));
        $this->form_validator->add_rules('description', array('required'=>$this->lang->line('contract_description_req')));
        $this->form_validator->add_rules('contract_start_date', array(
            'required'=>$this->lang->line('contract_start_date_req'),
            'date' => $this->lang->line('contract_start_date_invalid')
        ));
        /*$this->form_validator->add_rules('contract_end_date', array(
            'required'=>$this->lang->line('contract_end_date_req'),
            'date' => $this->lang->line('contract_end_date_invalid')
        ));*/
        $this->form_validator->add_rules('relationship_category_id', array('required'=>$this->lang->line('relationship_category_id_req')));
        // $this->form_validator->add_rules('classification_id', array('required'=>$this->lang->line('relationship_classification_id_req')));
        $this->form_validator->add_rules('contract_value', array('required'=>$this->lang->line('contract_value_req')));
        $this->form_validator->add_rules('currency_id', array('required'=>$this->lang->line('currency_id_req')));
        $this->form_validator->add_rules('created_by', array('required'=>$this->lang->line('created_by_req')));
        //$this->form_validator->add_rules('template_id', array('required'=>$this->lang->line('template_id_req')));
        $this->form_validator->add_rules('contract_active_status', array('required'=>$this->lang->line('contract__active_status_required')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($data['customer_id']!=$this->session_user_info->customer_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'1');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['business_unit_id']) && strtolower($data['business_unit_id'])!='all') {
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            if(!in_array($data['business_unit_id'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_owner_id'])) {
            $data['contract_owner_id'] = pk_decrypt($data['contract_owner_id']);
            if($this->session_user_info->user_role_id==3){
                $data['contract_owner_id']=$this->session_user_info->id_user;
            }
            if(!in_array($data['contract_owner_id'],$this->session_user_customer_all_users)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'3');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['relationship_category_id'])) {
            $data['relationship_category_id'] = pk_decrypt($data['relationship_category_id']);
            if(!in_array($data['relationship_category_id'],$this->session_user_customer_relationship_categories)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'4');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        $relationship_category_type = $this->User_model->check_record('relationship_category',array('id_relationship_category'=>$data['relationship_category_id']));
        if(isset($relationship_category_type[0]['can_review']))
            $data['can_review'] = $relationship_category_type[0]['can_review'];
        if(isset($data['classification_id']) && $data['classification_id']!='null' && $data['classification_id']!='') {
            $data['classification_id'] = pk_decrypt($data['classification_id']);
            if(!in_array($data['classification_id'],$this->session_user_customer_relationship_classifications)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'5');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['currency_id'])) {
            $data['currency_id'] = pk_decrypt($data['currency_id']);
            if(!in_array($data['currency_id'],$this->session_user_master_currency)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'6');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['created_by'])) {
            $data['created_by'] = pk_decrypt($data['created_by']);
            if($data['created_by']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'7');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['delegate_id']) && $data['delegate_id'] != '' && pk_decrypt($data['delegate_id']) > 0) {
            $data['delegate_id'] = pk_decrypt($data['delegate_id']);
            if($this->session_user_info->user_role_id==4){
                $data['delegate_id']=$this->session_user_info->id_user;
            }
            if(!in_array($data['delegate_id'],$this->session_user_delegates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'8');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['parent_contract_id'])) {
            $data['parent_contract_id'] = pk_decrypt($data['parent_contract_id']);
        }
        if(isset($data['provider_name'])) {
            $data['provider_name'] = pk_decrypt($data['provider_name']);
        }
        if(isset($data['template_id']))
        {
            $data['template_id']=pk_decrypt($data['template_id']);
        }
        if(isset($data['id_document_intelligence']))
        {
            $data['id_document_intelligence']=pk_decrypt($data['id_document_intelligence']);
        }
        // $check_contract_unique_id_exitst=$this->User_model->getcontractsBybuid(array('contract_unique_id'=>$data['contract_unique_id'],'customer_id'=>$data['customer_id']));
        // if(!empty($check_contract_unique_id_exitst)){
        //     $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('contract_unique_id_alredy_ext')), 'data'=>'');
        //     $this->response($result, REST_Controller::HTTP_OK);
        // }
     
        //generating contract Unique id
        // $get_contracts=$this->User_model->getcontractsBybuid(array('customer_id'=>$data['customer_id']));
        // $countofcantracts=count($get_contracts);
        // $contract_unique_id='C'.str_pad($countofcantracts+1, 7, '0', STR_PAD_LEFT);
        // $data['contract_unique_id'] = $contract_unique_id;
        $data['contract_unique_id'] = uniqueId(array('module' => 'contract' , 'customer_id' => $this->session_user_info->customer_id));



        if(isset($data['is_template_lock']) &&( $data['is_template_lock'] ==1|| $data['is_template_lock']==0))
        {
            if(($data['is_template_lock'] ==1 && (!$this->session_user_info->user_role_id==2)))
            {
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('template_should_be_locked_by_customer_admin_only'), 'data'=>''));
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        $add = array(
            'can_review' => $data['can_review'],
            'business_unit_id' => $data['business_unit_id'],
            'provider_name' => isset($data['provider_name'])?$data['provider_name']:0,
            'contract_name' => $data['contract_name'],
            'template_id'=>($data['template_id'])>0?$data['template_id']:0,
            'contract_owner_id' => $data['contract_owner_id'],
            'contract_start_date' => $data['contract_start_date'],
            //'contract_end_date' => $data['contract_end_date'],
            'contract_end_date' => !empty($data['contract_end_date'])?$data['contract_end_date']:null,
            'auto_renewal' => isset($data['auto_renewal'])?$data['auto_renewal']:'0',
            'relationship_category_id' => $data['relationship_category_id'],
            'classification_id' => !empty($data['classification_id'])?$data['classification_id']:0,
            'contract_value' => $data['contract_value'],
            'currency_id' => $data['currency_id'],
            'provider_contract_sponsor' => isset($data['provider_contract_sponsor'])?$data['provider_contract_sponsor']:'',
            'internal_contract_sponsor' => isset($data['internal_contract_sponsor'])?$data['internal_contract_sponsor']:'',
            'internal_partner_relationship_manager' => isset($data['internal_partner_relationship_manager'])?$data['internal_partner_relationship_manager']:'',
            'provider_partner_relationship_manager' => isset($data['provider_partner_relationship_manager'])?$data['provider_partner_relationship_manager']:'',
            'provider_contract_responsible' => isset($data['provider_contract_responsible'])?$data['provider_contract_responsible']:'',
            'internal_contract_responsible' => isset($data['internal_contract_responsible'])?$data['internal_contract_responsible']:'',
            'delegate_id' => isset($data['delegate_id'])?(int)$data['delegate_id']:null,
            'description' => isset($data['description'])?$data['description']:'',
            'created_by' => $this->session_user_id,
            'created_on' => currentDate(),
            'parent_contract_id' => isset($data['parent_contract_id'])?$data['parent_contract_id']:0,
            'contract_unique_id' => isset($data['contract_unique_id'])?$data['contract_unique_id']:'',
            'type' => 'contract',
            'is_template_lock'=>isset($data['is_template_lock'])?$data['is_template_lock']:0,
            'contract_active_status'=>$data['contract_active_status'],
            'contract_build_id' => (isset($data['contract_build_id']) && !empty($data['contract_build_id']) && $data['contract_build_id'] !== 'null') ? ($data['contract_build_id']) : null //contract builder id
            
        );
        $id_contract=$this->Contract_model->addContract($add);
        // echo $this->db->last_query();exit;

        if(isset($data['project_id'])){
            $data['project_id']= pk_decrypt($data['project_id']);
            $this->User_model->insert_data('contract_projects',array('contract_id'=>$id_contract,'project_id'=>$data['project_id'],'is_linked'=>1));
        }

        //Checking for available plans
        $reminder_days = array();
        if($result[$s]['can_review'] == 1){
            //Getting reminder days of a contract category
            $reminder_days = $this->User_model->check_record('relationship_category_remainder',array('relationship_category_id'=>$result[$s]['relationship_category_id']));
        }
        if(count($reminder_days) == 0){
            $reminder_days[0]['days'] = 0;
        }
        /**
            * $check_review_schedule = $this->Contract_model->check_contract_in_calender(
            *      array(
            *          'contract_id' => $id_contract,
            *         'business_unit_id' => $data['business_unit_id'],
            *         'relationship_category_id' => $data['relationship_category_id'],
            *         'provider_id' => $data['provider_name'],
            *         'is_workflow' => 0
            *     ));
            * if(count($check_review_schedule) > 0){
            *     $this->User_model->update_data('contract',array('is_lock'=>1),array('id_contract'=>$id_contract));
            * }
        */

        //Inserting Default Stakeholder lables
        $stake_holder_lables = array('contract_id'=>$id_contract,'lable1'=>'Account Managers','lable2'=>'Delivery Managers','lable3'=>'Contract Managers','created_by'=>$this->session_user_id,'created_on' => currentDate());
        $this->User_model->insert_data('contract_stakeholder_lables',$stake_holder_lables);


        //////////CONTRACT TAGS//////////////

        if(isset($data['grouped_tags']) && count($data['grouped_tags'])>0){
            

            foreach($data['grouped_tags'] as $GK => $GV)
            {
                $data['contract_tags'] = $GV['tag_details'] ; 

                //if(isset($data['contract_tags']) && count($data['contract_tags'])>0){

                $tag_data = array();
                foreach($data['contract_tags'] as $k => $v){                    
                    $tag_data[$k]['tag_id'] = (int)pk_decrypt($v['tag_id']);
                    $tag_data[$k]['contract_id'] = (int)$id_contract;
                    $tag_data[$k]['created_by'] = $data['created_by'];
                    $tag_data[$k]['created_on'] = currentDate();
                    if($v['tag_type']=='input' || $v['tag_type']=='date')
                    {
                        $tag_data[$k]['tag_option_value'] = $v['tag_option'];
                    } 
                    elseif($v['tag_type']=='radio' || $v['tag_type']=='rag' || ($v['tag_type']=='dropdown' && ($v['multi_select'] == 0))){
                        $tag_data[$k]['tag_option'] = (int)pk_decrypt($v['tag_option']);
                        $tag_data[$k]['comments'] = isset($v['comments']) ? $v['comments'] : NULL ;
                        $tag_option_value = $this->User_model->check_record('tag_option_language',array('tag_option_id'=>$tag_data[$k]['tag_option']));
                        if(isset($tag_option_value[0]) || isset($v['tag_option_name']))
                            $tag_data[$k]['tag_option_value'] = isset($v['tag_option_name'])?$v['tag_option_name']:$tag_option_value[0]['tag_option_name'];
                    }
                    elseif($v['tag_type'] == 'dropdown' && ($v['multi_select'] == 1))
                    {
                        $tagAnswers = [];
                        $tagOptionValue = [];
                        //$CreatedTagOption = $this->User_model->check_record("tag_option" , array("tag_id" => $tag_data[$k]['tag_id'] ,"status" => 1));
                        $CreatedTagOption= $this->Tag_model->getContractTagoptions(array('tag_id'=>$tag_data[$k]['tag_id']));
                        foreach($v['tag_option'] as $multiDropKey => $multiDropValue)
                        {
                            foreach($CreatedTagOption as $option)
                            {
                                if($option['id_tag_option'] == (int)pk_decrypt($multiDropValue))
                                {
                                    $tagOptionValue[] = $option['tag_option_name'];
                                }
                            }

                            $tagAnswers[] = (int)pk_decrypt($multiDropValue);
                        }
                        $commaSepTagAnswers = "";
                        $commaSepTagAnswersValue = "";
                        if(count($tagAnswers) > 0)
                        {
                            $commaSepTagAnswers = implode("," , $tagAnswers);
                        }
                        if(count($tagOptionValue) > 0)
                        {
                            $commaSepTagAnswersValue = implode("," , $tagOptionValue);
                        }
                        $tag_data[$k]['tag_option'] = $commaSepTagAnswers;
                        $tag_data[$k]['tag_option_value'] = $commaSepTagAnswersValue;
                        
                    }
                    elseif($v['tag_type'] == 'selected')
                    {
                        $v['tag_option'] = ((int)$v['multi_select'] == 0) ? array($v['tag_option']) : $v['tag_option'];
                        $tagAnswers = [];
                        foreach($v['tag_option'] as $multiKey => $multiValue)
                        {
                            $tagAnswers[] = (int)pk_decrypt($multiValue);
                        }
                        $commaSepTagAnswers ="";
                        if(count($tagAnswers) > 0)
                        {
                            $commaSepTagAnswers = implode("," , $tagAnswers);
                        }
                        $tag_data[$k]['tag_option'] = $commaSepTagAnswers;

                        $modalData = [
                            'module' => $v['selected_field'],
                            'ids' => $tagAnswers
                        ];
                        if(count($tagAnswers) > 0)
                        {
                            $tagOptionValue = $this->Tag_model->getNames($modalData);
                            $tag_data[$k]['tag_option_value'] = !empty($tagOptionValue) ? $tagOptionValue[0]['tag_option_value'] : '';
                        }
                        else
                        {
                            $tag_data[$k]['tag_option_value'] = '';
                        }

                        
                    }
                    $this->User_model->insert_data('contract_tags',$tag_data[$k]);
                }
            //}
            }
        }
        //////////CONTRACT TAGS//////////////

        $customer_id=$data['customer_id'];
        $path=FILE_SYSTEM_PATH.'uploads/';
        $contract_documents=array();
        if(!is_dir($path.$customer_id)){ mkdir($path.$customer_id); }
        if(isset($_FILES) && $totalFilesCount>0)
        {
            $i_attachment=0;
            for($i_attachment=0; $i_attachment<$totalFilesCount; $i_attachment++) {
                $imageName = doUpload(array(
                    'temp_name' => $_FILES['file']['tmp_name'][$i_attachment],
                    'image' => $_FILES['file']['name'][$i_attachment],
                    'upload_path' => $path,
                    'folder' => $customer_id));
                $contract_documents[$i_attachment]['module_id']=$customer_id;
                $contract_documents[$i_attachment]['module_type']='customer';
                $contract_documents[$i_attachment]['reference_id']=$id_contract;
                $contract_documents[$i_attachment]['reference_type']='contract';
                $contract_documents[$i_attachment]['document_name']=$_FILES['file']['name'][$i_attachment];
                $contract_documents[$i_attachment]['document_type'] = 0;
                $contract_documents[$i_attachment]['document_source']=$imageName;
                $contract_documents[$i_attachment]['document_mime_type']=$_FILES['file']['type'][$i_attachment];
                $contract_documents[$i_attachment]['document_status']=1;
                $contract_documents[$i_attachment]['uploaded_by']=$this->session_user_id;
                $contract_documents[$i_attachment]['uploaded_on']=currentDate();
            }
        }
        if(count($contract_documents)>0){
            $this->Document_model->addBulkDocuments($contract_documents);
        }
        $contract_documents = array();
        if(isset($data['links']))
            foreach($data['links'] as $k => $v){
                $contract_documents[$k]['module_id'] = $customer_id;
                $contract_documents[$k]['module_type'] = 'customer';
                $contract_documents[$k]['reference_id'] = $id_contract;
                $contract_documents[$k]['reference_type'] = 'contract';
                $contract_documents[$k]['document_name'] = $v['title'];
                $contract_documents[$k]['document_type'] = 1;
                $contract_documents[$k]['document_source'] = $v['url'];
                $contract_documents[$k]['document_mime_type'] = 'URL';
                $contract_documents[$k]['uploaded_by'] = $this->session_user_id;
                $contract_documents[$k]['uploaded_on'] = currentDate();
                $contract_documents[$k]['updated_on'] = currentDate();
            }
        if(count($contract_documents)>0){
            $this->Document_model->addBulkDocuments($contract_documents);
        }
        $result = $this->User_model->getUserInfo(array('user_id' => $data['created_by']));
        $user_info = $this->User_model->getUserInfo(array('user_id' => $data['contract_owner_id']));
        $contract_assigned_to_user_names=$user_info->first_name.' '.$user_info->last_name.' ('.$user_info->user_role_name.')';
        if(isset($data['delegate_id']) && $data['delegate_id']!=NULL && $data['delegate_id']>0) {
            $assigned = $this->User_model->getUserInfo(array('user_id' => $add['delegate_id']));
            $contract_assigned_to_user_names.=', '.$assigned->first_name.' '.$assigned->last_name.' ('.$assigned->user_role_name.')';
        }
        $customer_details = $this->Customer_model->getCustomer(array('id_customer' => $result->customer_id));

        if($customer_details[0]['company_logo']=='') {
            $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'company');
        }
        else{
            $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'profile', SMALL_IMAGE);

        }
        if(!empty($customer_details)){ $customer_name = $customer_details[0]['company_name']; }

        $customer_admin_list=$this->Customer_model->getCustomerAdminList(array('customer_id'=>$user_info->customer_id,'user_status'=>1));

        //echo '<pre>';print_r($assigned);exit;
        $template_configurations=$this->Customer_model->EmailTemplateList(array('customer_id' => $user_info->customer_id,'module_key'=>'CONTRACT_CREATION'));
        /*$cust_admin = $this->Customer_model->getCustomerAdminList(array('customer_id' => $customer_details[0]['id_customer']));
        $cust_admin = $cust_admin['data'][0];*/
        // echo '<pre>';print_r($template_configurations);exit;
        $template_configurations_parent=$template_configurations;
        if($template_configurations_parent['total_records']>0){
            foreach($customer_admin_list['data'] as $kd=>$vd){
                $mailer_data=array();
                $template_configurations=$template_configurations_parent['data'][0];
                $wildcards=$template_configurations['wildcards'];
                $wildcards_replaces=array();
                $wildcards_replaces['first_name']=$vd['first_name'];
                $wildcards_replaces['last_name']=$vd['last_name'];
                $wildcards_replaces['contract_name']=$data['contract_name'];
                $wildcards_replaces['contract_owner_name']=$result->first_name.' '.$result->last_name;
                $wildcards_replaces['contract_created_date']=dateFormat($add['created_on']);
                $wildcards_replaces['contract_assigned_to_user_names']=$contract_assigned_to_user_names;
                $wildcards_replaces['logo']=$customer_logo;
                $wildcards_replaces['year'] = date("Y");
                $wildcards_replaces['url']=WEB_BASE_URL.'html';
                $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                /*$from_name=SEND_GRID_FROM_NAME;
                $from=SEND_GRID_FROM_EMAIL;
                $from_name=$cust_admin['name'];
                $from=$cust_admin['email'];*/
                $from_name=$template_configurations['email_from_name'];
                $from=$template_configurations['email_from'];
                $to=$vd['email'];
                $to_name=$vd['first_name'].' '.$vd['last_name'];
                $mailer_data['mail_from_name']=$from_name;
                $mailer_data['mail_to_name']=$to_name;
                $mailer_data['mail_to_user_id']=$vd['id_user'];
                $mailer_data['mail_from']=$from;
                $mailer_data['mail_to']=$to;
                $mailer_data['mail_subject']=$subject;
                $mailer_data['mail_message']=$body;
                $mailer_data['status']=0;
                $mailer_data['send_date']=currentDate();
                $mailer_data['is_cron']=0;
                $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                $mailer_id=$this->Customer_model->addMailer($mailer_data);
                if($mailer_data['is_cron']==0) {
                    //$mail_sent_status=sendmail($to, $subject, $body, $from);
                    $this->load->library('sendgridlibrary');
                    $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                    if($mail_sent_status==1)
                        $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                }
            }
            $mailer_data=array();
            $template_configurations=$template_configurations_parent['data'][0];
            $wildcards=$template_configurations['wildcards'];
            $wildcards_replaces=array();
            $wildcards_replaces['first_name']=$user_info->first_name;
            $wildcards_replaces['last_name']=$user_info->last_name;
            $wildcards_replaces['contract_name']=$data['contract_name'];
            $wildcards_replaces['contract_owner_name']=$result->first_name.' '.$result->last_name;
            $wildcards_replaces['contract_created_date']=dateFormat($add['created_on']);
            $wildcards_replaces['contract_assigned_to_user_names']=$contract_assigned_to_user_names;
            $wildcards_replaces['logo']=$customer_logo;
            $wildcards_replaces['year'] = date("Y");
            $wildcards_replaces['url']=WEB_BASE_URL.'html';
            $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
            $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
            /*$from_name=SEND_GRID_FROM_NAME;
            $from=SEND_GRID_FROM_EMAIL;
            $from_name=$cust_admin['name'];
            $from=$cust_admin['email'];*/
            $from_name=$template_configurations['email_from_name'];
            $from=$template_configurations['email_from'];
            $to=$user_info->email;
            $to_name=$user_info->first_name.' '.$user_info->last_name;
            $mailer_data['mail_from_name']=$from_name;
            $mailer_data['mail_to_name']=$to_name;
            $mailer_data['mail_to_user_id']=$user_info->id_user;
            $mailer_data['mail_from']=$from;
            $mailer_data['mail_to']=$to;
            $mailer_data['mail_subject']=$subject;
            $mailer_data['mail_message']=$body;
            $mailer_data['status']=0;
            $mailer_data['send_date']=currentDate();
            $mailer_data['is_cron']=0;
            $mailer_data['email_template_id']=$template_configurations['id_email_template'];
            $mailer_id=$this->Customer_model->addMailer($mailer_data);
            if($mailer_data['is_cron']==0) {
                //$mail_sent_status=sendmail($to, $subject, $body, $from);
                $this->load->library('sendgridlibrary');
                $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                if($mail_sent_status==1)
                    $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
            }

            $assigned = $this->User_model->getUserInfo(array('user_id' => $add['delegate_id']));
            if(isset($data['delegate_id']) && $data['delegate_id']!=NULL && $data['delegate_id']>0 && !empty($assigned)){
                //$delegate = $this->User_model->getUserInfo(array('user_id'=>$data['delegate_id']));
                //echo '<pre>';print_r($delegate);exit;
                //echo '<pre>';print_r($assigned);exit;
                $mailer_data=array();
                $template_configurations=$template_configurations_parent['data'][0];
                $wildcards=$template_configurations['wildcards'];
                $wildcards_replaces=array();
                $wildcards_replaces['first_name']=$assigned->first_name;
                $wildcards_replaces['last_name']=$assigned->last_name;
                $wildcards_replaces['contract_name']=$data['contract_name'];
                $wildcards_replaces['contract_owner_name']=$result->first_name.' '.$result->last_name;
                $wildcards_replaces['contract_created_date']=dateFormat($add['created_on']);
                $wildcards_replaces['contract_assigned_to_user_names']=$contract_assigned_to_user_names;
                $wildcards_replaces['logo']=$customer_logo;
                $wildcards_replaces['year'] = date("Y");
                $wildcards_replaces['url']=WEB_BASE_URL.'html';
                $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                /*$from_name=SEND_GRID_FROM_NAME;
                $from=SEND_GRID_FROM_EMAIL;
                $from_name=$cust_admin['name'];
                $from=$cust_admin['email'];*/
                $from_name=$template_configurations['email_from_name'];
                $from=$template_configurations['email_from'];
                $to = $assigned->email;
                $to_name=$assigned->first_name.' '.$assigned->last_name;
                $mailer_data['mail_from_name']=$from_name;
                $mailer_data['mail_to_name']=$to_name;
                $mailer_data['mail_to_user_id']=$assigned->id_user;
                $mailer_data['mail_from']=$from;
                $mailer_data['mail_to']=$to;
                $mailer_data['mail_subject']=$subject;
                $mailer_data['mail_message']=$body;
                $mailer_data['status']=0;
                $mailer_data['send_date']=currentDate();
                $mailer_data['is_cron']=0;
                $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                $mailer_id=$this->Customer_model->addMailer($mailer_data);
                if($mailer_data['is_cron']==0){
                    //$mail_sent_status=sendmail($to_delegate, $subject, $body, $from);
                    $this->load->library('sendgridlibrary');
                    $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                    if($mail_sent_status==1)
                        $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                }

            }
        }
        if(isset($data['id_document_intelligence']) &&($data['id_document_intelligence'] >0))
        {
            $this->User_model->update_data('document_intelligence',array('contract_id'=>$id_contract,'updated_by' => $data['created_by'],'updated_on' => currentDate(),'create_status'=>'P','create_update_on'=>currentDate()),array('id_document_intelligence'=>$data['id_document_intelligence']));
        }
        if(isset($data['parent_contract_id'])){
            $result = array('status'=>TRUE, 'message' => $this->lang->line('contract_add'), 'data'=>'', 'contract_data'=>array('contract_name'=>$data['contract_name'],'contract_id'=>pk_encrypt($id_contract)));
        }else{
            $result = array('status'=>TRUE, 'message' => $this->lang->line('contract_add'), 'data'=>'','contract_id'=>pk_encrypt($id_contract));
        }
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function update_post()
    {
        $data = $this->input->post();
        if(isset($data['contract'])){
            $data = $data['contract'];
        }
        if($data['currency_id']=='null'){
            unset($data['currency_id']);
        }
        if(isset($_FILES['file']))
            $totalFilesCount = count($_FILES['file']['name']);
        else
            $totalFilesCount=0;
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        // print_r($data['currency_id']);exit;
        // $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $this->form_validator->add_rules('id_contract', array('required'=>$this->lang->line('id_contract_req')));
        $this->form_validator->add_rules('business_unit_id', array('required'=>$this->lang->line('business_unit_id_req')));
        $this->form_validator->add_rules('contract_name', array('required'=>$this->lang->line('contract_name_req')));
        $this->form_validator->add_rules('contract_owner_id', array('required'=>$this->lang->line('contract_owner_id_req')));
        //$this->form_validator->add_rules('delegate_id', array('required'=>$this->lang->line('contract_delegate_id_req')));
        $this->form_validator->add_rules('description', array('required'=>$this->lang->line('contract_description_req')));
        $this->form_validator->add_rules('contract_start_date', array(
            'required'=>$this->lang->line('contract_start_date_req'),
            'date' => $this->lang->line('contract_start_date_invalid')
        ));
        // $this->form_validator->add_rules('contract_end_date', array(
        //     'required'=>$this->lang->line('contract_end_date_req'),
        //     'date' => $this->lang->line('contract_end_date_invalid')
        // ));
        $this->form_validator->add_rules('relationship_category_id', array('required'=>$this->lang->line('relationship_category_id_req')));
        // $this->form_validator->add_rules('classification_id', array('required'=>$this->lang->line('relationship_classification_id_req')));
        $this->form_validator->add_rules('contract_value', array('required'=>$this->lang->line('contract_value_req')));
        $this->form_validator->add_rules('created_by', array('required'=>$this->lang->line('created_by_req')));
        $this->form_validator->add_rules('currency_id', array('required'=>$this->lang->line('currency_id_req')));
        $this->form_validator->add_rules('contract_active_status', array('required'=>$this->lang->line('contract__active_status_required')));

        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        // if(isset($data['customer_id'])) {
        //     $data['customer_id'] = pk_decrypt($data['customer_id']);
        //     if($data['customer_id']!=$this->session_user_info->customer_id){
        //         $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'1');
        //         $this->response($result, REST_Controller::HTTP_OK);
        //     }
        // }
        if(isset($data['id_contract'])) {
            $data['id_contract'] = pk_decrypt($data['id_contract']);
            if(!in_array($data['id_contract'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['business_unit_id']) && strtolower($data['business_unit_id'])!='all') {
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            if(!in_array($data['business_unit_id'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'3');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_owner_id'])) {
            $data['contract_owner_id'] = pk_decrypt($data['contract_owner_id']);
            if(!in_array($data['contract_owner_id'],$this->session_user_customer_all_users)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'4');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['relationship_category_id'])) {
            $data['relationship_category_id'] = pk_decrypt($data['relationship_category_id']);
            if(!in_array($data['relationship_category_id'],$this->session_user_customer_relationship_categories)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'5');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        //Geting Contract info by contract id
        $contract_rc_type = $this->User_model->check_record('contract',array('id_contract'=>$data['id_contract']));
        
        //Geting Relationship_category info by its id
        $relationship_category_type = $this->User_model->check_record('relationship_category',array('id_relationship_category'=>$data['relationship_category_id']));
        if(isset($relationship_category_type[0]['can_review']))
            $data['can_review'] = $relationship_category_type[0]['can_review'];   
        //Comparing whether relaionship category downgrading, otherwise continue the process.
        if(isset($relationship_category_type[0]['can_review']) && (int)$contract_rc_type[0]['can_review'] == 1 && (int)$relationship_category_type[0]['can_review'] == 0)
            $this->response(array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('relationship_category_cannot_downgrade')), 'data'=>''), REST_Controller::HTTP_OK);
                    
        if(isset($data['classification_id'])) {
            $data['classification_id'] = pk_decrypt($data['classification_id']);
            // if(!in_array($data['classification_id'],$this->session_user_customer_relationship_classifications)){
            //     $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'6');
            //     $this->response($result, REST_Controller::HTTP_OK);
            // }
        }
        if(!empty($data['currency_id'])) {
            $data['currency_id'] = pk_decrypt($data['currency_id']);
            if(!in_array($data['currency_id'],$this->session_user_master_currency)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'7');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['created_by'])) {
            $data['created_by'] = pk_decrypt($data['created_by']);
            // if($data['created_by']!=$this->session_user_id && $this->session_user_info->user_role_id != 2){
            //     $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'8');
            //     $this->response($result, REST_Controller::HTTP_OK);
            // }
        }
        if(isset($data['updated_by'])) {
            $data['updated_by'] = pk_decrypt($data['updated_by']);
            // if($data['updated_by']!=$this->session_user_id && $this->session_user_info->user_role_id != 2){
            //     $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'9');
            //     $this->response($result, REST_Controller::HTTP_OK);
            // }
        }
        //not considering updated_by key from frontend using logged in user id
        $data['updated_by'] = $this->session_user_id;
        if(isset($data['delegate_id'])) {
            $data['delegate_id'] = pk_decrypt($data['delegate_id']);
            if($data['delegate_id'] > 0 && !in_array($data['delegate_id'],$this->session_user_delegates)){
                $result = array('status'=>FALSE, 'error' =>array('message9'=>$this->lang->line('permission_not_allowed')), 'data'=>'10');
                //$this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['parent_contract_id'])) {
            $data['parent_contract_id'] = pk_decrypt($data['parent_contract_id']);
        }
        if(isset($data['provider_name'])) {
            $data['provider_name'] = pk_decrypt($data['provider_name']);
        }
        if(isset($data['template_id']))
        {
            $data['template_id']=pk_decrypt($data['template_id']);
        }
        if(isset($data['id_document_intelligence']))
        {
            $data['id_document_intelligence']=pk_decrypt($data['id_document_intelligence']);
        }
        //echo '<pre>'.print_r($data);exit;
        $contract_info = $this->User_model->check_record_selected(array('contract_end_date','is_template_lock'),'contract',array('id_contract'=>$data['id_contract']));
        if(isset($data['is_template_lock']) &&( $data['is_template_lock'] ==1|| $data['is_template_lock']==0))
        {
            if(($data['is_template_lock'] !=$contract_info[0]['is_template_lock'])&&($this->session_user_info->user_role_id!=2))
            {
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('template_should_be_locked_or_unlocked_by_customer_admin_only'), 'data'=>''));
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        //If Contract Date is Preponed that exixting End date 
        //Then all the spent lines are deactivation here.
        if(round((strtotime($contract_info[0]['contract_end_date']) - strtotime($data['contract_end_date']))/ (60 * 60 * 24))>0)
            $this->User_model->update_data('spent_lines',array('status'=>0,'updated_by' => $data['updated_by'],'updated_on' => currentDate()),array('contract_id'=>$data['id_contract']));

        $add = array(
            'can_review' => $data['can_review'],
            'id_contract' => $data['id_contract'],
            'business_unit_id' => $data['business_unit_id'],
            'template_id'=>$data['template_id'],
            'provider_name' => isset($data['provider_name'])?$data['provider_name']:0,
            'contract_name' => $data['contract_name'],
            'contract_owner_id' => $data['contract_owner_id'],
            'contract_start_date' => $data['contract_start_date'],
            'contract_end_date' => !empty($data['contract_end_date'])?$data['contract_end_date']:null,
            'auto_renewal' => isset($data['auto_renewal'])?$data['auto_renewal']:'0',
            'relationship_category_id' => $data['relationship_category_id'],
            'classification_id' => $data['classification_id'],
            'contract_value' => $data['contract_value'],
            'currency_id' => $data['currency_id'],
            'delegate_id' => isset($data['delegate_id'])?(int)$data['delegate_id']:null,
            'description' => isset($data['description'])?$data['description']:'',
            'updated_by' => $this->session_user_id,
            'updated_on' => currentDate(),
            'parent_contract_id' => isset($data['parent_contract_id'])?$data['parent_contract_id']:0,
            'is_template_lock'=>$data['is_template_lock'],
            'contract_active_status'=>$data['contract_active_status'],
        );
        /*
        updating in calender plan on changing BU
            //Checking for contract review planning
            $check_review_schedule = $this->Contract_model->check_contract_in_calender(
                array(
                    'contract_id' => $data['id_contract'],
                    'business_unit_id' => $data['business_unit_id'],
                    'days' => $reminder_days[0]['days'],
                    'is_workflow' => 0
                ));
            //If a plan exists then we will lock the contract
            if(count($check_review_schedule) > 0){
                //$this->User_model->update_data('contract',array('is_lock'=>1),array('id_contract'=>$id_contract));
                $add['is_lock']=1;
            }
            //Removing the contract from the planning if it is planned by selecting
            foreach($check_review_schedule as $ck1 => $cv1){
                $cv1['contract_id'] = explode(',',$cv1['contract_id']);
                foreach($cv1['contract_id'] as $ck2 => $cv2){
                    if($cv2 == $data['id_contract']){
                        unset($cv1['contract_id'][$ck2]);
                        $this->User_model->update_data('calender',array('contract_id'=>implode($cv1['contract_id'],',')),array('id_calender'=>$cv1['id_calender']));
                    }
                }
            }

        */
        
        $this->contract_change_log($data);
        //echo '<pre>'.print_r($data['links']);exit;
        $this->Contract_model->updateContract($add);
        //echo $this->db->last_query();exit;
        if(isset($data['contract_tags']) && count($data['contract_tags'])>0){
            $tag_data = array();
            foreach($data['contract_tags'] as $k => $v){
                $check_tags_exists = $this->User_model->check_record('contract_tags',array('contract_id'=>$data['id_contract'],'tag_id'=>pk_decrypt($v['tag_id'])));
                //echo '<pre>'.$this->db->last_query();exit;
                $tag_data[$k]['tag_id'] = (int)pk_decrypt($v['tag_id']);
                $tag_data[$k]['contract_id'] = (int)$data['id_contract'];
                // $tag_data[$k]['status'] = 1;
                if(count($check_tags_exists)>0){
                    $tag_data[$k]['updated_by'] = $data['updated_by'];
                    $tag_data[$k]['updated_on'] = currentDate();
                }
                else{
                    $tag_data[$k]['created_by'] = $data['updated_by'];
                    $tag_data[$k]['created_on'] = currentDate();
                }
                if($v['tag_type']=='input' || $v['tag_type']=='date')
                    $tag_data[$k]['tag_option_value'] = $v['tag_option'];
                else{
                    $tag_data[$k]['tag_option'] = (int)pk_decrypt($v['tag_option']);
                    $tag_option_value = $this->User_model->check_record('tag_option_language',array('tag_option_id'=>$tag_data[$k]['tag_option']));
                    
                    if(isset($tag_option_value[0]) || isset($v['tag_option_name']))
                        $tag_data[$k]['tag_option_value'] = isset($v['tag_option_name'])?$v['tag_option_name']:$tag_option_value[0]['tag_option_name'];
                    else
                        $tag_data[$k]['tag_option_value'] = null;
                }
                //echo '<pre>'.print_r($tag_data[$k]);
                if(count($check_tags_exists)>0)
                    $this->User_model->update_data('contract_tags',$tag_data[$k],array('tag_id'=>pk_decrypt($v['tag_id']),'contract_id'=>$data['id_contract']));
                else    
                    $this->User_model->insert_data('contract_tags',$tag_data[$k]);
                //echo '<pre>'.$this->db->last_query();exit;
            }//echo '<pre>'.print_r($tag_data);exit;
            //echo '<pre>'.$this->db->last_query();exit;
        }
        
        //echo '<pre>'.print_r($data['links']);exit;
        

        $customer_id=$this->session_user_info->customer_id;
        $path=FILE_SYSTEM_PATH.'uploads/';

        $contract_documents=array();
        if(!is_dir($path.$customer_id)){ mkdir($path.$customer_id); }
        if(isset($_FILES) && $totalFilesCount>0)
        {
            for($i_attachment=0; $i_attachment<$totalFilesCount; $i_attachment++) {
                $imageName = doUpload(array(
                    'temp_name' => $_FILES['file']['tmp_name'][$i_attachment],
                    'image' => $_FILES['file']['name'][$i_attachment],
                    'upload_path' => $path,
                    'folder' => $customer_id));
                $contract_documents[$i_attachment]['module_id']=$customer_id;
                $contract_documents[$i_attachment]['module_type']='customer';
                $contract_documents[$i_attachment]['reference_id']=$data['id_contract'];
                $contract_documents[$i_attachment]['reference_type']='contract';
                $contract_documents[$i_attachment]['document_name']=$_FILES['file']['name'][$i_attachment];
                $contract_documents[$i_attachment]['document_type']=0;
                $contract_documents[$i_attachment]['document_source']=$imageName;
                $contract_documents[$i_attachment]['document_mime_type']=$_FILES['file']['type'][$i_attachment];
                $contract_documents[$i_attachment]['document_status']=1;
                $contract_documents[$i_attachment]['uploaded_by']=$data['created_by'];
                $contract_documents[$i_attachment]['uploaded_on']=currentDate();
            }
        }

        if(count($contract_documents)>0){
            $this->Document_model->addBulkDocuments($contract_documents);
        }

        $contract_documents = array();
        if(isset($data['links']))
        foreach($data['links'] as $k => $v){
            $contract_documents[$k]['module_id'] = $customer_id;
            $contract_documents[$k]['module_type'] = 'customer';
            $contract_documents[$k]['reference_id'] = $data['id_contract'];
            $contract_documents[$k]['reference_type'] = 'contract';
            $contract_documents[$k]['document_name'] = $v['title'];
            $contract_documents[$k]['document_type'] = 1;
            $contract_documents[$k]['document_source'] = $v['url'];
            $contract_documents[$k]['document_mime_type'] = 'URL';
            $contract_documents[$k]['uploaded_by'] = $data['uploaded_by'];
            $contract_documents[$k]['uploaded_on'] = currentDate();
            $contract_documents[$k]['updated_on'] = currentDate();
        }
        if(count($contract_documents)>0){
            $this->Document_model->addBulkDocuments($contract_documents);
        }
        
        if(isset($data['attachment_delete'])) { //for deleted options
            for ($s = 0; $s < count($data['attachment_delete']); $s++) {
                $data['attachment_delete'][$s]['id_document']=pk_decrypt($data['attachment_delete'][$s]['id_document']);
                $this->Document_model->updateDocument(array(
                    'id_document' => $data['attachment_delete'][$s]['id_document'],
                    'document_status' => 0
                ));
            }
        }
        if(isset($data['id_document_intelligence']) &&($data['id_document_intelligence'] >0))
        {
            $this->User_model->update_data('document_intelligence',array('contract_id'=>$data['id_contract'],'updated_by' => $data['created_by'],'updated_on' => currentDate(),'create_status'=>'P','create_update_on'=>currentDate()),array('id_document_intelligence'=>$data['id_document_intelligence']));
        }

        $result = array('status'=>TRUE, 'message' => $this->lang->line('contract_update'), 'data'=>'');
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function contractTags_get(){
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $this->form_validator->add_rules('id_contract', array('required'=>$this->lang->line('contract_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(count($this->session_user_info)==0)
        {
            $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'1');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        if(isset($data['id_contract'])) {
            $contract_id = $data['id_contract'] = pk_decrypt($data['id_contract']);
            if($this->session_user_info->user_role_id!=7)
            if(!in_array($data['id_contract'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_id'])) {
            $contract_id = $data['contract_id'] = pk_decrypt($data['contract_id']);
            if($this->session_user_info->user_role_id != 7)
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'3');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        //$active
        $master_tags = $this->Tag_model->TagList(array('customer_id'=>$this->session_user_info->customer_id,'status'=>1,'tag_type'=>$data['tag_type']));
        $tag_data = $this->Tag_model->getCntTags(array('contract_id'=>$contract_id));

        
        foreach($master_tags as $k => $v){
            $tag_result[$k]['tag_text'] = $v['tag_text'];
            $tag_result[$k]['tag_type'] = $v['tag_type'];
            $tag_result[$k]['field_type'] = $v['field_type'];
            $tag_result[$k]['tag_option'] = 0;
            $tag_result[$k]['tag_answer'] = '';
            $tag_result[$k]['id_contract_tag'] = 0;
            $tag_result[$k]['business_unit_id'] = pk_encrypt($v['business_unit_id']);
            $tag_result[$k]['business_unit_status'] = $v['business_unit_status'];
            $tag_result[$k]['bu_name'] = $v['bu_name'];
            $tag_result[$k]['selected_field'] = $v['selected_field'];
            $tag_result[$k]['multi_select'] = $v['multi_select'];
            $tag_result[$k]['options'] = $this->Tag_model->getContractTagoptions(array('tag_id'=>$v['id_tag']));
           
            // echo $tag_data[$k]['id_tag'].' == '.$v['id_tag'].'<br>';
            if(isset($tag_data[$k]) && $tag_data[$k]['id_tag'] == $v['id_tag']){
                //If contract tag exists
                $tag_result[$k]['id_contract_tag'] = pk_encrypt($tag_data[$k]['id_contract_tag']);
                if((int)$v['multi_select'] == 1)
                {
                    if((int)$tag_data[$k]['tag_option'] == 0){
                        //If contract tag is of date or input type
                        $tag_result[$k]['tag_option'] = $tag_data[$k]['tag_option'];
                        $tag_result[$k]['tag_answer'] = !is_null($tag_data[$k]['tag_answer'])?$tag_data[$k]['tag_answer']:'';
                    }
                    else{
                        $tag_option = [];
                        $tag_option = explode(",",$tag_data[$k]['tag_option']) ; 
                        $tag_result[$k]['tag_option'] = [];
                        $tag_result[$k]['tag_answer'] = [];
                        $tag_result[$k]['selectedOption'] = [];
                        if($v['tag_type'] == "selected")
                        {
                            $SelectTag =array('module' => $v['selected_field'] , 'ids' =>$tag_option , 'clickable' => True ,'userroleId' => $this->session_user_info->user_role_id , 'userId' => $this->session_user_id);
                            // if($this->session_user_info->user_role_id == 6)
                            // {
                            //     $SelectTag['logged_in_bu_ids'] = $this->session_user_business_units; 
                            // }
                            $selectedOption = $this->Tag_model->getSelectName($SelectTag);
                            foreach($selectedOption as $selectedOptionkey =>$selectedOptionValue)
                            {
                                $selectedOption[$selectedOptionkey]['id'] = pk_encrypt($selectedOption[$selectedOptionkey]['id']);
                            }
                            $tag_result[$k]['selectedOption'] = $selectedOption;
                        }
                        $tagAnswerDisplayarray = [];
                        $tagAnswerDisplay = '';
                        foreach($tag_option as $optionDetails)
                        {
                            if($v['tag_type'] == "dropdown")
                            {
                                $key = array_search($optionDetails, array_column($tag_result[$k]['options'], 'id_tag_option'));
                                $tagAnswerDisplayarray[] = $tag_result[$k]['options'][$key]['tag_option_name'];
                            }
                            $tag_result[$k]['tag_option'][] = pk_encrypt($optionDetails);
                            $tag_result[$k]['tag_answer'][] = pk_encrypt($optionDetails);
                        }    
                        $tagAnswerDisplay = implode(",",$tagAnswerDisplayarray);  
                        $tag_result[$k]['tagAnswerDisplay'] = $tagAnswerDisplay;       
                    }
                }
                else
                {
                    if((int)$tag_data[$k]['tag_option'] == 0){
                        //If contract tag is of date or input type
                        $tag_result[$k]['tag_option'] = $tag_data[$k]['tag_option'];
                        //$tag_result[$k]['tag_answer'] = !empty($tag_data[$k]['tag_answer'])?$tag_data[$k]['tag_answer']:'';
                        $tag_result[$k]['tag_answer'] = !is_null($tag_data[$k]['tag_answer'])?$tag_data[$k]['tag_answer']:'';
                        $tag_result[$k]['tagAnswerDisplay'] = !is_null($tag_data[$k]['tag_answer'])?$tag_data[$k]['tag_answer']:'';
                    }
                    else{
                        $tag_result[$k]['tag_option'] = pk_encrypt($tag_data[$k]['tag_option']);
                        $tag_result[$k]['tag_answer'] = pk_encrypt($tag_data[$k]['tag_answer']);
                        if($v['tag_type'] == "dropdown" || $v['tag_type'] == "radio" ||$v['tag_type'] == "rag")
                        {
                            $key = array_search($tag_data[$k]['tag_option'], array_column($tag_result[$k]['options'], 'id_tag_option'));
                            $tag_result[$k]['tagAnswerDisplay'] = $tag_result[$k]['options'][$key]['tag_option_name'];
                            
                        }
                        elseif($v['tag_type'] == "input" || $v['tag_type'] == "date")
                        {
                            $tag_result[$k]['tagAnswerDisplay'] = !is_null($tag_data[$k]['tag_answer'])?$tag_data[$k]['tag_answer']:'';  
                        }
                        elseif($v['tag_type'] == "selected")
                        {
                            $SelectTag =array('module' => $v['selected_field'] , 'ids' =>explode(",",$tag_data[$k]['tag_option']) , 'clickable' => True ,'userroleId' => $this->session_user_info->user_role_id , 'userId' => $this->session_user_id);
                            // if($this->session_user_info->user_role_id == 6)
                            // {
                            //     $SelectTag['logged_in_bu_ids'] = $this->session_user_business_units; 
                            // }
                            $selectedOption = $this->Tag_model->getSelectName($SelectTag);
                            foreach($selectedOption as $selectedOptionkey =>$selectedOptionValue)
                            {
                                $selectedOption[$selectedOptionkey]['id'] = pk_encrypt($selectedOption[$selectedOptionkey]['id']);
                            }
                            $tag_result[$k]['selectedOption'] = $selectedOption;
                        }
                    }
                }
                if($v['tag_type'] == "rag")
                {

                    $tag_result[$k]['comments'] = $tag_data[$k]['comments'];
                }
               
            }
            foreach($tag_result[$k]['options'] as $k1 => $v1)
            {
                $tag_result[$k]['options'][$k1]['id_tag_option'] = pk_encrypt($v1['id_tag_option']);
            }
            
            $tag_result[$k]['tag_id'] = pk_encrypt($v['id_tag']);
            $tag_result[$k]['tag_order'] =$v['tag_order'];
        }
        $new_result = array();
        usort($tag_result, function ($item1, $item2) {
            return $item1['tag_order'] <=> $item2['tag_order'];
        });

        //grouping tags with business unit

        $groupTag = [];
        $businessUnitArray = array_unique(array_column($tag_result, 'business_unit_id'));

        $i=0;
        foreach($businessUnitArray as $buK=>$buV)
        {
            $groupTag[$i] = array(
                'business_unit_id' => $buV,
                'tag_details' =>[],
                'count' => 0,
                'count_without_rag' => 0
            );
            $count_without_rag = 0;
            foreach($tag_result as $tagK => $tagV)
            {
                if($tagV['business_unit_id'] == $buV)
                {
                    $groupTag[$i]['tag_details'][]=$tag_result[$tagK];
                    $groupTag[$i]['bu_name']=$tag_result[$tagK]['bu_name'];
                    $groupTag[$i]['status']=$tag_result[$tagK]['business_unit_status'];

                    if($tag_result[$tagK]['tag_type'] != 'rag')
                    {
                        $count_without_rag++;
                    }
                }
            }

            $groupTag[$i]['count'] = count($groupTag[$i]['tag_details']);
            $groupTag[$i]['count_without_rag'] = $count_without_rag;
            $i++;
        }
      
        $columns = array_column($groupTag, 'bu_name');
        array_multisort($columns, SORT_ASC, $groupTag);
        $result = array('status'=>TRUE, 'message'=>$this->lang->line('success'), 'data'=>$groupTag,'test'=>'');
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function contractTagsUpdate_post(){
        $data = $this->input->post();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('id_contract', array('required'=>$this->lang->line('id_contract_req')));
        $this->form_validator->add_rules('contract_tags', array('required'=>$this->lang->line('tag_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['id_contract'])) {
             $data['id_contract'] = pk_decrypt($data['id_contract']);
        }
       
        $data['grouped_tags']=$data['contract_tags'];
        $data['updated_by']=$this->session_user_id;
        $this->contract_change_log($data);
        if(isset($data['grouped_tags']) && count($data['grouped_tags'])>0)
        {
            foreach($data['grouped_tags'] as $groupKey => $groupValue)
            {
                $data['contract_tags'] = $groupValue['tag_details'] ; 
                if(isset($data['contract_tags']) && count($data['contract_tags'])>0){
                    $tag_data = array();
                    foreach($data['contract_tags'] as $k => $v){
                        foreach($v['options'] as $k1 => $v1)
                        {
                            $data['contract_tags'][$k]['options'][$k1]['id_tag_option'] = pk_decrypt($v1['id_tag_option']);
                        } 
                        $data['contract_tags'][$k]['id_contract_tag'] = (int)pk_decrypt($v['id_contract_tag']);
                        $data['contract_tags'][$k]['tag_id'] = (int)pk_decrypt($v['tag_id']);
                        if($v['tag_type'] != 'selected')
                        {
                            if($v['tag_type'] == 'dropdown' && (int)$v['multi_select'] == 1 && (!empty($v['tag_answer'])))
                            {
                                if(!empty($v['tag_answer']))
                                {
                                    $tagAnswers = [];
                                    $tagOptionValue = [];
                                    foreach($data['contract_tags'][$k]['tag_answer'] as $multiDropKey => $multiDropValue)
                                    {
                                        foreach($data['contract_tags'][$k]['options'] as $option)
                                        {
                                            if($option['id_tag_option'] == (int)pk_decrypt($multiDropValue))
                                            {
                                                $tagOptionValue[] = $option['tag_option_name'];
                                            }
                                        }
                                        $tagAnswers[] = (int)pk_decrypt($multiDropValue);
                                    }
                                    $commaSepTagAnswers = "";
                                    $commaSepTagAnswersValue = "";
                                    if(count($tagAnswers) > 0)
                                    {
                                        $commaSepTagAnswers = implode("," , $tagAnswers);
                                    }
                                    if(count($tagOptionValue) > 0)
                                    {
                                        $commaSepTagAnswersValue = implode("," , $tagOptionValue);
                                    }
                                    $data['contract_tags'][$k]['tag_option'] = $commaSepTagAnswers;
                                    $data['contract_tags'][$k]['tag_option_value'] = $commaSepTagAnswersValue;

                                }
                                else
                                {
                                    $data['contract_tags'][$k]['tag_option'] = 0 ;
                                    $data['contract_tags'][$k]['tag_option_value'] = Null;
                                }
                            }
                            else
                            {
                                if((int)pk_decrypt($v['tag_option']) > 0){
                                    $data['contract_tags'][$k]['tag_option'] = (int)pk_decrypt($v['tag_option']);
                                    if($v['tag_type'] != 'input' && $v['tag_type'] != 'date')
                                        $data['contract_tags'][$k]['tag_answer'] = pk_decrypt($v['tag_answer']);
                                }else{
                                    $data['contract_tags'][$k]['tag_option'] = (int)pk_decrypt($v['tag_option']);
                                    if(!(int)pk_decrypt($v['id_contract_tag']) > 0){
                                        if($v['tag_type'] != 'input' && $v['tag_type'] != 'date')
                                            $data['contract_tags'][$k]['tag_answer'] = pk_decrypt($v['tag_answer']);
                                    }
                                }
                                  
                                if($v['tag_type'] == 'input' || $v['tag_type'] == 'date'){
                                    $data['contract_tags'][$k]['tag_option_value'] = $data['contract_tags'][$k]['tag_answer'];
                                }else{
                
                                    foreach($data['contract_tags'][$k]['options'] as $k2 => $v2){
                                        $data['contract_tags'][$k]['tag_option'] = null;
                                        $data['contract_tags'][$k]['tag_option_value'] = null;
                                        if(pk_decrypt($v['tag_answer']) == $v2['id_tag_option']){
                                            $data['contract_tags'][$k]['tag_option'] = $v2['id_tag_option'];
                                            $data['contract_tags'][$k]['tag_option_value'] = $v2['tag_option_name'];
                                            break;
                                        }
                                    }
                                }  

                            }
                            
                        }
                        elseif($v['tag_type'] == 'selected')
                        {
                            if(!empty($v['tag_answer']))
                            {
                                $v['tag_answer'] = ((int)$v['multi_select'] == 0) ? array($v['tag_answer']) : $v['tag_answer'];
                    
                                $tagAnswers = [];

                                foreach($v['tag_answer'] as $multiKey => $multiValue)
                                {
                                    $tagAnswers[] = (int)pk_decrypt($multiValue);
                                }
                                $commaSepTagAnswers ="";
                                if(count($tagAnswers) > 0)
                                {
                                    $commaSepTagAnswers = implode("," , $tagAnswers);
                                }
                                else
                                {
                                    $commaSepTagAnswers = 0;
                                }
                                $data['contract_tags'][$k]['tag_option'] = $commaSepTagAnswers;

                                $modalData = [
                                    'module' => $v['selected_field'],
                                    'ids' => $tagAnswers
                                ];
                                $tagOptionValue = $this->Tag_model->getNames($modalData);
                                $data['contract_tags'][$k]['tag_option_value'] = !empty($tagOptionValue) ? $tagOptionValue[0]['tag_option_value'] : '';
                            }
                            else
                            {
                                $data['contract_tags'][$k]['tag_option'] = 0 ;
                                $data['contract_tags'][$k]['tag_option_value'] = Null;
                            }
                        }
                        $tag_data = array(
                            'tag_option' => $data['contract_tags'][$k]['tag_option'],
                            'tag_option_value' => $data['contract_tags'][$k]['tag_option_value'],
                            'contract_id' => $data['id_contract'],
                            'tag_id' => $data['contract_tags'][$k]['tag_id'],
                            'comments' => $data['contract_tags'][$k]['comments']
                        );
                        if(isset($v['id_contract_tag']) && (int)pk_decrypt($v['id_contract_tag']) > 0){
                            //Update
                            $tag_data['updated_on'] = currentDate();
                            $tag_data['updated_by'] = $this->session_user_id;
                            $this->User_model->update_data('contract_tags',$tag_data,array('id_contract_tag'=>$data['contract_tags'][$k]['id_contract_tag']));
                        }else{
                            //Insert
                            $tag_data['created_on'] = currentDate();
                            $tag_data['created_by'] = $this->session_user_id;
                            $this->User_model->insert_data('contract_tags',$tag_data);
                        }
                    }
                     
                }
            }
            $result = array('status'=>TRUE, 'message' => $this->lang->line('contract_tags_update'), 'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);   
        }
        
        // if(isset($data['contract_tags']) && count($data['contract_tags'])>0){
        //     $tag_data = array();
        //     foreach($data['contract_tags'] as $k => $v){
        //         foreach($v['options'] as $k1 => $v1)
        //             $data['contract_tags'][$k]['options'][$k1]['id_tag_option'] = pk_decrypt($v1['id_tag_option']);
        //         $data['contract_tags'][$k]['id_contract_tag'] = (int)pk_decrypt($v['id_contract_tag']);
        //         $data['contract_tags'][$k]['tag_id'] = (int)pk_decrypt($v['tag_id']);
        //         //echo 'Index: '.$k;print_r($data['contract_tags'][$k]);
        //         if((int)pk_decrypt($v['tag_option']) > 0){
        //             $data['contract_tags'][$k]['tag_option'] = (int)pk_decrypt($v['tag_option']);
        //             if($v['tag_type'] != 'input' && $v['tag_type'] != 'date')
        //                 $data['contract_tags'][$k]['tag_answer'] = pk_decrypt($v['tag_answer']);
        //         }else{
        //             $data['contract_tags'][$k]['tag_option'] = (int)pk_decrypt($v['tag_option']);
        //             if(!(int)pk_decrypt($v['id_contract_tag']) > 0){
        //                 if($v['tag_type'] != 'input' && $v['tag_type'] != 'date')
        //                     $data['contract_tags'][$k]['tag_answer'] = pk_decrypt($v['tag_answer']);
        //             }
        //         }//print_r($data['contract_tags'][$k]);
        //         if($v['tag_type'] == 'input' || $v['tag_type'] == 'date'){
        //             $data['contract_tags'][$k]['tag_option_value'] = $data['contract_tags'][$k]['tag_answer'];
        //         }else{

        //             foreach($data['contract_tags'][$k]['options'] as $k2 => $v2){
        //                 $data['contract_tags'][$k]['tag_option'] = null;
        //                 $data['contract_tags'][$k]['tag_option_value'] = null;
        //                 if(pk_decrypt($v['tag_answer']) == $v2['id_tag_option']){
        //                     $data['contract_tags'][$k]['tag_option'] = $v2['id_tag_option'];
        //                     $data['contract_tags'][$k]['tag_option_value'] = $v2['tag_option_name'];
        //                     break;
        //                 }
        //             }
        //         }                
            
        //         $tag_data = array(
        //             'tag_option' => $data['contract_tags'][$k]['tag_option'],
        //             'tag_option_value' => $data['contract_tags'][$k]['tag_option_value'],
        //             'contract_id' => $data['id_contract'],
        //             'tag_id' => $data['contract_tags'][$k]['tag_id']
        //         );
        //         if(isset($v['id_contract_tag']) && (int)pk_decrypt($v['id_contract_tag']) > 0){
        //             //Update
        //             $tag_data['updated_on'] = currentDate();
        //             $tag_data['updated_by'] = $this->session_user_id;
        //             $this->User_model->update_data('contract_tags',$tag_data,array('id_contract_tag'=>$data['contract_tags'][$k]['id_contract_tag']));
        //         }else{
        //             //Insert
        //             $tag_data['created_on'] = currentDate();
        //             $tag_data['created_by'] = $this->session_user_id;
        //             $this->User_model->insert_data('contract_tags',$tag_data);
        //             // echo '<pre>';
        //             // echo $this->db->last_query();
        //             // echo '<br>';
        //         }
        //     }
        //     //echo '<pre>'.print_r($data);exit;
        //     $result = array('status'=>TRUE, 'message' => $this->lang->line('contract_tags_update'), 'data'=>'');
        //     $this->response($result, REST_Controller::HTTP_OK);    
        // }
        else{
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
             
    }


    public function info_get(){
        //custom_query
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $this->form_validator->add_rules('id_contract', array('required'=>$this->lang->line('contract_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(count($this->session_user_info)==0)
        {
            $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'1');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $get_tags=$this->User_model->check_record_selected('id_tag','tag',array('customer_id'=>$this->session_user_info->customer_id,'type'=>'contract_tags','status'=>1));
        if(isset($data['id_contract'])) {
            $contract_id = $data['id_contract'] = pk_decrypt($data['id_contract']);
            if($this->session_user_info->user_role_id!=7)
            if(!in_array($data['id_contract'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(!empty($data['contract_id'])) {
            $contract_id = $data['contract_id'] = pk_decrypt($data['contract_id']);
            if($this->session_user_info->user_role_id != 7)
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'3');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        // if(empty($data['id_contract'])){
        //     $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>array('obligations_count'=>'0','contract_information'=>'1/15','contract_spent_managment'=>'0/6','contract_stake_holder'=>'0/6','contract_tags'=>'0/'.count($get_tags),'contract_attachments'=>'0',
        //     //'contract_unique_id'=>'C0000675'
        // ));
        //     $this->response($result, REST_Controller::HTTP_OK);    
        // }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'4');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'5');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['business_unit_id'])) {
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            if(!in_array($data['business_unit_id'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'6');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_contract_workflow'])) {
            $data['id_contract_workflow'] = pk_decrypt($data['id_contract_workflow']);
        }
		if(isset($data['contract_review_id'])) {
            $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);            
        }
        /* checking the external user access  start*/
        if($this->session_user_info->user_role_id==7){
            $check_access=$this->User_model->check_record('contract_user',
            array(
                'contract_id'=>$data['contract_id'],
                'user_id'=>$this->session_user_info->id_user,
                'contract_review_id'=>$data['contract_review_id'],
                'status'=>1
            ));
            if(empty($check_access)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        /* checking the external user access  end*/

        if(isset($data['is_workflow']) && $data['is_workflow']==1){
            // if is workflow is 1 then considering the review id of type is_workflow = 1 and of perticular contract workflow id.
            $where = array('contract_id' =>$contract_id,'is_workflow'=>1,'contract_Workflow_id'=>$data['id_contract_workflow']);
        }else{
            $where = array('contract_id' =>$contract_id,'is_workflow'=>0);
        }
        $currentReviewId = $this->Contract_model->getCurrentContractReviewId($where);
        if(count($currentReviewId)>0){
            $data['id_contract_review'] = $currentReviewId[0]['id_contract_review'];
        }
        $result = $this->Contract_model->getContractDetails($data);
        if(!empty($result[0]['contract_budget_data'])){
            $result[0]['contract_budget_data']=json_decode($result[0]['contract_budget_data']);
        }
        for($s=0;$s<count($result);$s++)
        {

            $query = 'SELECT *FROM calender WHERE FIND_IN_SET("'.$result[$s]['id_contract'].'", contract_id) AND is_workflow=0 and status=1 and date>=CURRENT_DATE()';
            $check_review_inprogress=array();
            $review_exitst_incaledar=$this->User_model->custom_query($query);//echo $this->db->last_query();exit;
            $check_review_inprogress=$this->User_model->check_record('contract_review',array('contract_id'=>$result[$s]['id_contract'],'is_workflow'=>0,'contract_review_status'=>'review in progress'));
            if(!empty($review_exitst_incaledar) || !empty($check_review_inprogress)){
                $result[$s]['is_review_exists_incalendar']='1';
            }
            else{
                $result[$s]['is_review_exists_incalendar']='0';            
                if($result[$s]['can_review']==0){
                    $result[$s]['is_review_exists_incalendar']='1';            
                }
            }
            $result[$s]['review_scheduled'] = 0;
            if($result[$s]['parent_contract_id']>0){
                $result[$s]['parent_contract_name'] = $this->Contract_model->getContractName($result[$s]['parent_contract_id'])['contract_name'];
                $result[$s]['parent_contract_review_id'] = 0;
                $contract_review = $this->User_model->check_record('contract_review',array('contract_id'=>$result[$s]['parent_contract_id']));
                // echo '<pre>'.$this->db->last_query();exit;
                if(count($contract_review) > 0)
                    $result[$s]['parent_contract_review_id'] = pk_encrypt(array_reverse($contract_review)[0]['id_contract_review']);
            }
            // $check_review_schedule = $this->Contract_model->checkContractReviewSchedule(array('contract_id' => $result[$s]['id_contract']));
            // $check_review_schedule1 = $this->Contract_model->checkContractReviewCompletedSchedule(array('contract_id' => $result[$s]['id_contract']));
            $is_workflow = 0;
            $reminder_days = array();
            if($result[$s]['can_review'] == 1){
                //Getting reminder days of a contract category
                $reminder_days = $this->User_model->check_record('relationship_category_remainder',array('relationship_category_id'=>$result[$s]['relationship_category_id']));
            }
            if(count($reminder_days) == 0){
                $reminder_days[0]['days'] = 0;
            }
            if(isset($data['is_workflow']) && $data['is_workflow']==1 && isset($data['id_contract_workflow']) && $data['id_contract_workflow'] > 0){
                $check_review_schedule = $this->Contract_model->check_workflow_in_calender(
                                                                array(
                                                                    'id_contract_workflow' => $data['id_contract_workflow'],
                                                                    'days' => $reminder_days[0]['days']
                                                                ));//echo '<pre>'.$this->db->last_query();
            }else{
                $check_review_schedule = $this->Contract_model->check_contract_in_calender(
                                                                array(
                                                                    'contract_id' => $result[$s]['id_contract'],
                                                                    'business_unit_id' => $result[$s]['business_unit_id'],
                                                                    'relationship_category_id' => $result[$s]['relationship_category_id'],
                                                                    'provider_id' => $result[$s]['provider_name'],
                                                                    'days' => $reminder_days[0]['days'],
                                                                    'is_workflow' => $is_workflow
                                                                ));//echo '<pre>'.$this->db->last_query();
            }
            $check_review_schedule1 = $this->Contract_model->checkContractReviewCompletedSchedule(
                                                            array(
                                                                'contract_id' => $result[$s]['id_contract'],
                                                                'is_workflow' => $data['is_workflow']
                                                            ));//echo '<pre>'.$this->db->last_query();exit;
            if(!empty($check_review_schedule) && empty($check_review_schedule1)){
                $result[$s]['review_scheduled'] = 1;
            }
            $result[$s]['contract_start_date'] = date('Y-m-d',strtotime($result[$s]['contract_start_date']));
            if(strtotime($result[$s]['contract_end_date']) > 0)
                $result[$s]['contract_end_date'] = date('Y-m-d',strtotime($result[$s]['contract_end_date']));
            else
                $result[$s]['contract_end_date'] = '';
                
            $inner_data=array();
            if(isset($data['id_user']))
                $inner_data['id_user']=$action_data['id_user']=$data['id_user'];
            if(isset($data['user_role_id']))
                $inner_data['user_role_id']=$action_data['user_role_id']=$data['user_role_id'];
            $inner_data['reference_id']=$result[$s]['id_contract'];
            $inner_data['reference_type']='contract';
            $inner_data['contract_owner_id']=$result[$s]['contract_owner_id'];
            $inner_data['delegate_id']=$result[$s]['delegate_id'];
            if(isset($data['deleted'])){

            }else{
                $inner_data['document_status']=1;
            }
            $result[$s]['attachment']['documents'] = $result[$s]['unique_attachment']['documents'] = $this->Document_model->getDocumentsList($inner_data);
            $inner_data['document_type'] = array(0,1);
            $result[$s]['unique_attachment']['all_records'] = $this->Document_model->getDocumentsList($inner_data);
            $inner_data['document_type'] = 1;
            $result[$s]['attachment']['links'] = $result[$s]['unique_attachment']['links'] = $this->Document_model->getDocumentsList($inner_data);
            foreach($result[$s]['attachment']['documents'] as $ka=>$va){
                $result[$s]['attachment']['documents'][$ka]['updated_by']=0;
            }
            foreach($result[$s]['attachment']['links'] as $ka=>$va){
                $result[$s]['attachment']['links'][$ka]['updated_by']=0;
            }
            $inner_data['updated_by']=isset($data['updated_by'])?$data['updated_by']:1;
            $result[$s]['attachment']['links'] = array_merge($this->Document_model->getDocumentsList($inner_data),$result[$s]['attachment']['links']);
            unset($inner_data['document_type']);
            $result[$s]['attachment']['documents'] = array_merge($this->Document_model->getDocumentsList($inner_data),$result[$s]['attachment']['documents']);
            foreach($result[$s]['attachment']['documents'] as $ka=>$va){
                $result[$s]['attachment']['documents'][$ka]['document_source_exactpath']=($va['document_source']);
                $result[$s]['attachment']['documents'][$ka]['id_document']=pk_encrypt($result[$s]['attachment']['documents'][$ka]['id_document']);
                $result[$s]['attachment']['documents'][$ka]['module_id']=pk_encrypt($result[$s]['attachment']['documents'][$ka]['module_id']);
                $result[$s]['attachment']['documents'][$ka]['reference_id']=pk_encrypt($result[$s]['attachment']['documents'][$ka]['reference_id']);
                $result[$s]['attachment']['documents'][$ka]['uploaded_by']=pk_encrypt($result[$s]['attachment']['documents'][$ka]['uploaded_by']);
                $result[$s]['attachment']['documents'][$ka]['user_role_id']=pk_encrypt($result[$s]['attachment']['documents'][$ka]['user_role_id']);
            }
            foreach($result[$s]['attachment']['links'] as $ka=>$va){
                $result[$s]['attachment']['links'][$ka]['document_source_exactpath']=($va['document_source']);
                $result[$s]['attachment']['links'][$ka]['id_document']=pk_encrypt($result[$s]['attachment']['links'][$ka]['id_document']);
                $result[$s]['attachment']['links'][$ka]['module_id']=pk_encrypt($result[$s]['attachment']['links'][$ka]['module_id']);
                $result[$s]['attachment']['links'][$ka]['reference_id']=pk_encrypt($result[$s]['attachment']['links'][$ka]['reference_id']);
                $result[$s]['attachment']['links'][$ka]['uploaded_by']=pk_encrypt($result[$s]['attachment']['links'][$ka]['uploaded_by']);
                $result[$s]['attachment']['links'][$ka]['user_role_id']=pk_encrypt($result[$s]['attachment']['links'][$ka]['user_role_id']);
            }
            foreach($result[$s]['unique_attachment']['all_records'] as $ka=>$va){
                $result[$s]['unique_attachment']['all_records'][$ka]['show_icon']=false;
                $result[$s]['unique_attachment']['all_records'][$ka]['document_source_exactpath']=($va['document_source']);
                $result[$s]['unique_attachment']['all_records'][$ka]['encryptedPath']=pk_encrypt($va['document_source']);
                $result[$s]['unique_attachment']['all_records'][$ka]['id_document']=pk_encrypt($result[$s]['unique_attachment']['all_records'][$ka]['id_document']);
                $result[$s]['unique_attachment']['all_records'][$ka]['module_id']=pk_encrypt($result[$s]['unique_attachment']['all_records'][$ka]['module_id']);
                $result[$s]['unique_attachment']['all_records'][$ka]['reference_id']=pk_encrypt($result[$s]['unique_attachment']['all_records'][$ka]['reference_id']);
                $result[$s]['unique_attachment']['all_records'][$ka]['uploaded_by']=pk_encrypt($result[$s]['unique_attachment']['all_records'][$ka]['uploaded_by']);
                $result[$s]['unique_attachment']['all_records'][$ka]['user_role_id']=pk_encrypt($result[$s]['unique_attachment']['all_records'][$ka]['user_role_id']);
                $result[$s]['unique_attachment']['all_records'][$ka]['action']=0;
                if(
                    ((in_array($this->session_user_info->id_user,array($result[$s]['delegate_id'],$result[$s]['contract_owner_id'])))||
                    (in_array($this->session_user_info->user_role_id,array(2))))
                    )
                {
                    $result[$s]['unique_attachment']['all_records'][$ka]['action']=1;
                }
                if(($result[$s]['unique_attachment']['all_records'][$ka]['is_lock']==1))
                {
                    if(
                        !((in_array($this->session_user_info->id_user,array($result[$s]['delegate_id'],$result[$s]['contract_owner_id'])))||
                        (in_array($this->session_user_info->user_role_id,array(1,2))))
                        )
                    {
                        unset($result[$s]['unique_attachment']['all_records'][$ka]);
                    }
                }
                if( ($va['document_mime_type'] == 'application/pdf') && $va['module_type']!= 'document_intelligence')
                {
                    $result[$s]['unique_attachment']['all_records'][$ka]['show_icon']=true;
                }
            }
            $result[$s]['unique_attachment']['all_records']= array_values($result[$s]['unique_attachment']['all_records']);
            foreach($result[$s]['unique_attachment']['documents'] as $ka=>$va){
                $result[$s]['unique_attachment']['documents'][$ka]['show_icon']=false;
                $result[$s]['unique_attachment']['documents'][$ka]['document_source_exactpath']=($va['document_source']);
                $result[$s]['unique_attachment']['documents'][$ka]['encryptedPath']=pk_encrypt($va['document_source']);
                $result[$s]['unique_attachment']['documents'][$ka]['id_document']=pk_encrypt($result[$s]['unique_attachment']['documents'][$ka]['id_document']);
                $result[$s]['unique_attachment']['documents'][$ka]['module_id']=pk_encrypt($result[$s]['unique_attachment']['documents'][$ka]['module_id']);
                $result[$s]['unique_attachment']['documents'][$ka]['reference_id']=pk_encrypt($result[$s]['unique_attachment']['documents'][$ka]['reference_id']);
                $result[$s]['unique_attachment']['documents'][$ka]['uploaded_by']=pk_encrypt($result[$s]['unique_attachment']['documents'][$ka]['uploaded_by']);
                $result[$s]['unique_attachment']['documents'][$ka]['user_role_id']=pk_encrypt($result[$s]['unique_attachment']['documents'][$ka]['user_role_id']);
                $result[$s]['unique_attachment']['documents'][$ka]['action']=0;
                if(((in_array($this->session_user_info->id_user,array($result[$s]['delegate_id'],$result[$s]['contract_owner_id'])))||(in_array($this->session_user_info->user_role_id,array(2)))))
                {
                    $result[$s]['unique_attachment']['documents'][$ka]['action']=1;
                }
                if(($result[$s]['unique_attachment']['documents'][$ka]['is_lock']==1))
                {
                    if(
                        !((in_array($this->session_user_info->id_user,array($result[$s]['delegate_id'],$result[$s]['contract_owner_id'])))||
                        (in_array($this->session_user_info->user_role_id,array(2))))
                        )
                    {
                        unset($result[$s]['unique_attachment']['documents'][$ka]);
                    }
                }
                if( ($va['document_mime_type'] == 'application/pdf') && $va['module_type']!= 'document_intelligence')
                {
                    $result[$s]['unique_attachment']['documents'][$ka]['show_icon']=true;
                }
            }
            $result[$s]['unique_attachment']['documents']= array_values($result[$s]['unique_attachment']['documents']);
            foreach($result[$s]['unique_attachment']['links'] as $ka=>$va){
                $result[$s]['unique_attachment']['links'][$ka]['document_source_exactpath']=($va['document_source']);
                $result[$s]['unique_attachment']['links'][$ka]['id_document']=pk_encrypt($result[$s]['unique_attachment']['links'][$ka]['id_document']);
                $result[$s]['unique_attachment']['links'][$ka]['module_id']=pk_encrypt($result[$s]['unique_attachment']['links'][$ka]['module_id']);
                $result[$s]['unique_attachment']['links'][$ka]['reference_id']=pk_encrypt($result[$s]['unique_attachment']['links'][$ka]['reference_id']);
                $result[$s]['unique_attachment']['links'][$ka]['uploaded_by']=pk_encrypt($result[$s]['unique_attachment']['links'][$ka]['uploaded_by']);
                $result[$s]['unique_attachment']['links'][$ka]['user_role_id']=pk_encrypt($result[$s]['unique_attachment']['links'][$ka]['user_role_id']);
                $result[$s]['unique_attachment']['links'][$ka]['action']=0;
                if(((in_array($this->session_user_info->id_user,array($result[$s]['delegate_id'],$result[$s]['contract_owner_id'])))||(in_array($this->session_user_info->user_role_id,array(2)))))
                {
                    $result[$s]['unique_attachment']['links'][$ka]['action']=1;
                }
                if(($result[$s]['unique_attachment']['links'][$ka]['is_lock']==1))
                {
                    if(
                        !((in_array($this->session_user_info->id_user,array($result[$s]['delegate_id'],$result[$s]['contract_owner_id'])))||
                        (in_array($this->session_user_info->user_role_id,array(1,2))))
                        )
                    {
                        unset($result[$s]['unique_attachment']['links'][$ka]);
                    }
                }
            }
            $result[$s]['unique_attachment']['links']= array_values($result[$s]['unique_attachment']['links']);
            $ContractInfoColarray =array('contract_unique_id','provider_name','contract_name','contract_start_date','contract_end_date','auto_renewal','contract_value','business_unit_id','contract_active_status','currency_id','contract_owner_id','relationship_category_id','delegate_id','template_id','description');
            //$ContractInfoColarray =array('contract_unique_id','provider_name','contract_name','contract_start_date','contract_end_date','auto_renewal','contract_value','business_unit_id','classification_id','currency_id','contract_owner_id','relationship_category_id','delegate_id','template_id','description');
            $ContractinfoFilledFields =0;
            foreach ($ContractInfoColarray as $k => $v) {
                     if(!empty($result[0][$v]) || $v=='auto_renewal'){
                         $ContractinfoFilledFields++;
                }
            }
            $contract_information =$ContractinfoFilledFields."/15";
            $ContractSpentColarray =array('po_number','contract_value_period','contract_value','additional_recurring_fees_period','additional_recurring_fees','additonal_one_off_fees');
            $ContractSpentFilledFields =0;
            foreach ($ContractSpentColarray as $k => $v) {
                     if(($result[0][$v]!="")||($result[0][$v]!=NULL)){
                         $ContractSpentFilledFields++;
                }
            }
            $contract_spent_managment =$ContractSpentFilledFields."/6";

            $ContractStakeHolderColarray =array('internal_contract_sponsor','provider_contract_sponsor','internal_partner_relationship_manager','provider_partner_relationship_manager','provider_contract_responsible','internal_contract_responsible');
            
            $ContractStakeHolderFilledFields =0;
            //$ContractStakeHolder = array();
            foreach ($ContractStakeHolderColarray as $k => $v) {
                     if(($result[0][$v]!="")||($result[0][$v]!=NULL)){
                         $ContractStakeHolderFilledFields++;
                }
            }
            $contract_stake_holder =$ContractStakeHolderFilledFields."/6";
            $contractTagesFilled =0;
            $master_tags = $this->Tag_model->TagList(array('customer_id'=>$this->session_user_info->customer_id,'status'=>1,'tag_type'=>'contract_tags'));
            $tag_data = $this->Contract_model->getInfoContractTags(array('contract_id'=>$contract_id));
            $tag_result = array();
            if(empty($tag_data))
            {
                $contract_tags ="0/".count($master_tags);
            }
            else{
                $contractTagesFilled = 0;
                foreach ($tag_data as $k => $va) {
                    if(($tag_data[$k]['tag_answer']!="")&&($tag_data[$k]['tag_answer']!=NULL))
                    {
                        $contractTagesFilled++;
                    }
                }
                $contract_tags  =$contractTagesFilled."/".count($master_tags);
            }
            
            $obligations = $this->Project_model->getObligations(array('id_contract'=>$result[$s]['id_contract'],'get_parent'=>true));
            $obligationsCount =!empty($obligations)?$obligations['total_records']:0;
            $action_data=array('id_contract'=>$result[$s]['id_contract']);
            if(isset($data['id_user']))
                $action_data['id_user']=$data['id_user'];
            if(isset($data['user_role_id']))
                $action_data['user_role_id']=$data['user_role_id'];
            if(isset($data['id_contract_review']))
                $action_data['id_contract_review']=$data['id_contract_review'];
            $action_data['item_status']=1;
            $result[$s]['action_items'] = $this->Contract_model->getContractReviewActionItemsList($action_data);
            foreach($result[$s]['action_items'] as $ka=>$va){
                $result[$s]['action_items'][$ka]['contract_id']=pk_encrypt($result[$s]['action_items'][$ka]['contract_id']);
                $result[$s]['action_items'][$ka]['contract_review_id']=pk_encrypt($result[$s]['action_items'][$ka]['contract_review_id']);
                $result[$s]['action_items'][$ka]['created_by']=pk_encrypt($result[$s]['action_items'][$ka]['created_by']);
                $result[$s]['action_items'][$ka]['id_contract_review_action_item']=pk_encrypt($result[$s]['action_items'][$ka]['id_contract_review_action_item']);
                $result[$s]['action_items'][$ka]['module_id']=pk_encrypt($result[$s]['action_items'][$ka]['module_id']);
                $result[$s]['action_items'][$ka]['responsible_user_id']=pk_encrypt($result[$s]['action_items'][$ka]['responsible_user_id']);
                $result[$s]['action_items'][$ka]['topic_id']=pk_encrypt($result[$s]['action_items'][$ka]['topic_id']);
                $result[$s]['action_items'][$ka]['updated_by']=pk_encrypt($result[$s]['action_items'][$ka]['updated_by']);
                $result[$s]['action_items'][$ka]['user_role_id']=pk_encrypt($result[$s]['action_items'][$ka]['user_role_id']);
                foreach($result[$s]['action_items'][$ka]['comments_log'] as $kac=>$vac){
                    $result[$s]['action_items'][$ka]['comments_log'][$kac]['contract_review_action_item_id']=pk_encrypt($result[$s]['action_items'][$ka]['comments_log'][$kac]['contract_review_action_item_id']);
                    $result[$s]['action_items'][$ka]['comments_log'][$kac]['id_contract_review_action_item_log']=pk_encrypt($result[$s]['action_items'][$ka]['comments_log'][$kac]['id_contract_review_action_item_log']);
                    $result[$s]['action_items'][$ka]['comments_log'][$kac]['updated_by']=pk_encrypt($result[$s]['action_items'][$ka]['comments_log'][$kac]['updated_by']);
                }
            }
            $result[$s]['contract_sponsor'] = array('internal'=>$result[$s]['internal_contract_sponsor'],'provider'=>$result[$s]['provider_contract_sponsor']);
            $result[$s]['partner_relationship_manager'] = array('internal'=>$result[$s]['internal_partner_relationship_manager'],'provider'=>$result[$s]['provider_partner_relationship_manager']);
            $result[$s]['contract_responsible'] = array('internal'=>$result[$s]['internal_contract_responsible'],'provider'=>$result[$s]['provider_contract_responsible']);
            $result[$s]['score'] = 0;
            $result[$s]['review_by']  = '---';
            $result[$s]['last_review'] = NULL;
            //data to get review / workflow
            $data_review = array('contract_id' => $result[$s]['id_contract'],'order' => 'DESC');
            if(isset($data['is_workflow']) && $data['is_workflow'] == 1){
                    $data_review['contract_workflow_id'] = $data['id_contract_workflow'];
                    $result[$s]['can_review'] = '1';
            }else{
                $data_review['is_workflow']=0;
            }

            $review = $this->Contract_model->getLastReviewByContractId($data_review);

            //data to get last finalized review / workflow
            $data_last_finalized_review = array('contract_id' => $result[$s]['id_contract'],'order' => 'DESC','contract_review_status'=>'finished');
            if(isset($data['is_workflow']) && $data['is_workflow'] == 1){
                $data_last_finalized_review['contract_workflow_id'] = $data['id_contract_workflow'];
            }else{
                $data_last_finalized_review['is_workflow']=0;
            }
            $last_finalized_review = $this->Contract_model->getLastReviewByContractId($data_last_finalized_review);
            if(!empty($last_finalized_review)) {
                $result[$s]['review_by'] = $last_finalized_review[0]['review_by'];
                if($last_finalized_review[0]['review_on']!='---')
                    $result[$s]['last_review'] = date('Y-m-d',strtotime($last_finalized_review[0]['review_on']));
            }
            /*if(!empty($review)) {
                $result[$s]['review_by'] = $review[0]['review_by'];
                if($review[0]['review_on']!='---')
                    $result[$s]['last_review'] = date('Y-m-d',strtotime($review[0]['review_on']));
            }*/
            if(empty($result[$s]['id_contract_review']) || $result[$s]['id_contract_review']==NULL){
                $result[$s]['id_contract_review']=0;
            }
            $contract_review_id = 0;

            //Spirnt 5
            $provider_visibility = array(1,0);
            $contributor_modules = $this->User_model->check_record_selected('module_id','contract_user',array('contract_review_id'=>$result[$s]['id_contract_review'],'user_id'=>$this->session_user_id,'status'=>1));
            $contributor_modules = array_map(function($i){ return $i['module_id']; },$contributor_modules);
            if(count($contributor_modules)>0){
                if((int)$this->session_user_info->contribution_type == 3)
                    $provider_visibility = array(1);
            }
            
            $contract_progress_score=$this->calculateScoreAndProgress(array('id_contract_review'=>$data['id_contract_review'],'user_id'=>!empty($this->session_user_id)?$this->session_user_id:0));//new funcion for calculating  the score and contract progress
            $result[0]['score']=$contract_progress_score['score'];
            $result[0]['contract_progress']=$contract_progress_score['contract_progress'];
            // if(isset($data['is_workflow']) && $data['is_workflow'] == 1 && isset($data['id_contract_workflow']) && $data['id_contract_workflow'] > 0)
            //     $result[$s]['ideedi']=(count($this->Contract_model->getContractReviewDiscussionModuleCount(array('id_contract_review'=>$result[$s]['id_contract_review'],'discussion_status'=>1)))>0)?"itako":'annus';
            // else

            $result[$s]['ideedi'] = "annus";
            // echo '<pre>'.print_r($user_modules);exit;
            $module_ids = array_map(function ($i) { return strtolower($i['id_module']); }, $user_modules);
            if(count($currentReviewId) > 0)
                $result[$s]['ideedi']=(count($this->Contract_model->getContractReviewDiscussionModuleCount(array('id_contract_review'=>$currentReviewId[0]['id_contract_review'],'discussion_status'=>1,'module_ids'=>$module_ids)))>0)?"itako":'annus';
            $result[$s]['idaadi']='annus';
            $idaadi=$this->Contract_model->checkContributorForContractReview(array('contract_review_id'=>$result[$s]['id_contract_review'],'id_user'=>$data['id_user']));
            if($data['user_role_id'] == 5 || $idaadi===true) {
                $result[$s]['idaadi']="itako";
            }
            else{
                $result[$s]['idaadi']=(count($this->Contract_model->getContractDiscussion(array('id_contract'=>$result[$s]['id_contract'])))>0)?"itako":'annus';
            }
            $result[$s]['contract_user_access']=$this->session_user_info->access;
            if($this->Contract_model->checkReviewUserAccess(array('contract_review_id'=>$result[$s]['id_contract_review'],'id_user'=>$this->session_user_info->id_user))>0){
                $result[$s]['contract_user_access']='co';
                $user_modules=$this->Contract_model->getValidatormodules(array('check_discussion'=>true,'discussion_status'=>1,'contract_review_id'=>$result[$s]['id_contract_review'],'contribution_type'=>array(0,3),'user_id'=>$this->session_user_info->id_user));                
                // echo '<pre>'.$this->db->last_query();exit;               
                //Here checking for user has access for modules having discussion.
                // if(count($user_modules)==0)
                //     $result[$s]['ideedi']='annus';
            }
            ///Assigning edit access for contracts
            $result[$s]['ieaaei'] = 'annus';
            //checking is customer admin
            if($data['user_role_id'] == 2) {
                $result[$s]['ieaaei'] = 'itako';
            }//chechking is contract created_by or contract_owner or delegate
            else if($data['id_user'] == $result[$s]['created_by'] || $data['id_user'] == $result[$s]['contract_owner_id']  || $data['id_user'] == $result[$s]['delegate_id']) {
                $result[$s]['ieaaei'] = 'itako';
            }
            $result[$s]['data_delegate_error']=0;
            $where=array(
               'user_status'=>1,
                'user_role_id'=>4,
                'id_user'=>$result[$s]['delegate_id']
            );
            if($result[$s]['delegate_id'])
            {
                $delegateresult=$this->User_model->check_record('user',$where);
                if(count($delegateresult)==0)
                    $result[$s]['data_delegate_error']=1;
            }
            $result[$s]['data_owner_error']=0;
            $whereowner=array(
                'user_status'=>1,
                 'id_user'=>$result[$s]['contract_owner_id']
             );
             if($result[$s]['contract_owner_id'])
             {
                $ownerresult=$this->User_model->check_record('user',$whereowner);
                if(!in_array($ownerresult[0]['user_role_id'],array(3,8)))
                    $result[$s]['data_owner_error']=1;
             }
            $contract_bu_id = $result[$s]['business_unit_id'];
            $contract_id = $result[$s]['id_contract'];
            $relationship_category_id = $result[$s]['relationship_category_id'];
            $provider_name = $result[$s]['provider_name'];
            $result[$s]['provider_name']=pk_encrypt($result[$s]['provider_name']);
            $result[$s]['business_unit_id']=pk_encrypt($result[$s]['business_unit_id']);
            $result[$s]['classification_id']=pk_encrypt($result[$s]['classification_id']);
            $result[$s]['contract_owner_id']=pk_encrypt($result[$s]['contract_owner_id']);
            $result[$s]['created_by']=pk_encrypt($result[$s]['created_by']);
            //$result[$s]['currency_id']=pk_encrypt($result[$s]['currency_id']);
            $currency_details=$this->User_model->getCurrencyDetails(array('contract_id'=>$result[$s]['id_contract']));
            $result[$s]['currency_id']=pk_encrypt($currency_details[0]['currency_id']);
            $result[$s]['delegate_id']=pk_encrypt($result[$s]['delegate_id']);
            $result[$s]['id_contract']=pk_encrypt($result[$s]['id_contract']);
            $result[$s]['id_contract_review']=count($currentReviewId)>0?pk_encrypt($currentReviewId[0]['id_contract_review']):0;
            // $result[$s]['id_contract_review']=count($currentReviewId)>0?$currentReviewId[0]['id_contract_review']:0;
            //
            $result[$s]['parent_contract_id']=pk_encrypt($result[$s]['parent_contract_id']);
            $result[$s]['relationship_category_id']=pk_encrypt($result[$s]['relationship_category_id']);
            $result[$s]['updated_by']=pk_encrypt($result[$s]['updated_by']);
            $result[$s]['template_id']=pk_encrypt($result[$s]['template_id']);
            $result[$s]['auto_renewal']=(int)$result[$s]['auto_renewal'];
            $result[$s]['is_workflow'] = 0;
            $result[$s]['workflow_template_id'] = null;
            $result[$s]['id_contract_workflow'] = 0;
            $result[$s]['disable_template'] = false; //$this->session_user_info->user_role_id
            $qry = 'select * FROM contract_review WHERE contract_id='.pk_decrypt($result[$s]['id_contract']).' AND is_workflow=0 ORDER BY id_contract_review DESC limit 1';
            $review_status_data = $this->User_model->custom_query($qry);
            
            // print_r($review_status_data[0]['contract_review_status']);exit;
            if($review_status_data[0]['contract_review_status'] == 'review in progress' || ($result[$s]['is_template_lock'] ==1 &&(!($this->session_user_info->user_role_id == 2))))
            {
                $result[$s]['disable_template'] = true; 
            }
            //echo '<pre>'.print_r($data);exit;
            if(isset($data['is_workflow']) && isset($data['id_contract_workflow'])){
                if($data['is_workflow'] == 1 && $data['id_contract_workflow'] > 0){
                    // if it is workflow geting the results of workflow and adding to result.
                    $contract_workflow_query = 'SELECT *,cr.updated_on as last_review FROM contract_workflow cw LEFT JOIN contract_review cr on cr.contract_workflow_id = cw.id_contract_workflow LEFT JOIN template t on cw.workflow_id = t.id_template WHERE cw.id_contract_workflow = '.$data['id_contract_workflow'].' ORDER BY cr.id_contract_review DESC';
                    $contract_workflow_query = $this->User_model->custom_query($contract_workflow_query);
                    // echo '<pre>'.print_r($contract_workflow_query);exit;
                    $result[$s]['contract_status'] = $contract_workflow_query[0]['workflow_status'];
                    $result[$s]['template_name'] = $contract_workflow_query[0]['template_name'];
                    $result[$s]['last_review'] = $contract_workflow_query[0]['last_review'];
                    $result[$s]['is_workflow'] = $data['is_workflow'];
                    $result[$s]['id_contract_workflow'] = pk_encrypt($data['id_contract_workflow']);
                    $result[$s]['workflow_template_id'] = pk_encrypt($contract_workflow_query[0]['workflow_id']);
                    //$result[$s]['auto_renewal']
                }
            }
            $result[$s]['zzauto_renewal']=(int)$result[$s]['auto_renewal'];
            // if(strtolower($result[$s]['contract_status']) == 'pending review')
            //     $result[$s]['contract_status']='Review to Initiate';
            // else if(strtolower($result[$s]['contract_status']) == 'pending workflow')
            //     $result[$s]['contract_status']='Task to Initiate';
            // else if(strtolower($result[$s]['contract_status']) == 'finished')
            //     $result[$s]['contract_status']='Review Finalized';
            // else
            //     $result[$s]['contract_status']=ucwords(str_replace('workflow','task',$result[$s]['contract_status']));
            //$result[$s]['contract_status']=$result[$s]['contract_status']=='pending review'?'initiate Review':$result[$s]['contract_status'];
            $contract_info1 = $this->User_model->check_record_selected('id_contract,currency_id,contract_value,contract_value_period,po_number,additional_recurring_fees,additional_recurring_fees_period,additonal_one_off_fees,contract_start_date,contract_end_date,TIMESTAMPDIFF(MONTH,contract_start_date,contract_end_date) months','contract',array('id_contract'=>pk_decrypt($result[$s]['id_contract'])));
            $graph = $this->spent_mngment_graph('spent_line','Actual Spent',$contract_info1[0]);
            $result[$s]['Projected_value'] = array_sum(array_map(function($i){ return (int)$i->data[0]->value;},$graph->dataset));
        }
        
        if(count($currentReviewId)>0){
            $data['contract_review_id'] = $currentReviewId[0]['id_contract_review'];
            $result['all_modles_validated'] = true;
            //Changing the column dynamically.
            $answer_column = 'question_answer';
            if((int)$this->session_user_info->contribution_type == 1)
                $answer_column = 'v_question_answer';
            
            //echo '<pre>'.print_r($data);exit;
            $data['dynamic_column'] = $answer_column;

            $result['progress'] = $this->Contract_model->contract_progress($data);
            $data['contribution_type'] = 1;
            $modules = $this->Contract_model->getValidatormodules($data);
            // echo '<pre>'.print_r($modules);exit;
            foreach($modules as $k => $v)
                if((int)$v['module_status'] != 3){
                    $result['all_modles_validated'] = false;
                    break;
                }
            //new logic in 8.2 sprint for getting validator button even if progress is <100%       
            if($currentReviewId[0]['is_workflow'] == 1)
            {
                //for task 
                foreach($modules as $k => $v){
                    $module_id = $v['id_module'];
                    $validators_on_module = $this->User_model->custom_query('SELECT * from contract_user cu JOIN user u on u.id_user = cu.user_id WHERE cu.module_id ='.$module_id.' AND u.contribution_type = 1 AND cu.status = 1');
                    if(!empty($validators_on_module) && ((int)$v['module_status'] ==1||(int)$v['module_status'] ==2))
                    {
                        $ready_for_validation = true;  
                        break;
                    }
                    else
                    {
                        $ready_for_validation = false;
                    }
                }
                if($ready_for_validation){
                    $result['ready_for_validation']=true;
                }
                else{
                    $result['ready_for_validation']=false;
                }
            }   
            else
            {
                //for review 
                foreach($modules as $k => $v){
                    if((int)$v['module_status'] ==2){
                        $ready_for_validation = true;
                    }
                    else{
                        $ready_for_validation = false;
                        break;
                    }
                }
                if($ready_for_validation && $result[0]['contract_progress']== '100%'){
                    $result['ready_for_validation']=true;
                }
                else{
                    $result['ready_for_validation']=false;
                }
            }  
            //commented in 8.2 sprint for getting validator button even if progress is <100%     
            // foreach($modules as $k => $v){
            //     if((int)$v['module_status'] ==2){
            //         $ready_for_validation = true;
            //     }
            //     else{
            //         $ready_for_validation = false;
            //         break;
            //     }
            // }
            // if($ready_for_validation && $result[0]['contract_progress']== '100%'){
            //     $result['ready_for_validation']=true;
            // }
            // else{
            //     $result['ready_for_validation']=false;
            // }
        }
       
        //Review / Workflow names accordian
        $review_or_workflow = array(); 
        //if(isset($data['is_workflow']) && $data['is_workflow']==1 && isset($data['id_contract_workflow']) && $data['id_contract_workflow'] > 0){
            
        
        $review_or_workflow['is_workflow'] = $data['is_workflow'];
        $id_contract_workflow = array();
        //Checking Calender planning for review
        $check_review_schedule = $this->Contract_model->check_contract_in_calender(
            array(
                'contract_id' => $contract_id,
                'business_unit_id' => $contract_bu_id,
                'relationship_category_id' => $relationship_category_id,
                'provider_id' => $provider_name,
                'only_one_contract' => true,
                'is_workflow' => 0
            ));//echo '<pre>'.$this->db->last_query();
            if(isset($data['is_workflow']) && $data['is_workflow']==1 && isset($data['id_contract_workflow']) && $data['id_contract_workflow'] > 0){
            $contract_workflow_data = $this->User_model->check_record('contract_workflow',array('id_contract_workflow' => $data['id_contract_workflow']));
            // print_r($contract_workflow_data);exit;
   
            $check_review_schedule[0]['recurrence_till'] = $contract_workflow_data[0]['Execute_by'];
            $review_or_workflow['acitvity_name'] = $contract_workflow_data[0]['workflow_name'];
            $review_or_workflow['calender_id'] = pk_encrypt($contract_workflow_data[0]['calender_id']);
            $id_contract_workflow = array($data['id_contract_workflow']);
            //if(count($check_review_schedule) > 0)
            // $review_or_workflow['review_data'][] = array('is_workflow'=>0,'id_contract'=>$data['id_contract'],'id_contract_review'=>count($currentReviewId)>0?$currentReviewId[0]['id_contract_review']:0,'id_contract_workflow'=>0,'review_name'=>isset($check_review_schedule[0])?$check_review_schedule[0]['workflow_name']:'---');
            
            $contract_review_details = $this->User_model->check_record('contract_review',array('contract_id'=>$data['id_contract'],'is_workflow'=>'0','contract_review_status'=>'review in progress'));
            if(count($contract_review_details) > 0){
                // echo"hhhh";exit;
                $review_or_workflow['review_data'][] = array('is_workflow'=>0,'id_contract'=>$data['id_contract'],'id_contract_review'=>$contract_review_details[0]['id_contract_review'],'id_contract_workflow'=>0,'review_name'=>isset($check_review_schedule[0])?$check_review_schedule[0]['workflow_name']:'---');
            }
            
        }else{
            if(count($check_review_schedule) > 0){
                $review_or_workflow['acitvity_name'] = $check_review_schedule[0]['workflow_name'];
                $review_or_workflow['calender_id'] = pk_encrypt($check_review_schedule[0]['id_calender']);
            }
            else{
                $review_or_workflow['acitvity_name'] = null;
                $review_or_workflow['calender_id'] = null;
            }
        }
       // print_r($review_or_workflow['review_data']);
        $get_validation_status=$this->User_model->check_record_selected('validation_status','contract_review',array('id_contract_review'=>$data['contract_review_id']));//get the validation status for review
        $validation_info = '';
        $calculatedProgress=$this->calculateScoreAndProgress(array('id_contract_review'=>$data['id_contract_review'],'user_id'=>!empty($this->session_user_id)?$this->session_user_id:0));
        
        $review_or_workflow['score']=$calculatedProgress['score'];
        $review_or_workflow['contract_progress']=$calculatedProgress['contract_progress'];
        
        $can_Review=$this->User_model->check_record_selected('can_review','contract',array('id_contract'=>$data['id_contract']));
        $review_or_workflow['review_click']=1;
        if($data['is_workflow']==0 && $can_Review[0]['can_review']==0){
            $review_or_workflow['review_click']=0;
        }
        if(!empty($data['id_contract_review']))
        { 
            $validatorsmodules =array();
            $validatorsmodules = $this->Contract_model->getValidatormodules(array('contract_review_id'=>$data['id_contract_review'],'contribution_type'=>1)); //getting validator modules 
            $validator_exists=count($validatorsmodules)>0?true:false;
            if($validator_exists)
            {
              
                $validation_info = 1;
                if(str_replace('%','',$review_or_workflow['contract_progress'])=='100'){
                    $validation_info = 4;
                }
                if((int)$get_validation_status[0]['validation_status'] == 2)
                {
                    $validation_info = 2;
                }
                elseif((int)$get_validation_status[0]['validation_status'] == 3)
                {
                    $validation_info = 3; 
                }
            }
        }

        $review_or_workflow['validation_status'] =$validation_info;
        //$review_or_workflow['validation_status'] = $get_validation_status[0]['validation_status'];
        //id_contract_review,contract_review_id,is_workflow,
        
        $contract_workflow_data = $this->Contract_model->getcontractworkflow(array('contract_id'=>$data['id_contract'],'id_contract_workflow'=>$id_contract_workflow)); 
        // echo '<pre>'.print_r($contract_workflow_data);exit;
        
        if(count($review_or_workflow['review_data']) > 0)
            $review_or_workflow['review_data'] = array_merge($review_or_workflow['review_data'],$contract_workflow_data);
        else
            $review_or_workflow['review_data'] = $contract_workflow_data;
        //Checking access to contracts
        $new_review_data = array();
        foreach($review_or_workflow['review_data'] as $k=>$v){
            if($this->session_user_info->user_role_id == 2 || $this->session_user_info->user_role_id == 6)
                $new_review_data[]=$v;
            else if($this->session_user_info->user_role_id == 3){
                if(count($this->User_model->check_record('contract',array('id_contract'=>$v['id_contract'],'contract_owner_id'=>$this->session_user_id)))>0 || (count($this->User_model->check_record('contract_user',array('contract_id'=>$v['id_contract'],'contract_review_id'=>$v['id_contract_review'],'status'=>1,'user_id'=>$this->session_user_id)))>0 && (count($this->User_model->check_record('contract_review',array('contract_id'=>$v['id_contract'],'id_contract_review'=>$v['id_contract_review'],'contract_workflow_id'=>$v['id_contract_workflow'])))>0 || count($this->User_model->check_record('contract_review',array('contract_id'=>$v['id_contract'],'id_contract_review'=>$v['id_contract_review'])))>0)))
                    $new_review_data[]=$v;
            }
            else if($this->session_user_info->user_role_id == 8 ){
                if(count($this->User_model->check_record('contract',array('id_contract'=>$v['id_contract'],'contract_owner_id'=>$this->session_user_id)))>0 || (count($this->User_model->check_record('contract_user',array('contract_id'=>$v['id_contract'],'contract_review_id'=>$v['id_contract_review'],'status'=>1,'user_id'=>$this->session_user_id)))>0 && (count($this->User_model->check_record('contract_review',array('contract_id'=>$v['id_contract'],'id_contract_review'=>$v['id_contract_review'],'contract_workflow_id'=>$v['id_contract_workflow'])))>0 || count($this->User_model->check_record('contract_review',array('contract_id'=>$v['id_contract'],'id_contract_review'=>$v['id_contract_review'])))>0)) || in_array($v['business_unit_id'],$this->session_user_business_units))
                    $new_review_data[]=$v;
            }
            else if($this->session_user_info->user_role_id == 4){
                if(count($this->User_model->check_record('contract',array('id_contract'=>$v['id_contract'],'delegate_id'=>$this->session_user_id)))>0 || (count($this->User_model->check_record('contract_user',array('contract_id'=>$v['id_contract'],'contract_review_id'=>$v['id_contract_review'],'status'=>1,'user_id'=>$this->session_user_id)))>0 && (count($this->User_model->check_record('contract_review',array('contract_id'=>$v['id_contract'],'id_contract_review'=>$v['id_contract_review'],'contract_workflow_id'=>$v['id_contract_workflow'])))>0 || count($this->User_model->check_record('contract_review',array('contract_id'=>$v['id_contract'],'id_contract_review'=>$v['id_contract_review'])))>0)))
                    $new_review_data[]=$v;
            }
            else if($this->session_user_info->user_role_id == 7 && count($this->User_model->check_record('contract_user',array('contract_id'=>$v['id_contract'],'contract_review_id'=>$v['id_contract_review'],'status'=>1,'user_id'=>$this->session_user_id)))>0){
                //$new_review_data[]=$v;
                // $new_review_data[$k]['review_click']=1;
                // if($v['is_workflow']==0 && $can_Review[0]['can_review']==0){
                //     $new_review_data[$k]['review_click']=0;
                // }
                $v['review_click']=1;
                if($v['is_workflow']==0 && $can_Review[0]['can_review']==0){
                    $v['review_click']=0;
                }
                $new_review_data[]=$v;
            }
                    // $new_review_data[$k]['review_click']=1;
                    // if($v['is_workflow']==0 && $can_Review[0]['can_review']==0){
                    //     $new_review_data[$k]['review_click']=0;
                    // }

            
        }
        // print_r($new_review_data);exit;
        // print_r($can_Review[0]['can_review']);exit;
        $review_or_workflow['review_data'] = $new_review_data;
        foreach($new_review_data as $kr => $vr){
            // echo '<pre>'.print_r($vr);
            // $review_or_workflow['review_click']=1;
            // if($vr['is_workflow']==0 && $can_Review[0]['can_review']==0){
            //     $review_or_workflow['review_click']=0;
            // }
            $review_or_workflow['review_data'][$kr]['initiated']=false;
            unset($review_or_workflow['review_data'][$kr]['review_name']);
            $review_or_workflow['review_data'][$kr]['acitvity_name'] = $vr['review_name'];            
            $review_or_workflow['review_data'][$kr]['id_contract'] = pk_encrypt($vr['id_contract']);
            if($vr['id_contract_workflow'] > 0){
                $review_or_workflow['review_data'][$kr]['is_workflow'] = 1;
                $review_or_workflow['review_data'][$kr]['id_contract_workflow'] = pk_encrypt($vr['id_contract_workflow']);
                
                if($vr['is_workflow']==1 && $vr['workflow_status']=='workflow in progress'){
                    $review_or_workflow['review_data'][$kr]['initiated']=true;
                }
            }
            $contract_review = array();
            if($vr['is_workflow']==0){
                $contract_review = $this->User_model->check_record('contract_review',array('contract_id'=>$vr['id_contract'],'is_workflow'=>'0','contract_review_status'=>'review in progress'));
                if(count($contract_review) > 0){
                    $review_or_workflow['review_data'][$kr]['initiated']=true;
                    $vr['id_contract_review'] = $contract_review[0]['id_contract_review'];
                }
            }
            $get_validation_status=array();
            $validation_info = '';
            $calculatedProgress=$this->calculateScoreAndProgress(array('id_contract_review'=>$vr['id_contract_review'],'user_id'=>!empty($this->session_user_id)?$this->session_user_id:0));
            $review_or_workflow['review_data'][$kr]['score']=$calculatedProgress['score'];
            $review_or_workflow['review_data'][$kr]['contract_progress']=$calculatedProgress['contract_progress'];
            if(!empty($vr['id_contract_review']))
            { 
                $get_validation_status=$this->User_model->check_record_selected('validation_status','contract_review',array('id_contract_review'=> $vr['id_contract_review']));
                $validatorsmodules =array();
                $validatorsmodules = $this->Contract_model->getValidatormodules(array('contract_review_id'=>$vr['id_contract_review'],'contribution_type'=>1)); 
                $validator_exists=count($validatorsmodules)>0?true:false;
                if($validator_exists)
                {
                    $validation_info = 1;
                    if(str_replace('%','',$review_or_workflow['review_data'][$kr]['contract_progress'])=='100'){
                        
                        $validation_info = 4;
                    }
                    if((int)$get_validation_status[0]['validation_status'] == 2)
                    {
                        $validation_info = 2;
                    }
                    elseif((int)$get_validation_status[0]['validation_status'] == 3)
                    {
                        $validation_info = 3; 
                    }
                }
            }
            $review_or_workflow['review_data'][$kr]['validation_status'] =$validation_info;
            $review_or_workflow['review_data'][$kr]['id_contract_review'] = pk_encrypt($vr['id_contract_review']);
        }
        $stake_holder_lables = $this->User_model->check_record_selected('lable1,lable2,lable3','contract_stakeholder_lables',array('contract_id'=>$contract_id));
        //Following qurey commented due to using same array '$check_review_schedule' got above.
        // $query = 'SELECT *FROM calender WHERE FIND_IN_SET("'.$data['id_contract'].'", contract_id) AND is_workflow='.$data['is_workflow'].'';
        // $contract_calender_data=$this->User_model->custom_query($query);
        //echo '<pre>'.print_r($check_review_schedule);exit;
        $contract_recurrence = $this->User_model->check_record('review_recurrence_master',array('id_review_recurrence' => $check_review_schedule[0]['recurrence']));
        $review_or_workflow['recurrenc']=$contract_recurrence[0]['recurrence_name'];
        $review_or_workflow['recurrence_till']=$check_review_schedule[0]['recurrence_till'];
        if($this->session_user_info->contribution_type == 1){
            $check_validator=$this->User_model->check_record('contract_user',array('contract_review_id'=>$data['id_contract_review'],'user_id'=>$data['id_user'],'status'=>1));  
        }
        // print_r($can_Review[0]['can_review']);exit;
        $review_or_workflow['review_click']=1;
        if($review_or_workflow['is_workflow']==0 && $can_Review[0]['can_review']==0){
            $review_or_workflow['review_click']=0;
        }
        foreach($review_or_workflow['review_data'] as $rvw=>$rvws){
            $review_or_workflow['review_data'][$rvw]['review_click']=1;
            if($rvws['is_workflow']==0 && $can_Review[0]['can_review']==0){
                $review_or_workflow['review_data'][$rvw]['review_click']=0;
            }
        }
        $result[0]['validation_contributor']=$this->session_user_info->contribution_type == 1 && count($check_validator)>0 ?true:false;
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>array($result[0]),'all_modles_validated'=>$result['all_modles_validated'], 'stake_holder_lables'=>$stake_holder_lables[0],'review_workflow_data'=>$review_or_workflow,'ready_for_validation'=>$result['ready_for_validation'],'validation_status'=>$review[0]['validation_status'],'contract_information'=>$contract_information,'contract_spent_managment'=>$contract_spent_managment,'contract_stake_holder'=>$contract_stake_holder,'contract_tags'=>$contract_tags,'obligations_count'=>$obligationsCount,'contract_attachments'=>count($result[0]['unique_attachment']['all_records']));
        //count added

        
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function relationshipCategory_get()
    {
        $data = $this->input->get();
        

        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($data['customer_id']!=$this->session_user_info->customer_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['language_id'])){
            $data['language_id']=pk_decrypt($data['language_id']);
            // if(!in_array($data['language_id'],$this->session_user_master_language)){
            //     $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
            //     $this->response($result, REST_Controller::HTTP_OK);
            // }
        }

        if(isset($data['id_relationship_category'])) {
            $data['id_relationship_category'] = pk_decrypt($data['id_relationship_category']);
            if(!in_array($data['id_relationship_category'],$this->session_user_customer_relationship_categories)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_relationship_category_not'])) {
            $data['id_relationship_category_not'] = pk_decrypt($data['id_relationship_category_not']);
            if(!in_array($data['id_relationship_category_not'],$this->session_user_customer_relationship_categories)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }

        $result = $this->Relationship_category_model->getRelationshipCategory($data);
        foreach($result as $k=>$v){
            $result[$k]['created_by']=pk_encrypt($result[$k]['created_by']);
            $result[$k]['customer_id']=pk_encrypt($result[$k]['customer_id']);
            $result[$k]['id_relationship_category']=pk_encrypt($result[$k]['id_relationship_category']);
            $result[$k]['id_relationship_category_language']=pk_encrypt($result[$k]['id_relationship_category_language']);
            $result[$k]['language_id']=pk_encrypt($result[$k]['language_id']);
            $result[$k]['parent_relationship_category_id']=pk_encrypt($result[$k]['parent_relationship_category_id']);
            $result[$k]['relationship_category_id']=pk_encrypt($result[$k]['relationship_category_id']);
            $result[$k]['updated_by']=pk_encrypt($result[$k]['updated_by']);
        }
        $data['status'] = 1; // to get active categorys in dropdown
        $data['can_review']=1; // to get reviewable categorys
        $dropdown1 = $this->Relationship_category_model->getRelationshipCategory($data);
        //echo '<pre>'.print_r($dropdown1);exit;
        $dropdown = array();
        foreach($dropdown1 as $k=>$v){
            $dropdown[$k]['id_relationship_category']=pk_encrypt($dropdown1[$k]['id_relationship_category']);
            $dropdown[$k]['relationship_category_name']=$dropdown1[$k]['relationship_category_name'];
            $dropdown[$k]['type']='With Review';
        }
        $data['can_review']=0; // to get non reviewable categorys
        $dropdown2 = $this->Relationship_category_model->getRelationshipCategory($data);
        $index = count($dropdown1);
        foreach($dropdown2 as $k=>$v){
            $dropdown[$index]['id_relationship_category']=pk_encrypt($dropdown2[$k]['id_relationship_category']);
            $dropdown[$index]['relationship_category_name']=$dropdown2[$k]['relationship_category_name'];
            $dropdown[$index]['type']='Without Review';
            $index++;
        }
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result,'drop_down'=>$dropdown);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function relationshipClassification_get()
    {
        $data = $this->input->get();

        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($data['customer_id']!=$this->session_user_info->customer_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['language_id'])){
            $data['language_id']=pk_decrypt($data['language_id']);
            // if(!in_array($data['language_id'],$this->session_user_master_language)){
            //     $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
            //     $this->response($result, REST_Controller::HTTP_OK);
            // }
        }
        if(isset($data['parent_classification_id'])) {
            $data['parent_classification_id'] = pk_decrypt($data['parent_classification_id']);
            if(!in_array($data['parent_classification_id'],$this->session_user_customer_relationship_classifications)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_relationship_classification_not'])) {
            $data['id_relationship_classification_not'] = pk_decrypt($data['id_relationship_classification_not']);
            if(!in_array($data['id_relationship_classification_not'],$this->session_user_customer_relationship_classifications)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        $data['classification_position'] = 'y';
        $result = $this->Relationship_category_model->getRelationshipClassificationForContract($data);
        foreach($result as $k=>$v){
            $result[$k]['created_by']=pk_encrypt($result[$k]['created_by']);
            $result[$k]['customer_id']=pk_encrypt($result[$k]['customer_id']);
            $result[$k]['id_relationship_classification']=pk_encrypt($result[$k]['id_relationship_classification']);
            $result[$k]['id_relationship_classification_language']=pk_encrypt($result[$k]['id_relationship_classification_language']);
            $result[$k]['language_id']=pk_encrypt($result[$k]['language_id']);
            $result[$k]['parent_classification_id']=pk_encrypt($result[$k]['parent_classification_id']);
            $result[$k]['parent_relationship_classification_id']=pk_encrypt($result[$k]['parent_relationship_classification_id']);
            $result[$k]['relationship_classification_id']=pk_encrypt($result[$k]['relationship_classification_id']);
            $result[$k]['updated_by']=pk_encrypt($result[$k]['updated_by']);
        }
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function reviewActionItems_get()
    {
        $data = $this->input->get();
        if(empty($data['provider_id']))
        $this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));
        if(empty($data['contract_id']))
        $this->form_validator->add_rules('provider_id', array('required'=>$this->lang->line('contract_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            // if(!in_array($data['contract_id'],$this->session_user_contracts)){
            //     $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'1');
            //     $this->response($result, REST_Controller::HTTP_OK);
            // }
            $contributor_modules = $this->User_model->check_record('contract_user',array('status'=>1,'contract_id'=>$data['contract_id'],'user_id'=>$this->session_user_id));
            }
        if(isset($data['provider_id'])) {
            $data['provider_id'] = pk_decrypt($data['provider_id']);
        }
        if(isset($data['module_id'])) {
            $data['module_id'] = pk_decrypt($data['module_id']);
            if(!in_array($data['module_id'],$this->session_user_contract_review_modules)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
            $all_modules = "SELECT id_module from module WHERE parent_module_id = (SELECT parent_module_id from module WHERE id_module = ".$data['module_id']." ) AND contract_review_id IN (SELECT id_contract_review FROM contract_review WHERE contract_id = ".$data['contract_id'].")";
            $all_modules = $this->User_model->custom_query($all_modules);
            $data['module_id'] = array_map(function($i){ return $i['id_module']; },$all_modules);
        }
        if(count($contributor_modules) > 0){
            if(isset($data['module_id']))
            $data['module_id'] = array_merge(array_map(function($i){ return $i['module_id']; },$contributor_modules),$data['module_id']);
            else
            $data['module_id'] = array_map(function($i){ return $i['module_id']; },$contributor_modules);
        }
        if(isset($data['topic_id'])) {
            $data['topic_id'] = pk_decrypt($data['topic_id']);
            if(!in_array($data['topic_id'],$this->session_user_contract_review_topics)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'3');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_review_id'])){
            $data['contract_review_id']=pk_decrypt($data['contract_review_id']);
            if(!in_array($data['contract_review_id'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'4');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_contract_review'])){
            $data['id_contract_review']=pk_decrypt($data['id_contract_review']);
            if(!in_array($data['id_contract_review'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'5');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_workflow_id'])){
            $data['contract_workflow_id']=pk_decrypt($data['contract_workflow_id']);
        }
        if(isset($data['id_contract_review_action_item'])) $data['id_contract_review_action_item']=pk_decrypt($data['id_contract_review_action_item']);
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
            if($data['user_role_id']==7){
                $provider_colleuges = $this->User_model->check_record('user',array('provider'=>$this->session_user_info->provider));
                $provider_colleuges = array_map(function($i){ return $i['id_user']; },$provider_colleuges);
                $data['provider_colleuges'] = $provider_colleuges;
            }
        }
        /*helper function for ordering smart table grid options*/
        $data = tableOptions($data);
        $data['item_status']=1;
        // $data['status']='open';
        // print_r($data);exit;
        if(isset($data['provider_id']) && $data['user_role_id']==2){
            unset($data['user_role_id']);
        }
        // print_r($data['item_status']);exit;
        // print_r($data);exit;
       
        if(!empty($data['action_item_type']) && $data['action_item_type']=='outside' && !empty($data['contract_id'])){
            $data['reference_type']=array('contract','question','topic');
        }
        if(!empty($data['action_item_type']) && $data['action_item_type']=='outside' && !empty($data['provider_id'])){
            $data['reference_type']=array('provider');
        }
        if(!empty($data['action_item_type']) && $data['action_item_type']=='inside' && !empty($data['contract_id'])){
            $data['reference_type']=array('topic','question');
            if(isset($data['is_workflow']) && $data['is_workflow']==1 ){
                unset($data['contract_review_id']);
            }
        }
        if(!empty($data['action_item_type']) && $data['action_item_type']=='inside' && !empty($data['module_id']) && !empty($data['module_id']) && !empty($data['topic_id'])){
            $data['reference_type']=array('topic','question');
        }
        // $data['reference_type']=array('project');
        //  print_r($data['type']=='project_actionitems');exit;
        if($data['type']=='project_actionitems')
        {
            $data['reference_type']=array('project','topic','question');
        }
        $result = $this->Contract_model->getContractReviewActionItems($data);//echo $this->db->last_query();exit;
        // echo '<pre>'.print_r($result['data']);exit;
        $action_item_as_status_count = 0;
        if(!empty($data['provider_id'])){
            $get_provider_name=$this->User_model->check_record('provider',array('id_provider'=>$data['provider_id']));  
        }
        for($s=0;$s<count($result['data']);$s++)
        {//,con.contract_name,p.provider_name
            if(strtolower($data['action_status']) != 'all' && $data['action_status'] == $result['data'][$s]['status'])
                $action_item_as_status_count++;
            
            $contract_details = $this->Contract_model->getContractDetails(array('id_contract'=>$result['data'][$s]['contract_id']));
            $result['data'][$s]['contract_name'] = !empty($get_provider_name[0]['provider_name'])?'--':$contract_details[0]['contract_name'];
            $result['data'][$s]['provider_name'] = !empty($get_provider_name[0]['provider_name'])?$get_provider_name[0]['provider_name']:$contract_details[0]['provider_name_show'];
            if(!empty($result['data'][$s]['original_date'])){
                if($result['data'][$s]['original_date']==$result['data'][$s]['due_date']){
                    $result['data'][$s]['original_date']='---';
                }
                else{
                    $result['data'][$s]['original_date'] = date('Y-m-d',strtotime($result['data'][$s]['original_date']));
                }
            }
            else{
                $result['data'][$s]['original_date']='---';
            }
            $result['data'][$s]['due_date'] = date('Y-m-d',strtotime($result['data'][$s]['due_date']));
            $contract_review = $this->Contract_model->getContractReview(array('id_contract_review'=>$result['data'][$s]['contract_review_id']));
            $result['data'][$s]['last_review'] = !empty($get_provider_name[0]['provider_name'])?'--':$contract_review[0]['updated_date'];
            $result['data'][$s]['contract_id']=!empty($get_provider_name[0]['provider_name'])?'--':pk_encrypt($result['data'][$s]['contract_id']);
            $result['data'][$s]['contract_review_id']=!empty($get_provider_name[0]['provider_name'])?'--':pk_encrypt($result['data'][$s]['contract_review_id']);
            $result['data'][$s]['created_by']=pk_encrypt($result['data'][$s]['created_by']);
            $result['data'][$s]['id_contract_review_action_item']=pk_encrypt($result['data'][$s]['id_contract_review_action_item']);
            $result['data'][$s]['contract_workflow_id']=!empty($get_provider_name[0]['provider_name'])?'--':pk_encrypt($result['data'][$s]['contract_workflow_id']);
            $result['data'][$s]['module_id']=!empty($get_provider_name[0]['provider_name'])?'--':pk_encrypt($result['data'][$s]['module_id']);
            $result['data'][$s]['responsible_user_id']=pk_encrypt($result['data'][$s]['responsible_user_id']);
            $result['data'][$s]['topic_id']=!empty($get_provider_name[0]['provider_name'])?'--':pk_encrypt($result['data'][$s]['topic_id']);
            $result['data'][$s]['question_id']=!empty($get_provider_name[0]['provider_name'])?'--':pk_encrypt($result['data'][$s]['question_id']);
            $result['data'][$s]['parent_question_id']=!empty($get_provider_name[0]['provider_name'])?'--':pk_encrypt($result['data'][$s]['question_id']);
            $result['data'][$s]['updated_by']=pk_encrypt($result['data'][$s]['updated_by']);
            $result['data'][$s]['user_role_id']=pk_encrypt($result['data'][$s]['user_role_id']);
            $result['data'][$s]['provider_id']=pk_encrypt($result['data'][$s]['provider_id']);
            $result['data'][$s]['status']=ucfirst($result['data'][$s]['status']);
            foreach($result['data'][$s]['comments_log'] as $kac=>$vac){
                $result['data'][$s]['comments_log'][$kac]['contract_review_action_item_id']=pk_encrypt($result['data'][$s]['comments_log'][$kac]['contract_review_action_item_id']);
                $result['data'][$s]['comments_log'][$kac]['id_contract_review_action_item_log']=pk_encrypt($result['data'][$s]['comments_log'][$kac]['id_contract_review_action_item_log']);
                $result['data'][$s]['comments_log'][$kac]['updated_by']=pk_encrypt($result['data'][$s]['comments_log'][$kac]['updated_by']);
            }
            if($data['type']=='project_actionitems' || $result['data'][$s]['type']=='project'){
                $provider_names=$this->Project_model->getactiveprojectProvider(array('project_id'=>$data['contract_id']));
                if(count($provider_names)==0 || count($provider_names)>1){
                    $result['data'][$s]['provider_name']='---';
                }
                if(count($provider_names)==1){
                    $result['data'][$s]['provider_name']=$provider_names[0]['provider_name'];
                }
                
            }
            if($result['data'][$s]['reference_type'] == "provider")
            {
                $result['data'][$s]['type']='provider';
            }
        }
        //$result['count'] = $action_item_as_status_count==0?count($result['data']):$action_item_as_status_count;
        // print_r($data['item_status']);exit;
        $data['status']='open';
        $open_count = $this->Contract_model->getContractReviewActionItems($data);//echo $this->db->last_query();exit;
        $result['count'] = $open_count['total_records'];
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function ReviewActionItem_post()
    {
        $data = $this->input->post();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        if(empty($data['provider_id']))
        $this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));
        if(empty($data['contract_id']))
        $this->form_validator->add_rules('provider_id', array('required'=>$this->lang->line('provider_id_req')));
        $this->form_validator->add_rules('action_item', array('required'=>$this->lang->line('action_item_req')));
        $this->form_validator->add_rules('responsible_user_id', array('required'=>$this->lang->line('responsible_user_id_req')));
        $this->form_validator->add_rules('due_date', array('required'=>$this->lang->line('due_date_req')));
        $this->form_validator->add_rules('created_by', array('required'=>$this->lang->line('created_by_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
        }
        if(!empty($data['provider_id'])){
            $data['provider_id']=pk_decrypt($data['provider_id']);
        }
        if(isset($data['contract_review_id'])){
            $data['contract_review_id']=pk_decrypt($data['contract_review_id']);
        }
        if(isset($data['module_id'])) {
            $data['module_id'] = pk_decrypt($data['module_id']);
        }
        if(isset($data['topic_id'])) {
            $data['topic_id'] = pk_decrypt($data['topic_id']);
        }
        if(isset($data['question_id'])) {
            $data['question_id'] = pk_decrypt($data['question_id']);
        }
        if(isset($data['responsible_user_id'])) {
            $data['responsible_user_id'] = pk_decrypt($data['responsible_user_id']);
        }
        if(isset($data['created_by'])) {
            $data['created_by'] = pk_decrypt($data['created_by']);
            if($data['created_by']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'6');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['updated_by'])) {
            $data['updated_by'] = pk_decrypt($data['updated_by']);
            if($data['updated_by']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'6');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_contract_review_action_item'])) {
            $data['id_contract_review_action_item'] = pk_decrypt($data['id_contract_review_action_item']);
        }
        if(isset($data['contract_workflow_id'])) {
            $data['contract_workflow_id'] = pk_decrypt($data['contract_workflow_id']);
        }
        //Separation from validator attachments with a flag
        $validation_status = 0; 
        if($this->Contract_model->checkReviewUserAccess(array('contract_review_id'=>$data['contract_review_id'],'id_user'=>$this->session_user_info->id_user))>0){
            if($this->session_user_info->contribution_type==1)
                $validation_status = 1;
        }
        //echo '<pre>'.explode('T',$data['due_date'])[0];exit;
        $is_workflow = 0;
        if(isset($data['is_workflow']) && $data['is_workflow'] == 1)
            $is_workflow = 1;

        $update = array(
            'contract_id' => $data['contract_id'],
            'action_item' => $data['action_item'],
            'responsible_user_id' => $data['responsible_user_id'],
            'external_users' => isset($data['external_users'])?$data['external_users']:'',
            'due_date' => explode('T',$data['due_date'])[0],
            'contract_review_id' => isset($data['contract_review_id'])?$data['contract_review_id']:0,
            'module_id' => isset($data['module_id'])?$data['module_id']:0,
            'topic_id' => isset($data['topic_id'])?$data['topic_id']:0,
            'question_id' => isset($data['question_id'])?$data['question_id']:0,
            'is_workflow' => $is_workflow,
            'validator_record' => $validation_status,
            'priority' => $data['priority']
        );
        // $data['reference_type']='project';
        if(isset($data['contract_workflow_id']) && $data['contract_workflow_id'] > 0)
            $update['contract_workflow_id'] = $data['contract_workflow_id'];
        if(isset($data['comments']))
            $update['comments']=$data['comments'];
        if(isset($data['description']))
            $update['description']=$data['description'];

        if(!isset($data['id_contract_review_action_item'])){
            $update['original_date'] = explode('T',$data['due_date'])[0];
            $update['created_by'] = $data['created_by'];
            $update['created_on'] = currentDate();
            $update['provider_id'] = $data['provider_id'];
            $update['reference_type'] = isset($data['reference_type'])?$data['reference_type']:'';
            $this->Contract_model->addContractReviewActionItem($update);
			//echo '<pre>'.$this->db->last_query();exit;
            $msg = $this->lang->line('contract_review_action_item_add');
        }
        else{
            unset($update['question_id']);
            $update['id_contract_review_action_item'] = $data['id_contract_review_action_item'];
            $update['updated_by'] = $data['updated_by'];
            $update['updated_on'] = currentDate();
            $this->Contract_model->updateContractReviewActionItem($update);
            $msg = $this->lang->line('contract_review_action_item_update');
        }
        if(isset($data['question_id'])){
            $updateUserDate= array(
                'updated_by'=>$data['created_by'],
                'updated_on'=>currentDate(),
                'question_id' => $data['question_id'],
                'contract_review_id' => $data['contract_review_id']
            );
            $moduleReview=$this->Contract_model->updateReviewQuestionAnswer($updateUserDate);
            //echo '<pre>'.$this->db->last_query();exit;
        }
        if(!isset($data['id_contract_review_action_item'])) {
            $module_info = $this->Module_model->getModuleName(array('language_id' => 1, 'module_id' => $data['module_id']));
            $contract_info = $this->Contract_model->getContractDetails(array('id_contract' => $data['contract_id']));
            $topic_info = $this->Topic_model->getTopicName(array('topic_id' => $data['topic_id']));
            $cust_admin_info = $this->User_model->getUserInfo(array('user_id' => $contract_info[0]['created_by']));
            $created_user_info = $this->User_model->getUserInfo(array('user_id' => $data['created_by']));
            $customer_details = $this->Customer_model->getCustomer(array('id_customer' => $cust_admin_info->customer_id));
        
           
            if ($customer_details[0]['company_logo'] == '') {
                $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'company');
            } else {
                $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'profile', SMALL_IMAGE);

            }
            if (!empty($customer_details)) {
                $customer_name = $customer_details[0]['company_name'];
            }

            $To = $this->User_model->getUserInfo(array('user_id' => $data['responsible_user_id'],'user_status'=>1));
            if(isset($data['is_workflow']) && $data['is_workflow'] == 1){
                $template_configurations_parent = $this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,  'module_key' => 'CONTRACT_WORKFLOW_ACTION_ITEM_CREATION'));
            }else{
                $template_configurations_parent = $this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,  'module_key' => 'CONTRACT_REVIEW_ACTION_ITEM_CREATION'));
            }
            $check_type=$this->User_model->check_record('contract',array('id_contract'=>$data['contract_id']));
            if($check_type[0]['type'] =='project'){
                $template_configurations_parent = $this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,  'module_key' => 'PROJECT_WORKFLOW_ACTION_ITEM_CREATION'));
                // echo $this->db->last_query();exit;
                if ($template_configurations_parent['total_records'] > 0 && !empty($To)) {
                    $template_configurations = $template_configurations_parent['data'][0];
                    $wildcards = $template_configurations['wildcards'];
                    $wildcards_replaces = array();
                    $wildcards_replaces['first_name'] = $To->first_name;
                    $wildcards_replaces['last_name'] = $To->last_name;
                    $wildcards_replaces['project_name'] = $contract_info[0]['contract_name'];
                    $wildcards_replaces['action_item_responsible_user'] = $To->first_name . ' ' . $To->last_name . ' (' . $To->user_role_name . ')';
                    $wildcards_replaces['action_item_name'] = $data['action_item'];
                    $wildcards_replaces['action_item_description'] ='';
                    if (isset($data['description']))
                    $wildcards_replaces['action_item_description'] = $data['description'];
                    $wildcards_replaces['action_item_due_date'] = dateFormat($data['due_date']);
                    $wildcards_replaces['project_task_topic_name'] = '';
                    $wildcards_replaces['project_task_module_name'] ='';
                    if($data['module_id'] && $data['module_id']>0){
                       $wildcards_replaces['project_task_topic_name'] = isset($topic_info[0]['topic_name'])?$topic_info[0]['topic_name']:'';
                       $wildcards_replaces['project_task_module_name'] = isset($module_info[0]['module_name'])?$module_info[0]['module_name']:'';
                        
                    }
                    
                    $wildcards_replaces['action_item_created_user_name'] = $created_user_info->first_name . ' ' . $created_user_info->last_name . ' (' . $created_user_info->user_role_name . ')';
                    $wildcards_replaces['action_item_created_date'] = dateFormat($update['created_on']);
                    $wildcards_replaces['logo'] = $customer_logo;
                    $wildcards_replaces['year'] = date("Y");
                    $wildcards_replaces['url'] = WEB_BASE_URL . 'html';
                    $body = wildcardreplace($wildcards, $wildcards_replaces, $template_configurations['template_content']);
                    $subject = wildcardreplace($wildcards, $wildcards_replaces, $template_configurations['template_subject']);
                    $from_name = $template_configurations['email_from_name'];
                    $from = $template_configurations['email_from'];
                    $to = $To->email;
                    $to_name = $To->first_name . ' ' . $To->last_name;
                    $mailer_data['mail_from_name'] = $from_name;
                    $mailer_data['mail_to_name'] = $to_name;
                    $mailer_data['mail_to_user_id'] = $To->id_user;
                    $mailer_data['mail_from'] = $from;
                    $mailer_data['mail_to'] = $to;
                    $mailer_data['mail_subject'] = $subject;
                    $mailer_data['mail_message'] = $body;
                    $mailer_data['status'] = 0;
                    $mailer_data['send_date'] = currentDate();
                    $mailer_data['is_cron'] = 0;
                    $mailer_data['email_template_id'] = $template_configurations['id_email_template'];
                    $mailer_id = $this->Customer_model->addMailer($mailer_data);
                    // print_r($mailer_data);exit;
                    if ($mailer_data['is_cron'] == 0) {
                        $this->load->library('sendgridlibrary');
                        $mail_sent_status = $this->sendgridlibrary->sendemail($from_name, $from, $subject, $body, $to_name, $to, array(), $mailer_id);
                        if ($mail_sent_status == 1)
                            $this->Customer_model->updateMailer(array('status' => 1, 'mailer_id' => $mailer_id));
                    }
    
                }

                if(isset($data['external_users']) && count(explode(',', $data['external_users']))>0){  
                    if(isset($data['is_workflow']) && $data['is_workflow'] == 1){
                        $template_configurations_parent = $this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,  'module_key' => 'PROJECT_TASK_ACTION_ITEM_CREATION_EXTERNAL_USER'));
                    }
                    if ($template_configurations_parent['total_records'] > 0) {
                        $template_configurations = $template_configurations_parent['data'][0];
                        $wildcards = $template_configurations['wildcards'];
                        $wildcards_replaces = array();
                        $external_users = explode(',', $data['external_users']);
                        foreach($external_users as $v){
                            $wildcards_replaces['first_name'] = $v;
                            $wildcards_replaces['project_name'] = $contract_info[0]['contract_name'];
                            $wildcards_replaces['action_item_responsible_user'] = $To->first_name . ' ' . $To->last_name . ' (' . $To->user_role_name . ')';
                            // $wildcards_replaces['contract_review_module_name'] = $module_info[0]['module_name'];
                            $wildcards_replaces['action_item_name'] = $data['action_item'];
                            $wildcards_replaces['action_item_description'] = '';
                            if (isset($data['description']))
                                $wildcards_replaces['action_item_description'] = $data['description'];
                            $wildcards_replaces['action_item_due_date'] = dateFormat($data['due_date']);
                            // $wildcards_replaces['contract_review_topic_name'] = $topic_info[0]['topic_name'];
                            $wildcards_replaces['project_task_topic_name'] = '';
                            $wildcards_replaces['project_task_module_name'] = '';
                            if($data['module_id'] && $data['module_id']>0){
                                if($data['is_workflow']==1){
                                    $wildcards_replaces['project_task_topic_name'] = $topic_info[0]['topic_name'];
                                    $wildcards_replaces['project_task_module_name'] = $module_info[0]['module_name'];
                                }
                            }
                            $wildcards_replaces['action_item_created_user_name'] = $created_user_info->first_name . ' ' . $created_user_info->last_name . ' (' . $created_user_info->user_role_name . ')';
                            $wildcards_replaces['action_item_created_date'] = dateFormat($update['created_on']);
                            $wildcards_replaces['logo'] = $customer_logo;
                            $wildcards_replaces['year'] = date("Y");
                            $wildcards_replaces['url'] = WEB_BASE_URL . 'html';
                            $body = wildcardreplace($wildcards, $wildcards_replaces, $template_configurations['template_content']);
                            $subject = wildcardreplace($wildcards, $wildcards_replaces, $template_configurations['template_subject']);
                            $from_name = $template_configurations['email_from_name'];
                            $from = $template_configurations['email_from'];
                            $to = $v;
                            $mailer_data['mail_from_name'] = $from_name;
                            $mailer_data['mail_to_name'] = '';
                            $mailer_data['mail_to_user_id'] = '';
                            $mailer_data['mail_from'] = $from;
                            $mailer_data['mail_to'] = $to;
                            $mailer_data['mail_subject'] = $subject;
                            $mailer_data['mail_message'] = $body;
                            $mailer_data['status'] = 0;
                            $mailer_data['send_date'] = currentDate();
                            $mailer_data['is_cron'] = 0;
                            $mailer_data['email_template_id'] = $template_configurations['id_email_template'];
                            $mailer_id = $this->Customer_model->addMailer($mailer_data);
                            //sending mail to bu owner
                            if ($mailer_data['is_cron'] == 0) {
                                $this->load->library('sendgridlibrary');
                                $mail_sent_status = $this->sendgridlibrary->sendemail($from_name, $from, $subject, $body, $to_name, $to, array(), $mailer_id);
                                if ($mail_sent_status == 1)
                                    $this->Customer_model->updateMailer(array('status' => 1, 'mailer_id' => $mailer_id));
                            }
                        }
        
                    }
                }
            }
            else{
                if ($template_configurations_parent['total_records'] > 0 && !empty($To)) {
                    $template_configurations = $template_configurations_parent['data'][0];
                    $wildcards = $template_configurations['wildcards'];
                    $wildcards_replaces = array();
                    $wildcards_replaces['first_name'] = $To->first_name;
                    $wildcards_replaces['last_name'] = $To->last_name;
                    $wildcards_replaces['contract_name'] = !empty($data['contract_id'])?$contract_info[0]['contract_name']:"";
                    $wildcards_replaces['action_item_responsible_user'] = $To->first_name . ' ' . $To->last_name . ' (' . $To->user_role_name . ')';
                   
                    $wildcards_replaces['action_item_name'] = $data['action_item'];
                    if (isset($data['description']))
                    $wildcards_replaces['action_item_description'] = $data['description'];
                    $wildcards_replaces['action_item_due_date'] = dateFormat($data['due_date']);
                   
                    if($data['module_id'] && $data['module_id']>0){
                        if($data['is_workflow']==1){
                        $wildcards_replaces['contract_workflow_topic_name'] = $topic_info[0]['topic_name'];
                        $wildcards_replaces['contract_workflow_module_name'] = $module_info[0]['module_name'];
                        }
                        else{
                            $wildcards_replaces['contract_review_topic_name'] = $topic_info[0]['topic_name'];
                            $wildcards_replaces['contract_review_module_name'] = $module_info[0]['module_name'];
                        }
                    }
                    
                    $wildcards_replaces['action_item_created_user_name'] = $created_user_info->first_name . ' ' . $created_user_info->last_name . ' (' . $created_user_info->user_role_name . ')';
                    $wildcards_replaces['action_item_created_date'] = dateFormat($update['created_on']);
                    $wildcards_replaces['logo'] = $customer_logo;
                    $wildcards_replaces['year'] = date("Y");
                    $wildcards_replaces['url'] = WEB_BASE_URL . 'html';
                    $body = wildcardreplace($wildcards, $wildcards_replaces, $template_configurations['template_content']);
                    $subject = wildcardreplace($wildcards, $wildcards_replaces, $template_configurations['template_subject']);
                    $from_name = $template_configurations['email_from_name'];
                    $from = $template_configurations['email_from'];
                    $to = $To->email;
                    $to_name = $To->first_name . ' ' . $To->last_name;
                    $mailer_data['mail_from_name'] = $from_name;
                    $mailer_data['mail_to_name'] = $to_name;
                    $mailer_data['mail_to_user_id'] = $To->id_user;
                    $mailer_data['mail_from'] = $from;
                    $mailer_data['mail_to'] = $to;
                    $mailer_data['mail_subject'] = $subject;
                    $mailer_data['mail_message'] = $body;
                    $mailer_data['status'] = 0;
                    $mailer_data['send_date'] = currentDate();
                    $mailer_data['is_cron'] = 0;
                    $mailer_data['email_template_id'] = $template_configurations['id_email_template'];
                    //print_r($mailer_data);
                    $mailer_id = $this->Customer_model->addMailer($mailer_data);
                    //sending mail to bu owner
                    if ($mailer_data['is_cron'] == 0) {
                        //$mail_sent_status=sendmail($to, $subject, $body, $from);
                        $this->load->library('sendgridlibrary');
                        $mail_sent_status = $this->sendgridlibrary->sendemail($from_name, $from, $subject, $body, $to_name, $to, array(), $mailer_id);
                        if ($mail_sent_status == 1)
                            $this->Customer_model->updateMailer(array('status' => 1, 'mailer_id' => $mailer_id));
                    }
    
                }
                if(isset($data['external_users']) && count(explode(',', $data['external_users']))>0){  
                    if(isset($data['is_workflow']) && $data['is_workflow'] == 1){
                        $template_configurations_parent = $this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,  'module_key' => 'CONTRACT_WORKFLOW_ACTION_ITEM_CREATION_EXTERNAL_USER'));
                    }else{
                        $template_configurations_parent = $this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,  'module_key' => 'CONTRACT_REVIEW_ACTION_ITEM_CREATION_EXTERNAL_USER'));
                    }
                    if ($template_configurations_parent['total_records'] > 0) {
                        $template_configurations = $template_configurations_parent['data'][0];
                        $wildcards = $template_configurations['wildcards'];
                        $wildcards_replaces = array();
                        $external_users = explode(',', $data['external_users']);
                        foreach($external_users as $v){
                            $wildcards_replaces['first_name'] = $v;
                            $wildcards_replaces['contract_name'] = !empty($data['contract_id'])?$contract_info[0]['contract_name']:"";
                            $wildcards_replaces['action_item_responsible_user'] = $To->first_name . ' ' . $To->last_name . ' (' . $To->user_role_name . ')';
                            $wildcards_replaces['action_item_name'] = $data['action_item'];
                            if (isset($data['description']))
                                $wildcards_replaces['action_item_description'] = $data['description'];
                            $wildcards_replaces['action_item_due_date'] = dateFormat($data['due_date']);
                            if($data['module_id'] && $data['module_id']>0){
                                if($data['is_workflow']==1){
                                    $wildcards_replaces['contract_workflow_topic_name'] = $topic_info[0]['topic_name'];
                                    $wildcards_replaces['contract_workflow_module_name'] = $module_info[0]['module_name'];
                                }
                                else{
                                    $wildcards_replaces['contract_review_topic_name'] = $topic_info[0]['topic_name'];
                                    $wildcards_replaces['contract_review_module_name'] = $module_info[0]['module_name'];
                                }
                            }
                            $wildcards_replaces['action_item_created_user_name'] = $created_user_info->first_name . ' ' . $created_user_info->last_name . ' (' . $created_user_info->user_role_name . ')';
                            $wildcards_replaces['action_item_created_date'] = dateFormat($update['created_on']);
                            $wildcards_replaces['logo'] = $customer_logo;
                            $wildcards_replaces['year'] = date("Y");
                            $wildcards_replaces['url'] = WEB_BASE_URL . 'html';
                            $body = wildcardreplace($wildcards, $wildcards_replaces, $template_configurations['template_content']);
                            $subject = wildcardreplace($wildcards, $wildcards_replaces, $template_configurations['template_subject']);
                            $from_name = $template_configurations['email_from_name'];
                            $from = $template_configurations['email_from'];
                            $to = $v;
                            $mailer_data['mail_from_name'] = $from_name;
                            $mailer_data['mail_to_name'] = '';
                            $mailer_data['mail_to_user_id'] = '';
                            $mailer_data['mail_from'] = $from;
                            $mailer_data['mail_to'] = $to;
                            $mailer_data['mail_subject'] = $subject;
                            $mailer_data['mail_message'] = $body;
                            $mailer_data['status'] = 0;
                            $mailer_data['send_date'] = currentDate();
                            $mailer_data['is_cron'] = 0;
                            $mailer_data['email_template_id'] = $template_configurations['id_email_template'];
                            //print_r($mailer_data);
                            $mailer_id = $this->Customer_model->addMailer($mailer_data);
                            //sending mail to bu owner
                            if ($mailer_data['is_cron'] == 0) {
                                //$mail_sent_status=sendmail($to, $subject, $body, $from);
                                $this->load->library('sendgridlibrary');
                                $mail_sent_status = $this->sendgridlibrary->sendemail($from_name, $from, $subject, $body, $to_name, $to, array(), $mailer_id);
                                if ($mail_sent_status == 1)
                                    $this->Customer_model->updateMailer(array('status' => 1, 'mailer_id' => $mailer_id));
                            }
                        }
        
                    }
                }
            }
           
           
        }
        $result = array('status'=>TRUE, 'message' => $msg, 'data'=>'');
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function ReviewActionItemDelete_delete()
    {
        $data = $this->input->get();
        $msg='';
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $this->form_validator->add_rules('id_contract_review_action_item', array('required'=>$this->lang->line('id_contract_review_action_item_req')));
        $this->form_validator->add_rules('updated_by', array('required'=>$this->lang->line('updated_by_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['id_contract_review_action_item'])) {
            $data['id_contract_review_action_item'] = pk_decrypt($data['id_contract_review_action_item']);
            // if(!in_array($data['id_contract_review_action_item'],$this->session_user_contract_action_items)){
            //     $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
            //     $this->response($result, REST_Controller::HTTP_OK);
            // }
        }
        if(isset($data['updated_by'])) {
            $data['updated_by'] = pk_decrypt($data['updated_by']);
            if($data['updated_by']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_review_id'])) {
            $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
        }
        if(isset($data['parent_question_id'])) {
            $data['parent_question_id'] = pk_decrypt($data['parent_question_id']);
        }
        $delete_access=0;
        $res_del=$this->Contract_model->getContractReviewActionItems(array('id_contract_review_action_item'=>$data['id_contract_review_action_item']));
        if(isset($res_del['data'][0]['id_contract_review_action_item'])) {
            if (isset($this->session_user_info->id_user) && isset($this->session_user_info->user_role_id)) {
                if ($this->session_user_info->user_role_id == 6 || $this->session_user_info->user_role_id == 5 || $this->session_user_info->user_role_id == 7) {
                    if ($res_del['data'][0]['created_by'] == $this->session_user_info->id_user) {
                        $delete_access = 1;
                    }

                } else if ($this->session_user_info->user_role_id == 4 || $this->session_user_info->user_role_id == 3 ||
                $this->session_user_info->user_role_id == 8 || $this->session_user_info->user_role_id == 2 || $this->session_user_info->user_role_id == 1) {

                    if ($res_del['data'][0]['created_by'] == $this->session_user_info->id_user || $res_del['data'][0]['user_role_id'] > $this->session_user_info->user_role_id) {
                        $delete_access = 1;
                    }

                }
            } else {
                $delete_access = 1;
            }
            if ($res_del['data'][0]['status'] == 'completed')
                $delete_access = 0;
        }
        else{
            $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if($delete_access==0){
            $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['id_contract_review_action_item'])){
            $update['id_contract_review_action_item'] = $data['id_contract_review_action_item'];
            $update['updated_by'] = $data['updated_by'];
            $update['updated_on'] = currentDate();
            $update['item_status'] = 0;
            $this->Contract_model->updateContractReviewActionItem($update);
            $msg = $this->lang->line('contract_review_action_item_delete');
        }

        if(isset($data['parent_question_id']))
            $this->User_model->update_data('contract_question_review',array('updated_by'=>$this->session_user_info->id_user,"updated_on" => Currentdate()),array('contract_review_id'=>$data['contract_review_id'],'question_id'=>$data['parent_question_id']));    
        //echo '<pre>'.$this->db->last_query();exit;        
        $result = array('status'=>TRUE, 'message' => $msg, 'data'=>'');
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function ReviewActionItemUpdate_post()
    {
        $data = $this->input->post();
        //echo '<pre>';print_r($data);exit;
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $this->form_validator->add_rules('id_contract_review_action_item', array('required'=>$this->lang->line('id_contract_review_action_item_req')));
        $this->form_validator->add_rules('updated_by', array('required'=>$this->lang->line('updated_by_req')));
        $this->form_validator->add_rules('is_finish', array('required'=>$this->lang->line('is_finish_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['id_contract_review_action_item'])) {
            $data['id_contract_review_action_item'] = pk_decrypt($data['id_contract_review_action_item']);
            // if(!in_array($data['id_contract_review_action_item'],$this->session_user_contract_action_items)){
            //     $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'1');
            //     $this->response($result, REST_Controller::HTTP_OK);
            // }
        }
        if(isset($data['updated_by'])) {
            $data['updated_by'] = pk_decrypt($data['updated_by']);
            if($data['updated_by']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'3');
                //$this->response($result, REST_Controller::HTTP_OK);
            }
        }
        $update = array();

        if(isset($data['id_contract_review_action_item'])){
            $update['id_contract_review_action_item'] = $data['id_contract_review_action_item'];
            $update['updated_by'] = $data['updated_by'];
            $update['updated_on'] = currentDate();
            if($data['is_finish']==1)
                $update['status'] = 'completed';
            if(isset($data['comments']))
                $update['comments'] = $data['comments'];

            //$current_records = $this->Contract_model->getActionItemDetails(array('id_contract_review_action_item' => $data['id_contract_review_action_item']));


            $this->Contract_model->updateContractReviewActionItem($update);
            $msg = $this->lang->line('contract_review_action_item_update');
        }
        $action_item_info = $this->Contract_model->getContractReviewActionItems(array('id_contract_review_action_item'=>$data['id_contract_review_action_item']));
        //$module_info = $this->Module_model->getModuleName(array('language_id'=>1,'module_id'=>$data['module_id']));
        $contract_info = $this->Contract_model->getContractDetails(array('id_contract' => $data['contract_id']));
        //$topic_info = $this->Topic_model->getTopicName(array('topic_id'=>$data['topic_id']));
        $cust_admin_info = $this->User_model->getUserInfo(array('user_id' => $contract_info[0]['created_by']));
        $customer_details = $this->Customer_model->getCustomer(array('id_customer' => $cust_admin_info->customer_id));
        /*$cust_admin = $this->Customer_model->getCustomerAdminList(array('customer_id' => $customer_details[0]['id_customer']));
        $cust_admin = $cust_admin['data'][0];*/
        $action_item = $action_item_info['data'][0];
         /*echo 'action_info'.'<pre>';print_r($action_item);
         echo 'contract_info'.'<pre>';print_r($contract_info);
         echo 'cust_admin'.'<pre>';print_r($cust_admin_info);
         echo 'customer_detail'.'<pre>';print_r($customer_details);
         echo 'to_id'.'<pre>';print_r($topic_info);exit;*/
        if($customer_details[0]['company_logo']=='') {
            $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'company');
        }
        else{
            $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'profile', SMALL_IMAGE);
        }
        if(!empty($customer_details)){ $customer_name = $customer_details[0]['company_name']; }

        $To = $this->Contract_model->getActionItemDetails(array('id_contract_review_action_item' => $data['id_contract_review_action_item']));
        $user_info = $this->User_model->getUserInfo(array('user_id' => $To[0]['created_by'],'user_status'=>1));
        $commented_by = $this->User_model->getUserInfo(array('user_id' => $To[0]['updated_by'],'user_status'=>1));
        $resoponsible_user_info = $this->User_model->getUserInfo(array('user_id' => $To[0]['responsible_user_id'],'user_status'=>1));
      /* echo '<pre>';print_r($To);
        echo '<pre>';print_r($user_info);
        echo '<pre>';print_r($resoponsible_user_info);exit;*/
        // print_r($data);exit;
        if($data['is_finish']!=1 && $data['reference_type']=='contract'){
            if($To[0]['is_workflow'] == 1 ){                
                $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,'module_key'=>'CONTRACT_WORKFLOW_ACTION_ITEM_COMMENT'));
            }else{                
                $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,'module_key'=>'CONTRACT_REVIEW_ACTION_ITEM_COMMENT'));
            }
            if($template_configurations_parent['total_records']>0 && !empty($user_info)){
                $template_configurations=$template_configurations_parent['data'][0];
                $wildcards=$template_configurations['wildcards'];
                $wildcards_replaces=array();
                $wildcards_replaces['first_name']=$user_info->first_name;
                $wildcards_replaces['last_name']=$user_info->last_name;
                $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
                $wildcards_replaces['action_item_responsible_user']=$resoponsible_user_info->first_name.' '.$resoponsible_user_info->last_name.' ('.$resoponsible_user_info->user_role_name.')';
                $wildcards_replaces['action_item_name']=$action_item['action_item'];
                if(isset($To[0]['description']))
                    $wildcards_replaces['action_item_description']=$To[0]['description'];
                $wildcards_replaces['action_item_due_date']=dateFormat($To[0]['due_date']);
                $wildcards_replaces['action_item_comment']=$To[0]['comments'];
                $wildcards_replaces['action_item_comment_user_name']=$commented_by->first_name.' '.$commented_by->last_name.' ('.$commented_by->user_role_name.')';
                $wildcards_replaces['action_item_comment_date']=dateFormat($To[0]['updated_on']);
                // $wildcards_replaces['contract_review_topic_name']=$action_item['topic_name'];
                if($To[0]['is_workflow'] == 1){
                    $wildcards_replaces['contract_workflow_topic_name']=$action_item['topic_name'];
                    $wildcards_replaces['contract_workflow_module_name']=$action_item['module_name'];
                }
                else{
                    $wildcards_replaces['contract_review_topic_name']=$action_item['topic_name'];
                    $wildcards_replaces['contract_review_module_name']=$action_item['module_name'];
                }
                $wildcards_replaces['logo']=$customer_logo;
                $wildcards_replaces['year'] = date("Y");
                $wildcards_replaces['url']=WEB_BASE_URL.'html';
                $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                /*$from_name=SEND_GRID_FROM_NAME;
                $from=SEND_GRID_FROM_EMAIL;
                $from_name=$cust_admin['name'];
                $from=$cust_admin['email'];*/
                $from_name=$template_configurations['email_from_name'];
                $from=$template_configurations['email_from'];
                $to=$user_info->email;
                $to_name=$user_info->first_name.' '.$user_info->last_name;
                $mailer_data['mail_from_name']=$from_name;
                $mailer_data['mail_to_name']=$to_name;
                $mailer_data['mail_to_user_id']=$user_info->id_user;
                $mailer_data['mail_from']=$from;
                $mailer_data['mail_to']=$to;
                $mailer_data['mail_subject']=$subject;
                $mailer_data['mail_message']=$body;
                $mailer_data['status']=0;
                $mailer_data['send_date']=currentDate();
                $mailer_data['is_cron']=0;
                $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                //print_r($mailer_data);
                $mailer_id=$this->Customer_model->addMailer($mailer_data);
                if($mailer_data['is_cron']==0) {
                    //$mail_sent_status=sendmail($to, $subject, $body, $from);
                    $this->load->library('sendgridlibrary');
                    $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                    if($mail_sent_status==1)
                        $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                }

            }
            ////start action Item Comment Email for external users
            if(isset($data['external_users']) && count(explode(',', $data['external_users']))>0){   
                if($To[0]['is_workflow'] == 1){                    
                    $template_configurations_parent = $this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,  'module_key' => 'CONTRACT_WORKFLOW_ACTION_ITEM_COMMENT_EXTERNAL_USER'));
                }else{
                    $template_configurations_parent = $this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,  'module_key' => 'CONTRACT_REVIEW_ACTION_ITEM_COMMENT_EXTERNAL_USER'));
                }
                if ($template_configurations_parent['total_records'] > 0) {
                    $template_configurations = $template_configurations_parent['data'][0];
                    $wildcards = $template_configurations['wildcards'];
                    $wildcards_replaces = array();
                    $external_users = explode(',', $data['external_users']);
                    foreach($external_users as $v){
                        $wildcards_replaces['first_name'] = $v;
                        //$wildcards_replaces['last_name'] = $user_info->last_name;
                        $wildcards_replaces['contract_name'] = $contract_info[0]['contract_name'];
                        $wildcards_replaces['action_item_responsible_user'] = $resoponsible_user_info->first_name.' '.$resoponsible_user_info->last_name.' ('.$resoponsible_user_info->user_role_name.')';
                        // $wildcards_replaces['contract_review_module_name'] = $action_item['module_name'];
                        $wildcards_replaces['action_item_name'] = $action_item['action_item'];
                        if(isset($To[0]['description']))
                            $wildcards_replaces['action_item_description']=$To[0]['description'];
                        $wildcards_replaces['action_item_due_date']=dateFormat($To[0]['due_date']);
                        $wildcards_replaces['action_item_comment']=$To[0]['comments'];
                        $wildcards_replaces['action_item_comment_user_name']=$commented_by->first_name.' '.$commented_by->last_name.' ('.$commented_by->user_role_name.')';
                        $wildcards_replaces['action_item_comment_date']=dateFormat($To[0]['updated_on']);
                        // $wildcards_replaces['contract_review_topic_name']=$action_item['topic_name'];
                        if($To[0]['is_workflow'] == 1){
                            $wildcards_replaces['contract_workflow_topic_name']=$action_item['topic_name'];
                            $wildcards_replaces['contract_workflow_module_name']=$action_item['module_name'];
                        }
                        else{
                            $wildcards_replaces['contract_review_topic_name']=$action_item['topic_name'];
                            $wildcards_replaces['contract_review_module_name']=$action_item['module_name'];
                        }
                        $wildcards_replaces['logo']=$customer_logo;
                        $wildcards_replaces['year'] = date("Y");
                        $wildcards_replaces['url']=WEB_BASE_URL.'html';
                        $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                        $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                        $from_name = $template_configurations['email_from_name'];
                        $from = $template_configurations['email_from'];
                        $to = $v;
                        $mailer_data['mail_from_name'] = $from_name;
                        $mailer_data['mail_to_name'] = '';
                        $mailer_data['mail_to_user_id'] = '';
                        $mailer_data['mail_from'] = $from;
                        $mailer_data['mail_to'] = $to;
                        $mailer_data['mail_subject'] = $subject;
                        $mailer_data['mail_message'] = $body;
                        $mailer_data['status'] = 0;
                        $mailer_data['send_date'] = currentDate();
                        $mailer_data['is_cron'] = 0;
                        $mailer_data['email_template_id'] = $template_configurations['id_email_template'];
                        $mailer_id = $this->Customer_model->addMailer($mailer_data);
                        //sending mail to bu owner
                        if ($mailer_data['is_cron'] == 0) {
                            //$mail_sent_status=sendmail($to, $subject, $body, $from);
                            $this->load->library('sendgridlibrary');
                            $mail_sent_status = $this->sendgridlibrary->sendemail($from_name, $from, $subject, $body, $to_name, $to, array(), $mailer_id);
                            if ($mail_sent_status == 1)
                                $this->Customer_model->updateMailer(array('status' => 1, 'mailer_id' => $mailer_id));
                        }
                    }
        
                }
            }
        ////end actino Item Comment Email for external users
        }
        if($data['is_finish']!=1 && $data['reference_type']=='project'){
            // if($data['is_finish']!=1)
            $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,'module_key'=>'PROJECT_TASK_ACTION_ITEM_COMMENT'));
            if($template_configurations_parent['total_records']>0 && !empty($user_info)){
                $template_configurations=$template_configurations_parent['data'][0];
                $wildcards=$template_configurations['wildcards'];
                $wildcards_replaces=array();
                $wildcards_replaces['first_name']=$user_info->first_name;
                $wildcards_replaces['last_name']=$user_info->last_name;
                $wildcards_replaces['project_name']=$contract_info[0]['contract_name'];
                $wildcards_replaces['action_item_responsible_user']=$resoponsible_user_info->first_name.' '.$resoponsible_user_info->last_name.' ('.$resoponsible_user_info->user_role_name.')';
                $wildcards_replaces['action_item_name']=$action_item['action_item'];
                if(!empty($To[0]['description']))
                    $wildcards_replaces['action_item_description']=$To[0]['description'];
                $wildcards_replaces['action_item_due_date']=dateFormat($To[0]['due_date']);
                $wildcards_replaces['action_item_comment']=$To[0]['comments'];
                $wildcards_replaces['action_item_comment_user_name']=$commented_by->first_name.' '.$commented_by->last_name.' ('.$commented_by->user_role_name.')';
                $wildcards_replaces['action_item_comment_date']=dateFormat($To[0]['updated_on']);
                $wildcards_replaces['project_task_topic_name']=$action_item['topic_name'];
                $wildcards_replaces['project_task_module_name']=$action_item['module_name'];
                $wildcards_replaces['logo']=$customer_logo;
                $wildcards_replaces['year'] = date("Y");
                $wildcards_replaces['url']=WEB_BASE_URL.'html';
                $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                $from_name=$template_configurations['email_from_name'];
                $from=$template_configurations['email_from'];
                $to=$user_info->email;
                $to_name=$user_info->first_name.' '.$user_info->last_name;
                $mailer_data['mail_from_name']=$from_name;
                $mailer_data['mail_to_name']=$to_name;
                $mailer_data['mail_to_user_id']=$user_info->id_user;
                $mailer_data['mail_from']=$from;
                $mailer_data['mail_to']=$to;
                $mailer_data['mail_subject']=$subject;
                $mailer_data['mail_message']=$body;
                $mailer_data['status']=0;
                $mailer_data['send_date']=currentDate();
                $mailer_data['is_cron']=0;
                $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                //print_r($mailer_data);
                $mailer_id=$this->Customer_model->addMailer($mailer_data);
                if($mailer_data['is_cron']==0) {
                    //$mail_sent_status=sendmail($to, $subject, $body, $from);
                    $this->load->library('sendgridlibrary');
                    $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                    if($mail_sent_status==1)
                        $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                }

            }
            if(isset($data['external_users']) && count(explode(',', $data['external_users']))>0){   
                if($To[0]['is_workflow'] == 1){                    
                    $template_configurations_parent = $this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,  'module_key' => 'PROJECT_TASK_ACTION_ITEM_COMMENT_EXTERNAL_USER'));
                }
                if ($template_configurations_parent['total_records'] > 0) {
                    $template_configurations = $template_configurations_parent['data'][0];
                    $wildcards = $template_configurations['wildcards'];
                    $wildcards_replaces = array();
                    $external_users = explode(',', $data['external_users']);
                    foreach($external_users as $v){
                        $wildcards_replaces['first_name'] = $v;
                        $wildcards_replaces['project_name'] = $contract_info[0]['contract_name'];
                        $wildcards_replaces['action_item_responsible_user'] = $resoponsible_user_info->first_name.' '.$resoponsible_user_info->last_name.' ('.$resoponsible_user_info->user_role_name.')';
                        // $wildcards_replaces['contract_review_module_name'] = $action_item['module_name'];
                        $wildcards_replaces['action_item_name'] = $action_item['action_item'];
                        if(!empty($To[0]['description']))
                            $wildcards_replaces['action_item_description']=$To[0]['description'];
                        $wildcards_replaces['action_item_due_date']=dateFormat($To[0]['due_date']);
                        $wildcards_replaces['action_item_comment']=$To[0]['comments'];
                        $wildcards_replaces['action_item_comment_user_name']=$commented_by->first_name.' '.$commented_by->last_name.' ('.$commented_by->user_role_name.')';
                        $wildcards_replaces['action_item_comment_date']=dateFormat($To[0]['updated_on']);
                        $wildcards_replaces['project_task_topic_name']=$action_item['topic_name'];
                        $wildcards_replaces['project_task_module_name']=$action_item['module_name'];
                        $wildcards_replaces['logo']=$customer_logo;
                        $wildcards_replaces['year'] = date("Y");
                        $wildcards_replaces['url']=WEB_BASE_URL.'html';
                        $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                        $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                        $from_name = $template_configurations['email_from_name'];
                        $from = $template_configurations['email_from'];
                        $to = $v;
                        $mailer_data['mail_from_name'] = $from_name;
                        $mailer_data['mail_to_name'] = '';
                        $mailer_data['mail_to_user_id'] = '';
                        $mailer_data['mail_from'] = $from;
                        $mailer_data['mail_to'] = $to;
                        $mailer_data['mail_subject'] = $subject;
                        $mailer_data['mail_message'] = $body;
                        $mailer_data['status'] = 0;
                        $mailer_data['send_date'] = currentDate();
                        $mailer_data['is_cron'] = 0;
                        $mailer_data['email_template_id'] = $template_configurations['id_email_template'];
                        $mailer_id = $this->Customer_model->addMailer($mailer_data);
                        //sending mail to bu owner
                        if ($mailer_data['is_cron'] == 0) {
                            //$mail_sent_status=sendmail($to, $subject, $body, $from);
                            $this->load->library('sendgridlibrary');
                            $mail_sent_status = $this->sendgridlibrary->sendemail($from_name, $from, $subject, $body, $to_name, $to, array(), $mailer_id);
                            if ($mail_sent_status == 1)
                                $this->Customer_model->updateMailer(array('status' => 1, 'mailer_id' => $mailer_id));
                        }
                    }
        
                }
            }
        }
        
        if($data['is_finish']==1 && $data['reference_type']=='contract'){
            $finish_user = $this->User_model->getUserInfo(array('user_id' => $data['updated_by'],'user_status'=>1));
            if($To[0]['is_workflow'] == 1){
                $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,'module_key'=>'CONTRACT_WORKFLOW_ACTION_ITEM_FINISH'));
            }else{
                $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,'module_key'=>'CONTRACT_REVIEW_ACTION_ITEM_FINISH'));
            }
            if($template_configurations_parent['total_records']>0 && !empty($finish_user)){
                $template_configurations=$template_configurations_parent['data'][0];
                $wildcards=$template_configurations['wildcards'];
                $wildcards_replaces=array();
                $wildcards_replaces['first_name']=$user_info->first_name;
                $wildcards_replaces['last_name']=$user_info->last_name;
                $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
                $wildcards_replaces['action_item_responsible_user']=$resoponsible_user_info->first_name.' '.$resoponsible_user_info->last_name.' ('.$resoponsible_user_info->user_role_name.')';
                $wildcards_replaces['action_item_name']=$action_item['action_item'];
                if(isset($To[0]['description']))
                    $wildcards_replaces['action_item_description']=$To[0]['description'];
                $wildcards_replaces['action_item_due_date']=dateFormat($To[0]['due_date']);
                $wildcards_replaces['action_item_comment']=$data['comments'];
                $wildcards_replaces['action_item_finish_user_name']=$finish_user->first_name.' '.$finish_user->last_name.' ('.$finish_user->user_role_name.')';
                $wildcards_replaces['action_item_finish_date']=dateFormat($update['updated_on']);
                if($To[0]['is_workflow'] == 1){
                    $wildcards_replaces['contract_workflow_topic_name']=$action_item['topic_name'];
                    $wildcards_replaces['contract_workflow_module_name']=$action_item['module_name'];
                }
                else{
                    $wildcards_replaces['contract_review_topic_name']=$action_item['topic_name'];
                    $wildcards_replaces['contract_review_module_name']=$action_item['module_name'];
                }
                $wildcards_replaces['logo']=$customer_logo;
                $wildcards_replaces['year'] = date("Y");
                $wildcards_replaces['url']=WEB_BASE_URL.'html';
                $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                $from_name=$template_configurations['email_from_name'];
                $from=$template_configurations['email_from'];
                $to=$user_info->email;
                $to_name=$user_info->first_name.' '.$user_info->last_name;
                $mailer_data['mail_from_name']=$from_name;
                $mailer_data['mail_to_name']=$to_name;
                $mailer_data['mail_to_user_id']=$user_info->id_user;
                $mailer_data['mail_from']=$from;
                $mailer_data['mail_to']=$to;
                $mailer_data['mail_subject']=$subject;
                $mailer_data['mail_message']=$body;
                $mailer_data['status']=0;
                $mailer_data['send_date']=currentDate();
                $mailer_data['is_cron']=0;
                $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                //print_r($mailer_data);
                $mailer_id=$this->Customer_model->addMailer($mailer_data);
                if($mailer_data['is_cron']==0) {
                    //$mail_sent_status=sendmail($to, $subject, $body, $from);
                    $this->load->library('sendgridlibrary');
                    $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                    if($mail_sent_status==1)
                        $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                }

            }
            ////start action Item Finish Email for external users
            if(isset($data['external_users']) && count(explode(',', $data['external_users']))>0){  
                if($To[0]['is_workflow'] == 1){
                    $template_configurations_parent = $this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,  'module_key' => 'CONTRACT_WORKFLOW_ACTION_ITEM_FINISH_EXTERNAL_USER'));
                }else{
                    $template_configurations_parent = $this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,  'module_key' => 'CONTRACT_REVIEW_ACTION_ITEM_FINISH_EXTERNAL_USER'));
                }           
                if ($template_configurations_parent['total_records'] > 0) {
                    $template_configurations = $template_configurations_parent['data'][0];
                    $wildcards = $template_configurations['wildcards'];
                    $wildcards_replaces = array();
                    $external_users = explode(',', $data['external_users']);
                    foreach($external_users as $v){
                        $wildcards_replaces['first_name'] = $v;
                        $wildcards_replaces['contract_name'] = $contract_info[0]['contract_name'];
                        $wildcards_replaces['action_item_responsible_user']=$resoponsible_user_info->first_name.' '.$resoponsible_user_info->last_name.' ('.$resoponsible_user_info->user_role_name.')';
                        $wildcards_replaces['action_item_name']=$action_item['action_item'];
                        if(isset($To[0]['description']))
                            $wildcards_replaces['action_item_description']=$To[0]['description'];
                        $wildcards_replaces['action_item_due_date']=dateFormat($To[0]['due_date']);
                        $wildcards_replaces['action_item_comment']=$data['comments'];
                        $wildcards_replaces['action_item_finish_user_name']=$finish_user->first_name.' '.$finish_user->last_name.' ('.$finish_user->user_role_name.')';
                        $wildcards_replaces['action_item_finish_date']=dateFormat($update['updated_on']);
                        if($To[0]['is_workflow'] == 1){
                            $wildcards_replaces['contract_workflow_topic_name']=$action_item['topic_name'];
                            $wildcards_replaces['contract_workflow_module_name']=$action_item['module_name'];
                        }
                        else{
                            $wildcards_replaces['contract_review_topic_name']=$action_item['topic_name'];
                            $wildcards_replaces['contract_review_module_name']=$action_item['module_name'];
                        }
                        $wildcards_replaces['logo']=$customer_logo;
                        $wildcards_replaces['year'] = date("Y");
                        $wildcards_replaces['url'] = WEB_BASE_URL . 'html';
                        $body = wildcardreplace($wildcards, $wildcards_replaces, $template_configurations['template_content']);
                        $subject = wildcardreplace($wildcards, $wildcards_replaces, $template_configurations['template_subject']);
                        $from_name = $template_configurations['email_from_name'];
                        $from = $template_configurations['email_from'];
                        $to = $v;
                        $mailer_data['mail_from_name'] = $from_name;
                        $mailer_data['mail_to_name'] = '';
                        $mailer_data['mail_to_user_id'] = '';
                        $mailer_data['mail_from'] = $from;
                        $mailer_data['mail_to'] = $to;
                        $mailer_data['mail_subject'] = $subject;
                        $mailer_data['mail_message'] = $body;
                        $mailer_data['status'] = 0;
                        $mailer_data['send_date'] = currentDate();
                        $mailer_data['is_cron'] = 0;
                        $mailer_data['email_template_id'] = $template_configurations['id_email_template'];
                        $mailer_id = $this->Customer_model->addMailer($mailer_data);
                        //sending mail to bu owner
                        if ($mailer_data['is_cron'] == 0) {
                            //$mail_sent_status=sendmail($to, $subject, $body, $from);
                            $this->load->library('sendgridlibrary');
                            $mail_sent_status = $this->sendgridlibrary->sendemail($from_name, $from, $subject, $body, $to_name, $to, array(), $mailer_id);
                            if ($mail_sent_status == 1)
                                $this->Customer_model->updateMailer(array('status' => 1, 'mailer_id' => $mailer_id));
                        }
                    }
        
                }
            }
        ////end actino Item Finish Email for external users

        }
        if($data['is_finish']==1 && $data['reference_type']=='project'){
            $finish_user = $this->User_model->getUserInfo(array('user_id' => $data['updated_by'],'user_status'=>1));
            $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,'module_key'=>'PROJECT_TASK_ACTION_ITEM_FINISH'));
            if($template_configurations_parent['total_records']>0 && !empty($finish_user)){
                $template_configurations=$template_configurations_parent['data'][0];
                $wildcards=$template_configurations['wildcards'];
                $wildcards_replaces=array();
                $wildcards_replaces['first_name']=$user_info->first_name;
                $wildcards_replaces['last_name']=$user_info->last_name;
                $wildcards_replaces['project_name']=$contract_info[0]['contract_name'];
                $wildcards_replaces['action_item_responsible_user']=$resoponsible_user_info->first_name.' '.$resoponsible_user_info->last_name.' ('.$resoponsible_user_info->user_role_name.')';
                $wildcards_replaces['action_item_name']=$action_item['action_item'];
                if(isset($To[0]['description']))
                    $wildcards_replaces['action_item_description']=$To[0]['description'];
                $wildcards_replaces['action_item_due_date']=dateFormat($To[0]['due_date']);
                $wildcards_replaces['action_item_comment']=$data['comments'];
                $wildcards_replaces['action_item_finish_user_name']=$finish_user->first_name.' '.$finish_user->last_name.' ('.$finish_user->user_role_name.')';
                $wildcards_replaces['action_item_finish_date']=dateFormat($update['updated_on']);
                $wildcards_replaces['project_task_topic_name']=$action_item['topic_name'];
                $wildcards_replaces['project_task_module_name']=$action_item['module_name'];
                
                $wildcards_replaces['logo']=$customer_logo;
                $wildcards_replaces['year'] = date("Y");
                $wildcards_replaces['url']=WEB_BASE_URL.'html';
                $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                $from_name=$template_configurations['email_from_name'];
                $from=$template_configurations['email_from'];
                $to=$user_info->email;
                $to_name=$user_info->first_name.' '.$user_info->last_name;
                $mailer_data['mail_from_name']=$from_name;
                $mailer_data['mail_to_name']=$to_name;
                $mailer_data['mail_to_user_id']=$user_info->id_user;
                $mailer_data['mail_from']=$from;
                $mailer_data['mail_to']=$to;
                $mailer_data['mail_subject']=$subject;
                $mailer_data['mail_message']=$body;
                $mailer_data['status']=0;
                $mailer_data['send_date']=currentDate();
                $mailer_data['is_cron']=0;
                $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                //print_r($mailer_data);
                $mailer_id=$this->Customer_model->addMailer($mailer_data);
                if($mailer_data['is_cron']==0) {
                    //$mail_sent_status=sendmail($to, $subject, $body, $from);
                    $this->load->library('sendgridlibrary');
                    $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                    if($mail_sent_status==1)
                        $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                }

            }
            if(isset($data['external_users']) && count(explode(',', $data['external_users']))>0){  
                if($To[0]['is_workflow'] == 1){
                    $template_configurations_parent = $this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,  'module_key' => 'PROJECT_TASK_ACTION_ITEM_FINISH_EXTERNAL_USER'));
                }          
                if ($template_configurations_parent['total_records'] > 0) {
                    $template_configurations = $template_configurations_parent['data'][0];
                    $wildcards = $template_configurations['wildcards'];
                    $wildcards_replaces = array();
                    $external_users = explode(',', $data['external_users']);
                    foreach($external_users as $v){
                        $wildcards_replaces['first_name'] = $v;
                        $wildcards_replaces['project_name'] = $contract_info[0]['contract_name'];
                        $wildcards_replaces['action_item_responsible_user']=$resoponsible_user_info->first_name.' '.$resoponsible_user_info->last_name.' ('.$resoponsible_user_info->user_role_name.')';
                        $wildcards_replaces['action_item_name']=$action_item['action_item'];
                        if(isset($To[0]['description']))
                            $wildcards_replaces['action_item_description']=$To[0]['description'];
                        $wildcards_replaces['action_item_due_date']=dateFormat($To[0]['due_date']);
                        $wildcards_replaces['action_item_comment']=$data['comments'];
                        $wildcards_replaces['action_item_finish_user_name']=$finish_user->first_name.' '.$finish_user->last_name.' ('.$finish_user->user_role_name.')';
                        $wildcards_replaces['action_item_finish_date']=dateFormat($update['updated_on']);
                        $wildcards_replaces['project_task_topic_name']=$action_item['topic_name'];
                        $wildcards_replaces['project_task_module_name']=$action_item['module_name'];
                        $wildcards_replaces['logo']=$customer_logo;
                        $wildcards_replaces['year'] = date("Y");
                        $wildcards_replaces['url'] = WEB_BASE_URL . 'html';
                        $body = wildcardreplace($wildcards, $wildcards_replaces, $template_configurations['template_content']);
                        $subject = wildcardreplace($wildcards, $wildcards_replaces, $template_configurations['template_subject']);
                        $from_name = $template_configurations['email_from_name'];
                        $from = $template_configurations['email_from'];
                        $to = $v;
                        $mailer_data['mail_from_name'] = $from_name;
                        $mailer_data['mail_to_name'] = '';
                        $mailer_data['mail_to_user_id'] = '';
                        $mailer_data['mail_from'] = $from;
                        $mailer_data['mail_to'] = $to;
                        $mailer_data['mail_subject'] = $subject;
                        $mailer_data['mail_message'] = $body;
                        $mailer_data['status'] = 0;
                        $mailer_data['send_date'] = currentDate();
                        $mailer_data['is_cron'] = 0;
                        $mailer_data['email_template_id'] = $template_configurations['id_email_template'];
                        $mailer_id = $this->Customer_model->addMailer($mailer_data);
                        //sending mail to bu owner
                        if ($mailer_data['is_cron'] == 0) {
                            //$mail_sent_status=sendmail($to, $subject, $body, $from);
                            $this->load->library('sendgridlibrary');
                            $mail_sent_status = $this->sendgridlibrary->sendemail($from_name, $from, $subject, $body, $to_name, $to, array(), $mailer_id);
                            if ($mail_sent_status == 1)
                                $this->Customer_model->updateMailer(array('status' => 1, 'mailer_id' => $mailer_id));
                        }
                    }
        
                }
            }
        }

        $result = array('status'=>TRUE, 'message' => $msg, 'data'=>'');
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function contractContributor_post(){
        $data = $this->input->post();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));
        $this->form_validator->add_rules('module_id', array('required'=>$this->lang->line('module_id_req')));
        $this->form_validator->add_rules('created_by', array('required'=>$this->lang->line('created_by_req')));
        //$this->form_validator->add_rules('contributors_add', array('required'=>$this->lang->line('contributors_add')));
        //$this->form_validator->add_rules('contributors_remove', array('required'=>$this->lang->line('contributors_remove')));
        $data['contributors_add']=isset($data['contributors_add'])?$data['contributors_add']:'';
        $data['contributors_remove']=isset($data['contributors_remove'])?$data['contributors_remove']:'';
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['module_id'])) {
            $data['module_id'] = pk_decrypt($data['module_id']);
            if(!in_array($data['module_id'],$this->session_user_contract_review_modules)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['created_by'])) {
            $data['created_by'] = pk_decrypt($data['created_by']);
            if($data['created_by']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_contract'])) {
            $data['id_contract'] = pk_decrypt($data['id_contract']);
            if(!in_array($data['id_contract'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['topic_id'])) {
            $data['topic_id'] = pk_decrypt($data['topic_id']);
            if(!in_array($data['topic_id'],$this->session_user_contract_review_topics)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($this->session_user_info->customer_id!=$data['customer_id']){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }

        }
        if(isset($data['contract_review_id'])) {
            $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
            if($data['contract_review_id']>0 && !in_array($data['contract_review_id'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>"You don't have permissions to this module 8", 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        $data['contributors_add'] = $data['expert']['contributors_add'];
        $data['contributors_remove'] = $data['expert']['contributors_remove'];
        //.','.$data['validator']['contributors_add'].','.$data['provider']['contributors_add'];
        if(isset($data['validator']['contributors_add']) && $data['validator']['contributors_add']!='')
            $data['contributors_add'] .= ','.$data['validator']['contributors_add'];
        if(isset($data['provider']['contributors_add']) && $data['provider']['contributors_add']!='')
            $data['contributors_add'] .= ','.$data['provider']['contributors_add'];
        if(isset($data['validator']['contributors_remove']) && $data['validator']['contributors_remove']!='')
            $data['contributors_remove'] .= ','.$data['validator']['contributors_remove'];
        if(isset($data['provider']['contributors_remove']) && $data['provider']['contributors_remove']!='')
            $data['contributors_remove'] .= ','.$data['provider']['contributors_remove'];
        
        if($data['contributors_add'][0] == ',')
            $data['contributors_add'] = ltrim($data['contributors_add'], $data['contributors_add'][0]);
        if($data['contributors_remove'][0] == ',')
            $data['contributors_remove'] = ltrim($data['contributors_remove'], $data['contributors_remove'][0]);
        $contributors_add_exp=explode(',',$data['contributors_add']);
        $contributors_add_exp_new=array();
        foreach($contributors_add_exp as $k=>$v){
            $contributors_add_exp_new[]=$cntr=pk_decrypt($v);
            /*if(!in_array($cntr,$this->session_user_contributors)){
                $result = array('status'=>FALSE, 'error' =>"You don't have permissions to this module 9", 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }*/
        }
        $data['contributors_add']=implode(',',$contributors_add_exp_new);

        $contributors_remove_exp=explode(',',$data['contributors_remove']);
        // echo '<pre>'.print_r($contributors_remove_exp);exit;
        $contributors_remove_exp_new=array();
        foreach($contributors_remove_exp as $k=>$v){
            $contributors_remove_exp_new[]=$cntr=pk_decrypt($v);
            /*if($cntr>0 && !in_array($cntr,$this->session_user_contributors)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }*/
        }
        $data['contributors_remove']=implode(',',$contributors_remove_exp_new);
        $update = array(
            'contract_id' => $data['contract_id'],
            'created_by' => $data['created_by'],
            'contributors_add' => explode(',',$data['contributors_add']),
            'contributors_remove' => explode(',',$data['contributors_remove']),
            'module_id' => $data['module_id'],
            'created_on' => currentDate()
        );
        //echo 'update <pre>'.print_r($update);exit;
        if(isset($data['contract_review_id']))
            $update['contract_review_id']=$data['contract_review_id'];

        $to_id = $this->Contract_model->addContractContributors($update);
        $bu_info = $this->Contract_model->getContractCurrentDetails(array('contract_id'=>$update['contract_id']));
        /*if(count($to_id)>0)
            $this->Business_unit_model->addBusinessUnitUser(array('status'=>1,'created_by'=>$update['created_by'],'business_unit_id'=>$bu_info[0]['business_unit_id'],'users'=>$to_id));*/
        
        $module_id = $data['module_id'];
        $q = 'SELECT * from contract_user cu JOIN user u on u.id_user = cu.user_id WHERE cu.module_id ='.$module_id.' AND u.contribution_type = 1 AND cu.status = 1';
        $validators_on_module = $this->User_model->custom_query($q);
        $send['contract_review_id'] = $data['contract_review_id'];
        $send['module_id'] = $module_id;
        $module_progress = $this->Contract_model->progress($send);
        if(count($validators_on_module) > 0 && (int)$module_progress == 100)
            $this->User_model->update_data('module',array('module_status'=>2),array('id_module'=>$module_id));  
        if(count($validators_on_module) == 0)
            $this->User_model->update_data('module',array('module_status'=>1),array('id_module'=>$module_id)); 

        $msg = 'Contributor Updated Successfully.';

        //Mailing...
        $module_info = $this->Module_model->getModuleName(array('language_id'=>1,'module_id'=>$data['module_id']));
        $contract_info = $this->Contract_model->getContractDetails(array('id_contract' => $data['contract_id']));
        $cust_admin_info = $this->User_model->getUserInfo(array('user_id' => $contract_info[0]['created_by']));
        $customer_details = $this->Customer_model->getCustomer(array('id_customer' => $cust_admin_info->customer_id));
        /*$cust_admin = $this->Customer_model->getCustomerAdminList(array('customer_id' => $customer_details[0]['id_customer']));
       $cust_admin = $cust_admin['data'][0];*/

        if($customer_details[0]['company_logo']=='') {
            $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'company');
        }
        else{
            $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'profile', SMALL_IMAGE);

        }
        if(!empty($customer_details)){ $customer_name = $customer_details[0]['company_name']; }
        foreach($to_id as $k => $v)
        {
            $To = $this->User_model->getUserInfo(array('user_id' => $to_id[$k],'user_status'=>1));

            //sending mail to bu owner
            if($module_info[0]['is_workflow'] == 1){
                $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,'module_key'=>'CONTRACT_WORKFLOW_ASSIGN_MODULE'));
            }else{
                $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,'module_key'=>'CONTRACT_REVIEW_ASSIGN_MODULE'));
            }
            if($template_configurations_parent['total_records']>0 && !empty($To)){
                $template_configurations=$template_configurations_parent['data'][0];
                $wildcards=$template_configurations['wildcards'];
                $wildcards_replaces=array();
                $wildcards_replaces['first_name']=$To->first_name;
                $wildcards_replaces['last_name']=$To->last_name;
                $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
                // $wildcards_replaces['contract_review_assigned_module_user_name']=$To->first_name.' '.$To->last_name.' ('.$To->user_role_name.')';
                if($module_info[0]['is_workflow'] == 1){
                    $wildcards_replaces['contract_workflow_assigned_module_user_name']=$To->first_name.' '.$To->last_name.' ('.$To->user_role_name.')';
                }
                else{
                    $wildcards_replaces['contract_review_assigned_module_user_name']=$To->first_name.' '.$To->last_name.' ('.$To->user_role_name.')';
                }
                $wildcards_replaces['module_name']=$module_info[0]['module_name'];
                $wildcards_replaces['logo']=$customer_logo;
                $wildcards_replaces['year'] = date("Y");
                $wildcards_replaces['url']=WEB_BASE_URL.'html';
                $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                /*$from_name=SEND_GRID_FROM_NAME;
                $from=SEND_GRID_FROM_EMAIL;
                $from_name=$cust_admin['name'];
                $from=$cust_admin['email'];*/
                $from_name=$template_configurations['email_from_name'];
                $from=$template_configurations['email_from'];
                $to=$To->email;
                $to_name=$To->first_name.' '.$To->last_name;
                $mailer_data['mail_from_name']=$from_name;
                $mailer_data['mail_to_name']=$to_name;
                $mailer_data['mail_to_user_id']=$To->id_user;
                $mailer_data['mail_from']=$from;
                $mailer_data['mail_to']=$to;
                $mailer_data['mail_subject']=$subject;
                $mailer_data['mail_message']=$body;
                $mailer_data['status']=0;
                $mailer_data['send_date']=currentDate();
                $mailer_data['is_cron']=0;
                $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                //print_r($mailer_data);
                $mailer_id=$this->Customer_model->addMailer($mailer_data);
                //sending mail to bu owner
                if($mailer_data['is_cron']==0) {
                    //$mail_sent_status=sendmail($to, $subject, $body, $from);
                    $this->load->library('sendgridlibrary');
                    $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                    if($mail_sent_status==1)
                        $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                }

            }
        }
        $result = array('status'=>TRUE, 'message' => $msg, 'data'=>'');
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function users_get()
    {
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['type']) && $data['type']=='buowner'){

        }
        else
            $this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));

        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        // print_r($this->session_user_contracts);
        // print_r(pk_decrypt($data['contract_id']));exit;

        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'0');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($this->session_user_info->customer_id!=$data['customer_id']){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['business_unit_id'])) {
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            if(!in_array($data['business_unit_id'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'4');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        $user_role_id = 0;
        if(isset($data['user_role_id'])){ $user_role_id = $data['user_role_id']; unset($data['user_role_id']); }

        if(isset($data['type']) && $data['type']=='buowner'){
            $data['user_role_id'] = 3;
        }
        else {
            $contract_details = $this->Contract_model->getContractDetails(array('id_contract' => $data['contract_id']));
            $data['business_unit_id'] = $contract_details[0]['business_unit_id'];
            //echo '<pre>';print_r($contract_details);
            //$data['user_role_id'] = 5; //to get only contributors
        }
        if(isset($data['type']) && $data['type']=='contributor'){
            $data['user_role_id']=5;
            unset($data['business_unit_id']);
            $user_role_id = 0;
        }
        // print_r($data);exit;
        if($data['forDocumentIntelligence']==1 && empty($data['array_buids'])){
            $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>array());
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['type']) && $data['type']=='buowner'){
        //    $get_contributor_user_ids=$this->User_model->check_record_selected('user_id','contract_user',array('contract_id'=>$data['contract_id'],'status'=>1));
           $get_contributor_user_ids=$this->Project_model->getcontractUsers(array('contract_id'=>$data['contract_id']));
           $user_ids=array_filter(array_column($get_contributor_user_ids,'user_id'));
           if(!empty($user_ids)){
               $data['not_user_ids']=$user_ids;
           }
        }
        if(!empty($data['array_buids'])){
            $bu_ids = array_map(function($i){ return pk_decrypt($i); },explode(",",$data['array_buids']));
            if(!empty($bu_ids)){
                $data['array_bu_ids']=$bu_ids;
                unset($data['business_unit_id']);
            }
        }
        if(!empty($data['forAdvacedFilter']) && in_array($this->session_user_info->user_role_id,array(3))){
            $data['user_id']=$this->session_user_info->id_user;
        }
        $result = $this->Contract_model->getBusinessUnitUsers($data);
        if(isset($data['customer_id']) && $user_role_id==2){
            $customer_users = $this->Contract_model->getCustomerUsers(array('customer_id' => $data['customer_id'],'user_role_id' => $user_role_id));
            $result = array_merge($customer_users,$result);
        }
        foreach($result as $k=>$v){
            $result[$k]['id_user']=pk_encrypt($result[$k]['id_user']);
            $result[$k]['user_role_id']=pk_encrypt($result[$k]['user_role_id']);
        }
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function reviewlevelusers_get(){
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['type']) && $data['type']=='buowner'){

        }
        else
            $this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));

        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
            if($data['user_role_id'] == 3 || $data['user_role_id'] == 4)
                $data['user_not'] = $this->session_user_id;
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($this->session_user_info->customer_id!=$data['customer_id']){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['business_unit_id'])) {
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            /*if(!in_array($data['business_unit_id'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }*/
        } //commented to skip this condition for contributor add
        $user_role_id = 0;
        if(isset($data['user_role_id'])){
            $user_role_id = $data['user_role_id'];
            //unset($data['user_role_id']);
        }

        if(isset($data['type']) && $data['type']=='buowner'){
            $data['user_role_id'] = 3;
        }
        else if($data['type']=='!contributor') {
            $contract_details = $this->Contract_model->getContractDetails(array('id_contract' => $data['contract_id']));
            $data['business_unit_id'] = $contract_details[0]['business_unit_id'];
            //echo '<pre>';print_r($contract_details);
            //$data['user_role_id'] = 5; //to get only contributors
        }

        $contract_owner_delegate = $this->User_model->check_record_selected('contract_owner_id,delegate_id','contract',array('id_contract'=>$data['contract_id']));
        // echo '<pre>'.print_r($contract_owner_delegate);exit;
        ///Expert Contributor List follows
        $data['contributor_type'] = 'expert';
        $expert_users = $this->Contract_model->getCustomerUsers_add($data);//echo '<pre>'.$this->db->last_query();exit;
        //echo '<pre>'.print_r($expert_users);exit;

        $expert_users_new = array();$i=0;
        foreach($expert_users as $k=>$v){
            if($contract_owner_delegate[0]['contract_owner_id']==$expert_users[$k]['id_user'] ||$contract_owner_delegate[0]['delegate_id']==$expert_users[$k]['id_user'])
                continue;
            $expert_users_new[$i]['id_user']=pk_encrypt($expert_users[$k]['id_user']);
            $expert_users_new[$i]['user_role_id']=pk_encrypt($expert_users[$k]['user_role_id']);
            $expert_users_new[$i]['contributor_user_name']=$expert_users[$k]['showname'];
            $expert_users_new[$i]['name']=$expert_users[$k]['name'];
            $expert_users_new[$i]['id_business_unit']=pk_encrypt($expert_users[$k]['id_business_unit']);
            $i++;
        }
        $expert_users = $expert_users_new;
        ///Validation Contributor List follows
        $data['contributor_type'] = 'validator';//echo '<pre>'.print_r($data);exit;
        $validation_users = $this->Contract_model->getCustomerUsers_add($data);//echo '<pre>'.$this->db->last_query();exit;
        //echo '<pre>'.print_r($validation_users);exit;
        $validation_users_new = array();$i=0;
        foreach($validation_users as $k=>$v){
            if($contract_owner_delegate[0]['contract_owner_id']==$validation_users[$k]['id_user'] ||$contract_owner_delegate[0]['delegate_id']==$validation_users[$k]['id_user'])
                continue;
            $validation_users_new[$i]['id_user']=pk_encrypt($validation_users[$k]['id_user']);
            $validation_users_new[$i]['user_role_id']=pk_encrypt($validation_users[$k]['user_role_id']);
            $validation_users_new[$i]['contributor_user_name']=$validation_users[$k]['showname'];
            $validation_users_new[$i]['name']=$validation_users[$k]['name'];
            $validation_users_new[$i]['id_business_unit']=pk_encrypt($validation_users[$k]['id_business_unit']);
            $i++;
        }
        $validation_users = $validation_users_new;
        ///Provider Contributor List follows
        $data['contributor_type'] = 'provider';
        $contract_provider = $this->User_model->check_record('contract',array('id_contract'=>isset($data['contract_id'])?$data['contract_id']:0));
        // print_r($contract_provider);exit;
        if(isset($contract_provider[0]))
            $data['provider'] = array($contract_provider[0]['provider_name']);
        unset($data['business_unit_id']);
        if(!empty($data['id_provider'])){
            $data['id_provider']=pk_decrypt($data['id_provider']);
            $data['provider']=array($data['id_provider']);
        }
        // $data['project_id']='U2FsdGVkX19UaGVAMTIzNNgfXZrdZyWSXUp8JzFSVvo=';
        // $data['type']='project_provider';
        if(!empty($data['project_id']) && empty($data['id_provider'])){
            $data['project_id']=pk_decrypt($data['project_id']);
            $get_project_providers=$this->Project_model->getactiveprojectProvider(array('project_id'=>$data['project_id']));
            $data['provider_data']=array_column($get_project_providers,'provider_id');
            if(empty($data['provider_data'])){
                unset($data['provider']);
            }
            else{
                $data['provider']=$data['provider_data'];
            }
        }
        $provider_users = $this->Contract_model->getCustomerUsers_add($data);//echo '<pre>'.$this->db->last_query();exit;
        foreach($provider_users as $k=>$v){
            $provider_users[$k]['id_provider']=pk_encrypt($provider_users[$k]['id_provider']);
            $provider_users[$k]['id_user']=pk_encrypt($provider_users[$k]['id_user']);
            $provider_users[$k]['user_role_id']=pk_encrypt($provider_users[$k]['user_role_id']);
            $provider_users[$k]['contributor_user_name']=$provider_users[$k]['showname'];
            //$provider_users[$k]['id_business_unit']=pk_encrypt($provider_users[$k]['id_business_unit']);
        }

        if(!empty($data['project_id']) && empty($data['id_provider'])){
            if(count($get_project_providers)==0){
                $provider_users=array();
            }
        }
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>array('expert'=>$expert_users,'validator'=>$validation_users,'provider'=>$provider_users));
        //$result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$expert_users);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function contractreviewusers_get()
    {
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));
        //$this->form_validator->add_rules('contract_review_id', array('required'=>$this->lang->line('contract_review_id_req')));
        $this->form_validator->add_rules('module_id', array('required'=>$this->lang->line('module_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['module_id'])) {
            $data['module_id'] = pk_decrypt($data['module_id']);
            if(!in_array($data['module_id'],$this->session_user_contract_review_modules)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_id'])) {
            $data['user_id'] = pk_decrypt($data['user_id']);
            if($data['user_id']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['type']) && $data['type']=='buowner'){
            $data['user_role_id'] = 3;
        }
        else {
            $data['user_role_id'] = 5;
        }
        $result = $this->Contract_model->getContractReviewUsers($data);
        foreach($result as $k=>$v){
            $result[$k]['id_user']=pk_encrypt($result[$k]['id_user']);
            $result[$k]['user_role_id']=pk_encrypt($result[$k]['user_role_id']);
        }
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function initializeReview_get()
    {
        $data = $this->input->get();
        // echo 'data'.'<pre>';print_r($data);exit;
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));
        $this->form_validator->add_rules('created_by', array('required'=>$this->lang->line('created_by_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'1');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($this->session_user_info->customer_id!=$data['customer_id']){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['created_by'])) {
            $data['created_by'] = pk_decrypt($data['created_by']);
            if($data['created_by']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'3');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_review_id'])) {
            $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
            if(!in_array($data['contract_review_id'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'4');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['calender_id']) && $data['calender_id'] != null && $data['calender_id'] != '') {
            $data['calender_id'] = pk_decrypt($data['calender_id']);
        }
        if(isset($data['id_contract_workflow']) && $data['id_contract_workflow'] !='0') {
            $data['id_contract_workflow'] = pk_decrypt($data['id_contract_workflow']);
            $check_contract_review = $this->Contract_model->getContractReview(array(
                'contract_id' => $data['contract_id'],
                'status' => 'workflow in progress',
                'contract_workflow_id' => $data['id_contract_workflow'],
                'is_workflow' => 1
            ));
            $msg = $this->lang->line('workflow_initiate');
            //Updating contract workflow
            $this->User_model->update_data('contract_workflow',array('workflow_status'=>'workflow in progress'),array('id_contract_workflow'=>$data['id_contract_workflow']));
        }else{
            $check_contract_review = $this->Contract_model->getContractReview(array(
                'contract_id' => $data['contract_id'],
                'status' => 'review in progress',
                'contract_workflow_id' => 0,
                'is_workflow' => 0
            ));
            $msg = $this->lang->line('review_initiate');
        }
        // echo '<pre>'.$this->db->last_query();exit;
        if(!empty($check_contract_review)){
            $this->Contract_model->updateContract(array(
                'id_contract' => $data['contract_id'],
                'contract_status' => 'review in progress', //pending review from 2 time
                'updated_by' => $data['created_by'],
                'updated_on' => currentDate(),
                'reminder_type' => NULL,
                'reminder_sent_on' => NULL,
                'reminder_date1' => NULL,
                'reminder_date2' => NULL,
                'reminder_date3' => NULL
            ));

            $result = array('status'=>TRUE, 'message' => $msg, 'data'=>pk_encrypt($check_contract_review[0]['id_contract_review']));
            $this->response($result, REST_Controller::HTTP_OK); exit;
        }
        //echo '<pre>'.$this->db->last_query();exit;
        $contract_update_data = array(
            'id_contract' => $data['contract_id'],
            'updated_by' => $data['created_by'],
            'updated_on' => currentDate(),
            'reminder_type' => NULL,
            'reminder_sent_on' => NULL,
            'reminder_date1' => NULL,
            'reminder_date2' => NULL,
            'reminder_date3' => NULL
        );
        if($data['is_workflow'] == 0){
            $contract_update_data['contract_status'] = 'review in progress';
        }
        $this->Contract_model->updateContract($contract_update_data);
        if(isset($data['is_workflow']) && $data['is_workflow'] == 1 && isset($data['id_contract_workflow']))
            $review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $data['contract_id'],'contract_workflow_id'=>$data['id_contract_workflow'],'is_workflow'=>1,'contract_review_status'=>'finished','order' => 'DESC'));
        else
            $review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $data['contract_id'],'is_workflow'=>0,'contract_review_status'=>'finished','order' => 'DESC'));
        if(!empty($review) && isset($review[0]['id_contract_review']) && $review[0]['id_contract_review']!='' && $review[0]['id_contract_review']!=0) {
            $previous_review_id=$review[0]['id_contract_review'];
        }
        $contract_info = $this->Contract_model->getContractDetails(array('id_contract' => $data['contract_id']));
        $contract_review_data = array(
            'contract_id' => $data['contract_id'],
            'contract_review_due_date' => currentDate(),
            'contract_review_type' => isset($data['contract_review_type'])?$data['contract_review_type']:'',
            'created_by' => $data['created_by'],
            'created_on' => currentDate(),
            'relationship_category_id' =>$contract_info[0]['relationship_category_id'],
            'calender_id' =>isset($data['calender_id'])?$data['calender_id']:0
        );
        if(isset($data['is_workflow']) && isset($data['id_contract_workflow'])){
            if($data['is_workflow'] == 1){
                $contract_review_data['is_workflow'] = $data['is_workflow'];
                $contract_review_data['contract_workflow_id'] = $data['id_contract_workflow'];
                $contract_review_data['contract_review_status'] = 'workflow in progress';
            }
        }

        $data['contract_review_id'] = $this->Contract_model->addContractReview($contract_review_data);
        $data['parent_relationship_category_id']=$contract_info[0]['relationship_category_id'];
        $data['template_id'] = $contract_info[0]['template_id'];

        if(isset($data['is_workflow']) && isset($data['id_contract_workflow'])){
            if($data['is_workflow'] == 1){
                $contract_workflow = $this->User_model->check_record('contract_workflow',array('id_contract_workflow'=>$data['id_contract_workflow']));
                if($contract_workflow[0]['workflow_id'] > 0)
                    $data['template_id'] = $contract_workflow[0]['workflow_id']; // Workflow_id == selected workflow in calendar workflow planning.
            }
        }
    
        $this->Contract_model->cloneModuleTopicQuestionForContractNew($data);
        // echo $this->db->last_query();exit;
        $this->User_model->update_data('contract_question_review',array('updated_by'=>$this->session_user_id),array('contract_review_id'=>$data['contract_review_id']));
        /** */
        ///////Activating OR Deactivating the modules Based on Stored Modules Settings: Starts
        $stored_modules = $this->User_model->check_record('stored_modules',array('contract_id'=>$data['contract_id']));
        $contract_modules = $this->User_model->check_record('module',array('contract_review_id'=>$data['contract_review_id']));

        foreach($stored_modules as $sk => $sv){

            foreach($contract_modules as $ck => $cv){

                if($sv['parent_module_id'] == $cv['parent_module_id'] && !(int)$sv['activate_in_next_review'] && $data['is_workflow'] == 0){
                    //Updating the Modulestatus to 0 if that is set to activate_in_next_review=0 in stored modules 
                    $this->User_model->update_data('module',array('module_status'=>0),array('parent_module_id'=>$cv['parent_module_id'],'contract_review_id'=>$data['contract_review_id']));
                    $cv['module_status'] = 0;
                }else if($sv['parent_module_id'] == $cv['parent_module_id'] && (int)$sv['activate_in_next_review']){
                    if(isset($data['is_workflow']) && $data['is_workflow'] == 1){
                        $this->User_model->update_data('stored_modules',array('status'=>0,'activate_in_next_review'=>0),array('parent_module_id'=>$cv['parent_module_id'],'contract_workflow_id'=>$data['id_contract_workflow'],'contract_id'=>$data['contract_id']));
                    }
                    else{
                        $this->User_model->update_data('stored_modules',array('status'=>0,'activate_in_next_review'=>0),array('parent_module_id'=>$cv['parent_module_id'],'contract_id'=>$data['contract_id']));
                    }
                    if($cv['module_status'] == 1){
                        //Deleting the question_answers of current review to null if the module is static and activated in next review
                        $cqr_sql = "DELETE FROM contract_question_review WHERE question_id in(SELECT id_question FROM question q LEFT JOIN topic t ON q.topic_id = t.id_topic WHERE t.module_id = ".$cv['id_module']." )";
                        $this->db->query($cqr_sql);
                    }
                }
            }
        }

        //Updating Score for stored_modeules Starts
        if(isset($data['is_workflow']) && $data['is_workflow']==0){
            $previous_contract_review_id = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $data['contract_id'],'is_workflow'=>0,'order' => 'DESC','contract_review_status'=>'finished'));//echo $this->db->last_query();exit;
            $get_current_review_stored_module = $this->User_model->check_record('module',array('contract_review_id'=>$data['contract_review_id'],'module_status'=>0,'static'=>1));
            if(count($get_current_review_stored_module)>0){
                foreach($get_current_review_stored_module as $module){
                    $get_previous_module=$this->User_model->check_record('module',array('contract_review_id'=>$previous_contract_review_id[0]['id_contract_review'],'parent_module_id'=>$module['parent_module_id']));
                    $this->User_model->update_data('module',array('module_score'=>$get_previous_module[0]['module_score']),array('id_module'=>$module['id_module'],'contract_review_id'=>$data['contract_review_id']));
                    $get_current_topic_details=$this->User_model->check_record('topic',array('module_id'=>$module['id_module']));
                    foreach($get_current_topic_details as $topic){
                        $get_previous_topic=$this->User_model->check_record('topic',array('module_id'=>$get_previous_module[0]['id_module'],'parent_topic_id'=>$topic['parent_topic_id']));
                        $this->User_model->update_data('topic',array('topic_score'=>$get_previous_topic[0]['topic_score']),array('id_topic'=>$topic['id_topic']));
                    }
                }
            }
        }
        

        $bu_info = $this->User_model->getUserInfo(array('user_id' => $contract_info[0]['contract_owner_id'],'user_status'=>1));
        $contract_review_info = $this->Contract_model->getContractReview(array('id_contract_review' => $data['contract_review_id']));
        $cust_admin_info = $this->User_model->getUserInfo(array('customer_id' => $data['customer_id'],'user_role_id' =>2,'user_status'=>1));
        $contract_review_user = $this->User_model->getUserInfo(array('user_id' => $contract_review_info[0]['created_by']));
        $customer_details = $this->Customer_model->getCustomer(array('id_customer' => $cust_admin_info->customer_id));
        if($customer_details[0]['company_logo']=='') {
            $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'company');
        }
        else{
            $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'profile', SMALL_IMAGE);
        }
        if(!empty($customer_details)){ $customer_name = $customer_details[0]['company_name']; }
        
        if(isset($previous_review_id)){
            $migrate['old_contract_review_id']=$previous_review_id;
            $migrate['new_contract_review_id']=$data['contract_review_id'];
            $migrate['created_by']=$data['created_by'];
            $migrate_modules=$this->Contract_model->migrateContractUsersFromOldReview($migrate);
            $migrate_modules_array=array();
            foreach($migrate_modules as $km=>$vm){
                $migrate_modules_array[]=$vm['user_id'];
            }
            $migrate_modules_array=array_values(array_unique($migrate_modules_array));
            $contract_info = $this->Contract_model->getContractDetails(array('id_contract' => $data['contract_id']));
           
            if($data['is_workflow'] == 1){
                $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,'module_key'=>'CONTRACT_WORKFLOW_INITIATE'));
            }else{
                $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,'module_key'=>'CONTRACT_REVIEW_INITIATE'));
            }
            if($template_configurations_parent['total_records']>0) {
                foreach ($migrate_modules_array as $k => $v) {
                    //$module_info = $this->Module_model->getModuleName(array('language_id' => 1, 'module_id' => $v['id_module']));
                    $To = $this->User_model->getUserInfo(array('user_id' => $v,'user_status'=>1));
                    //sending mail to bu owner
                    if ($template_configurations_parent['total_records'] > 0 && !empty($To)) {
                        $template_configurations = $template_configurations_parent['data'][0];
                        $wildcards = $template_configurations['wildcards'];
                        $wildcards_replaces = array();
                        $wildcards_replaces['first_name'] = $To->first_name;
                        $wildcards_replaces['last_name'] = $To->last_name;
                        $wildcards_replaces['contract_name'] = $contract_info[0]['contract_name'];
                        // $wildcards_replaces['contract_review_initiated_user_name']=$contract_review_user->first_name.' '.$contract_review_user->last_name.' ('.$contract_review_user->user_role_name.')';
                        // $wildcards_replaces['contract_review_created_date']=dateFormat($contract_review_info[0]['created_on']);
                        if($data['is_workflow']==1){
                            $wildcards_replaces['contract_workflow_executed_user_name']=$contract_review_user->first_name.' '.$contract_review_user->last_name.' ('.$contract_review_user->user_role_name.')';
                            $wildcards_replaces['contract_workflow_created_date']=dateFormat($contract_review_info[0]['created_on']);
                        }
                        else{
                            $wildcards_replaces['contract_review_initiated_user_name']=$contract_review_user->first_name.' '.$contract_review_user->last_name.' ('.$contract_review_user->user_role_name.')';
                            $wildcards_replaces['contract_review_created_date']=dateFormat($contract_review_info[0]['created_on']);
                        }
                        $wildcards_replaces['logo'] = $customer_logo;
                        $wildcards_replaces['year'] = date("Y");
                        $wildcards_replaces['url'] = WEB_BASE_URL . 'html';
                        $body = wildcardreplace($wildcards, $wildcards_replaces, $template_configurations['template_content']);
                        $subject = wildcardreplace($wildcards, $wildcards_replaces, $template_configurations['template_subject']);
                        $from_name=$template_configurations['email_from_name'];
                        $from=$template_configurations['email_from'];
                        $to = $To->email;
                        $to_name = $To->first_name . ' ' . $To->last_name;
                        $mailer_data['mail_from_name'] = $from_name;
                        $mailer_data['mail_to_name'] = $to_name;
                        $mailer_data['mail_to_user_id'] = $To->id_user;
                        $mailer_data['mail_from'] = $from;
                        $mailer_data['mail_to'] = $to;
                        $mailer_data['mail_subject'] = $subject;
                        $mailer_data['mail_message'] = $body;
                        $mailer_data['status'] = 0;
                        $mailer_data['send_date'] = currentDate();
                        $mailer_data['is_cron'] = 0;
                        $mailer_data['email_template_id'] = $template_configurations['id_email_template'];
                        //print_r($mailer_data);
                        $mailer_id = $this->Customer_model->addMailer($mailer_data);
                        //sending mail to bu owner
                        if ($mailer_data['is_cron'] == 0) {
                            //$mail_sent_status=sendmail($to, $subject, $body, $from);
                            $this->load->library('sendgridlibrary');
                            $mail_sent_status = $this->sendgridlibrary->sendemail($from_name, $from, $subject, $body, $to_name, $to, array(), $mailer_id);
                            if ($mail_sent_status == 1)
                                $this->Customer_model->updateMailer(array('status' => 1, 'mailer_id' => $mailer_id));
                        }

                    }
                }
            }


        }

        if($customer_details[0]['company_logo']=='') {
            $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'company');
        }
        else{
            $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'profile', SMALL_IMAGE);

        }
        if(!empty($customer_details)){ $customer_name = $customer_details[0]['company_name']; }
        //sending mail to bu owner
        if($data['is_workflow'] == 1){
            $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,'module_key'=>'CONTRACT_WORKFLOW_INITIATE'));
        }else{
            $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,'module_key'=>'CONTRACT_REVIEW_INITIATE'));
        }
        if($template_configurations_parent['total_records']>0 && !empty($cust_admin_info)){
            $template_configurations=$template_configurations_parent['data'][0];
            $wildcards=$template_configurations['wildcards'];
            $wildcards_replaces=array();
            $wildcards_replaces['first_name']=$cust_admin_info->first_name;
            $wildcards_replaces['last_name']=$cust_admin_info->last_name;
            $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
            // $wildcards_replaces['contract_review_initiated_user_name']=$contract_review_user->first_name.' '.$contract_review_user->last_name.' ('.$contract_review_user->user_role_name.')';
            // $wildcards_replaces['contract_review_created_date']=dateFormat($contract_review_info[0]['created_on']);
            if($data['is_workflow']==1){
                $wildcards_replaces['contract_workflow_executed_user_name']=$contract_review_user->first_name.' '.$contract_review_user->last_name.' ('.$contract_review_user->user_role_name.')';
                $wildcards_replaces['contract_workflow_created_date']=dateFormat($contract_review_info[0]['created_on']);
            }
            else{
                $wildcards_replaces['contract_review_initiated_user_name']=$contract_review_user->first_name.' '.$contract_review_user->last_name.' ('.$contract_review_user->user_role_name.')';
                $wildcards_replaces['contract_review_created_date']=dateFormat($contract_review_info[0]['created_on']);
            }
            $wildcards_replaces['logo']=$customer_logo;
            $wildcards_replaces['year'] = date("Y");
            $wildcards_replaces['url']=WEB_BASE_URL.'html';
            $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
            $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
            $from_name=$template_configurations['email_from_name'];
            $from=$template_configurations['email_from'];
            $to=$cust_admin_info->email;
            $to_name=$cust_admin_info->first_name.' '.$cust_admin_info->last_name;
            $mailer_data['mail_from_name']=$from_name;
            $mailer_data['mail_to_name']=$to_name;
            $mailer_data['mail_to_user_id']=$cust_admin_info->id_user;
            $mailer_data['mail_from']=$from;
            $mailer_data['mail_to']=$to;
            $mailer_data['mail_subject']=$subject;
            $mailer_data['mail_message']=$body;
            $mailer_data['status']=0;
            $mailer_data['send_date']=currentDate();
            $mailer_data['is_cron']=0;
            $mailer_data['email_template_id']=$template_configurations['id_email_template'];
            //print_r($mailer_data);
            $mailer_id=$this->Customer_model->addMailer($mailer_data);
            //sending mail to bu owner
            if($mailer_data['is_cron']==0) {
                //$mail_sent_status=sendmail($to, $subject, $body, $from);
                $this->load->library('sendgridlibrary');
                $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                if($mail_sent_status==1)
                    $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
            }

        }
        if(isset($contract_info[0]['delegate_id'])){
            $delegate_info = $this->User_model->getUserInfo(array('user_id' => $contract_info[0]['delegate_id'],'user_status'=>1));
            
            if($template_configurations_parent['total_records']>0 && !empty(($delegate_info))){
                $template_configurations=$template_configurations_parent['data'][0];
                $wildcards=$template_configurations['wildcards'];
                $wildcards_replaces=array();
                $wildcards_replaces['first_name']=$delegate_info->first_name;
                $wildcards_replaces['last_name']=$delegate_info->last_name;
                $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
                // $wildcards_replaces['contract_review_initiated_user_name']=$contract_review_user->first_name.' '.$contract_review_user->last_name.' ('.$contract_review_user->user_role_name.')';
                // $wildcards_replaces['contract_review_created_date']=dateFormat($contract_review_info[0]['created_on']);
                if($data['is_workflow']==1){
                    $wildcards_replaces['contract_workflow_executed_user_name']=$contract_review_user->first_name.' '.$contract_review_user->last_name.' ('.$contract_review_user->user_role_name.')';
                    $wildcards_replaces['contract_workflow_created_date']=dateFormat($contract_review_info[0]['created_on']);
                }
                else{
                    $wildcards_replaces['contract_review_initiated_user_name']=$contract_review_user->first_name.' '.$contract_review_user->last_name.' ('.$contract_review_user->user_role_name.')';
                    $wildcards_replaces['contract_review_created_date']=dateFormat($contract_review_info[0]['created_on']);
                }
                $wildcards_replaces['logo']=$customer_logo;
                $wildcards_replaces['year'] = date("Y");
                $wildcards_replaces['url']=WEB_BASE_URL.'html';
                $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                $subject=$template_configurations['template_subject'];
                $from_name=$template_configurations['email_from_name'];
                $from=$template_configurations['email_from'];
                $to=$delegate_info->email;
                $to_name=$delegate_info->first_name.' '.$delegate_info->last_name;
                $mailer_data['mail_from_name']=$from_name;
                $mailer_data['mail_to_name']=$to_name;
                $mailer_data['mail_to_user_id']=$delegate_info->id_user;
                $mailer_data['mail_from']=$from;
                $mailer_data['mail_to']=$to;
                $mailer_data['mail_subject']=$subject;
                $mailer_data['mail_message']=$body;
                $mailer_data['status']=0;
                $mailer_data['send_date']=currentDate();
                $mailer_data['is_cron']=0;
                $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                //print_r($mailer_data);
                $mailer_id=$this->Customer_model->addMailer($mailer_data);

                //sending mail to delegate
                if($mailer_data['is_cron']==0){
                    //$mail_sent_status=sendmail($to_delegate, $subject, $body, $from);
                    $this->load->library('sendgridlibrary');
                    $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                    if($mail_sent_status==1)
                        $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                }

            }
        }
        if($template_configurations_parent['total_records']>0 && !empty($bu_info)){
            $template_configurations=$template_configurations_parent['data'][0];
            $wildcards=$template_configurations['wildcards'];
            $wildcards_replaces=array();
            $wildcards_replaces['first_name']=$bu_info->first_name;
            $wildcards_replaces['last_name']=$bu_info->last_name;
            $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
            // $wildcards_replaces['contract_review_initiated_user_name']=$contract_review_user->first_name.' '.$contract_review_user->last_name.' ('.$contract_review_user->user_role_name.')';
            // $wildcards_replaces['contract_review_created_date']=dateFormat($contract_review_info[0]['created_on']);
            if($data['is_workflow']==1){
                $wildcards_replaces['contract_workflow_executed_user_name']=$contract_review_user->first_name.' '.$contract_review_user->last_name.' ('.$contract_review_user->user_role_name.')';
                $wildcards_replaces['contract_workflow_created_date']=dateFormat($contract_review_info[0]['created_on']);
            }
            else{
                $wildcards_replaces['contract_review_initiated_user_name']=$contract_review_user->first_name.' '.$contract_review_user->last_name.' ('.$contract_review_user->user_role_name.')';
                $wildcards_replaces['contract_review_created_date']=dateFormat($contract_review_info[0]['created_on']);
            }
            $wildcards_replaces['logo']=$customer_logo;
            $wildcards_replaces['year'] = date("Y");
            $wildcards_replaces['url']=WEB_BASE_URL.'html';
            $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
            $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
            $from_name=$template_configurations['email_from_name'];
            $from=$template_configurations['email_from'];
            $to=$bu_info->email;
            $to_name=$bu_info->first_name.' '.$bu_info->last_name;
            $mailer_data['mail_from_name']=$from_name;
            $mailer_data['mail_to_name']=$to_name;
            $mailer_data['mail_to_user_id']=$bu_info->id_user;
            $mailer_data['mail_from']=$from;
            $mailer_data['mail_to']=$to;
            $mailer_data['mail_subject']=$subject;
            $mailer_data['mail_message']=$body;
            $mailer_data['status']=0;
            $mailer_data['send_date']=currentDate();
            $mailer_data['is_cron']=0;
            $mailer_data['email_template_id']=$template_configurations['id_email_template'];
            //print_r($mailer_data);
            $mailer_id=$this->Customer_model->addMailer($mailer_data);
            if($mailer_data['is_cron']==0){
                //$mail_sent_status=sendmail($to_bu, $subject, $body, $from);
                $this->load->library('sendgridlibrary');
                $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                if($mail_sent_status==1)
                    $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
            }
        }
        //exit;
        $data['contract_review_id']=pk_encrypt($data['contract_review_id']);
        $result = array('status'=>TRUE, 'message' => $msg, 'data'=>$data['contract_review_id']);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function getDelegates_get(){
        $data = $this->input->get();
        if(isset($data['id_business_unit'])) {
            $data['id_business_unit'] = pk_decrypt($data['id_business_unit']);
            if(!in_array($data['id_business_unit'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(!empty($data['contract_id'])){
            $data['contract_id']=pk_decrypt($data['contract_id']);
        }
        // $get_contributor_user_ids=$this->User_model->check_record_selected('user_id','contract_user',array('contract_id'=>$data['contract_id'],'status'=>1));
        $get_contributor_user_ids=$this->Project_model->getcontractUsers(array('contract_id'=>$data['contract_id']));
           
        $user_ids=array_filter(array_column($get_contributor_user_ids,'user_id'));
        if(!empty($user_ids)){
            $data['not_user_ids']=$user_ids;
        }
        if(!empty($data['array_buids'])){
            $bu_ids = array_map(function($i){ return pk_decrypt($i); },explode(",",$data['array_buids']));
            if(!empty($bu_ids)){
                $data['array_bu_ids']=$bu_ids;
                unset($data['id_business_unit']);
            }
        }
        if($data['forDocumentIntelligence']==1 && empty($data['array_buids'])){
            $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>array());
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(!empty($data['forAdvacedFilter']) && in_array($this->session_user_info->user_role_id,array(4))){
            $data['user_id']=$this->session_user_info->id_user;
        }
        $result = $this->Contract_model->getDelegates($data);
        foreach ($result as $k=>$v) {
            $result[$k]['id_user']=pk_encrypt($result[$k]['id_user']);
        }
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function module_get()
    {   //Input: Contract_review_id :Required , Output: id_module,module_name,contract_review_id ;

        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('contract_review_id', array('required'=>$this->lang->line('contract_review_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
         
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'22');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_user'])) {
            $data['contract_user'] = pk_decrypt($data['contract_user']);
            if(!in_array($data['contract_user'],$this->session_user_customer_all_users)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_module'])) {
            $data['id_module'] = pk_decrypt($data['id_module']);
        }
        if(isset($data['id_contract_workflow'])) {
            $data['id_contract_workflow'] = pk_decrypt($data['id_contract_workflow']);
        }else{
            $data['id_contract_workflow'] = 0;
        }

        /* checking the external user access  start*/
        if($this->session_user_info->user_role_id==7){
            if(!empty($data['contract_review_id'])){
                $data['contract_review_id']=pk_decrypt($data['contract_review_id']);
            }
            $check_access=$this->User_model->check_record('contract_user',
            array(
                'contract_id'=>$data['contract_id'],
                'user_id'=>$this->session_user_info->id_user,
                'contract_review_id'=>$data['contract_review_id'],
                'status'=>1
                ));
            if(empty($check_access)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        /* checking the external user access  end*/

        //echo '<pre>'.print_r($data);exit;
		if(isset($data['contract_review_id'])) {
            // $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
            // if(!in_array($data['contract_review_id'],$this->session_user_contract_reviews)){
            //     $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
            //     $this->response($result, REST_Controller::HTTP_OK);
            // }
            
            if(isset($data['is_workflow']) && $data['is_workflow']==1 && isset($data['id_contract_workflow']) && $data['id_contract_workflow'] >0 ){
                    // if is workflow is 1 then considering the review id of type is_workflow = 1 and of perticular contract workflow id.
                    $where = array('contract_id' =>$data['contract_id'],'is_workflow'=>1,'contract_Workflow_id'=>$data['id_contract_workflow']);
                }else{
                    $where = array('contract_id' =>$data['contract_id'],'is_workflow'=>0);
                }
            
            $currentReviewId = $this->Contract_model->getCurrentContractReviewId($where);
            //   $currentReviewId[0]['id_contract_review']=996;
            if(isset($currentReviewId[0]['id_contract_review'])){
                $data['contract_review_id'] = $currentReviewId[0]['id_contract_review'];
            }
            else{
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'111');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user']) && isset($data['user_role_id']) && $data['user_role_id']==5){
            $data['contract_user'] = $data['id_user'];
            if(!in_array($data['contract_user'],$this->session_user_contributors)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        $check_workflow=$this->User_model->check_record('contract_workflow',array('id_contract_workflow'=>$data['id_contract_workflow']));
        // print_r($check_workflow);exit;
        // if($check_workflow[0]['parent_id']>0){
        //     $this->session_user_info->contribution_type=3;
        // }
        //Changing the column dynamically.
        $answer_column = 'question_answer';
        if($this->Contract_model->checkReviewUserAccess(array('contract_review_id'=>$data['contract_review_id'],'id_user'=>$this->session_user_info->id_user))>0)
            if((int)$this->session_user_info->contribution_type == 1)
                $answer_column = 'v_question_answer';
        
        // echo '<pre>'.print_r($data);exit;
        $data['dynamic_column'] = $answer_column;
		if((int)$this->session_user_info->contribution_type == 3)
			$data['provider_visibility'] = array(1);
            // print_r($data);exit;
        $module_score = $this->Contract_model->getContractReviewModuleScore($data);
		// print_r($module_score);exit;
        // echo '<pre>'.$this->db->last_query();exit;
        $result = $this->Contract_model->getContractReviewModule($data);
            //   echo '<pre>'.$this->db->last_query();exit;
        // foreach($result as $k=>$v){//to display the submit button when validator is submit the validation all modules
            
        //     if($v['module_status']==3){
        //         $all_modules_validate=true;
        //     }
        //     else{
        //         $all_modules_validate=false;
        //     break;
        //     }
        // } //commented for partial validation by default we are showing submit button
        $all_modules_validate=true;
        //echo '<pre>'.print_r($module_score[$s]);exit;
        $total_no_of_reviews=$this->Contract_model->getContractReview(array('contract_id'=>$data['contract_id']));
        $total_no_of_reviews=count($total_no_of_reviews);
        foreach($result as $key=>$val){
            $get_cntr_data=$this->Contract_model->getContractContributors(array('module_id'=>$val['id_module'],'contract_id'=>$data['contract_id'],'contract_review_id'=>$data['contract_review_id']));
            $result[$key]['contributors']=$get_cntr_data;
            $result[$key]['total_contributors_count']=count($get_cntr_data['expert']['data'])+count($get_cntr_data['validator']['data'])+count($get_cntr_data['provider']['data']);
            foreach($result[$key]['contributors'] as $kct=>$vct){
                if($this->session_user_id == $vct['user_id'])
                    $result[$key]['can_discuss'] = 1;
                foreach($vct['data'] as $kct1 => $vct1){
                    $result[$key]['contributors'][$kct]['data'][$kct1]['id_contract_user']=pk_encrypt($vct1['id_contract_user']);
                    $result[$key]['contributors'][$kct]['data'][$kct1]['contract_id']=pk_encrypt($vct1['contract_id']);
                    $result[$key]['contributors'][$kct]['data'][$kct1]['module_id']=pk_encrypt($vct1['module_id']);
                    $result[$key]['contributors'][$kct]['data'][$kct1]['id_user']=pk_encrypt($vct1['user_id']);
                    $result[$key]['contributors'][$kct]['data'][$kct1]['created_by']=pk_encrypt($vct1['created_by']);
                    $result[$key]['contributors'][$kct]['data'][$kct1]['updated_by']=pk_encrypt($vct1['updated_by']);
                    $result[$key]['contributors'][$kct]['data'][$kct1]['contract_review_id']=pk_encrypt($vct1['contract_review_id']);
                }
            }
            for($s=0;$s<count($module_score);$s++)
            {
                if($module_score[$s]['module_id']==$val['id_module']){
                    $result[$key]['score'] = getScoreByCount($module_score[$s]);
                }
            }
            $result[$key]['question_count'] = $this->Contract_model->moduleQuestionCount($val['id_module'],$val['contract_review_id'],$this->session_user_info->contribution_type,$answer_column);
                    
            $result[$key]['changes_count'] = $this->Contract_model->getContractModuleChanges(array('contract_review_id'=>$data['contract_review_id'],'module_id'=>$val['id_module']));
            $default_topic=$this->Contract_model->getContractReviewModuleData(array('dynamic_column'=>$answer_column,'contribution_type'=>$this->session_user_info->contribution_type,'contract_review_id'=>$data['contract_review_id'],'module_id'=>$val['id_module'],'contract_id'=>isset($data['contract_id'])?$data['contract_id']:0));

            // echo '<pre>'.print_r($default_topic);exit;
            $result[$key]['progress']= round($default_topic[0]['progress']);

            $result[$key]['imreermi']='itako';
            //if($result[$key]['type']=='static' && $total_no_of_reviews>1 && $result[$key]['progress']>=100)
                //$result[$key]['imreermi']='annus';
                
                //$result[$key]['review_user_name']=$default_topic[0]['review_user_name'];
            //ONLY when there is an active validator to that module!
            $result[$key]['validator_exists']=count($this->Contract_model->getValidatormodules(array('contract_review_id'=>$val['contract_review_id'],'module_id'=>$val['id_module'],'contribution_type'=>1)))>0?true:false;
           //$result[$key]['validation_contributor']=$this->session_user_info->contribution_type == 1?true:false;
            $result[$key]['validation_contributor']= false;
            if((!empty($data['contract_review_id']))&&($this->session_user_info->contribution_type == 1))
            {
                $contractReviewDetails = $this->User_model->check_record('contract_review',array('id_contract_review'=>$data['contract_review_id']));
                if(!empty($contractReviewDetails[0])&& ($contractReviewDetails[0]['validation_status'] == 2))
                {
                    //$result[$key]['validation_contributor']= true;
                    $contractUser = $this->User_model->check_record("contract_user",array("contract_review_id"=>$contractReviewDetails[0]['id_contract_review'],"user_id"=>$this->session_user_info->id_user));
                    if(!empty($contractUser[0]))
                    {
                        $result[0]['validation_contributor']= true;
                    } 
                }
            }
            

            $result[$key]['ready_for_validation']=false;
            $result[$key]['subtask_name']="";
            $taskDetails = $this->User_model->check_record("contract_workflow",array("id_contract_workflow"=>$data['id_contract_workflow']));
            if((!empty($taskDetails))){
                if($taskDetails[0]['parent_id']>0)
                {
                    $get_user_name=$this->User_model->check_record_selected(array('CONCAT(first_name," ",last_name) as user_name','provider'),'user',array('id_user'=>$taskDetails[0]['provider_id']));
                    $get_provider_name = $this->User_model->check_record_selected('provider_name','provider',array('id_provider'=>$get_user_name[0]['provider']));
                    $result[$key]['subtask_name']=' - ('.$get_provider_name[0]["provider_name"].' - '.$get_user_name[0]["user_name"].')'; 
                }
            }
            // $result[$key]['review_user_name']=$default_topic[0]['review_user_name'];
            // $result[$key]['last_review']=$default_topic[0]['last_review'];

            $get_moduleupdatedetails=$this->Project_model->getModuleUpdatenameanddate(array('module_id'=>$val['id_module']));
            $result[$key]['review_user_name']=isset($get_moduleupdatedetails[0]['user_name'])?$get_moduleupdatedetails[0]['user_name']:'---';
            $result[$key]['last_review']=isset($get_moduleupdatedetails[0]['date'])?$get_moduleupdatedetails[0]['date']:'';
            $result[$key]['default_topic']=isset($default_topic[0]['topics'][0]['id_topic'])?array('id_topic'=>$default_topic[0]['topics'][0]['id_topic'],'topic_name'=>$default_topic[0]['topics'][0]['topic_name']):array('id_topic'=>null,'topic_name'=>null);
            // var_dump($result[$key]['default_topic']['id_topic']);
            //echo '<pre>'.print_r($result[$key]['default_topic']);exit;
            if($result[$key]['default_topic']['id_topic'] == null){
                unset($result[$key]);
                continue;
            }
            $action_data=array('id_contract'=>$data['contract_id']);
            if(isset($data['id_user']))
                $action_data['id_user']=$data['id_user'];
            if(isset($data['user_role_id']))
                $action_data['user_role_id']=$data['user_role_id'];
            $action_data['item_status']=1;
            $action_data['page_type']='contract_review';
            $action_data['id_contract_review']=$data['contract_review_id'];
            $action_data['status']='open';
            //$action_data['id_contract_review']=$data['contract_review_id'];
            $action_data['id_module']=$val['id_module'];
            if((int)$data['user_role_id'] == 7)
                $action_data['responsible_user_id'] = $data['id_user'];
            $action_data['module_id'] = array($result[$key]['id_module']);
            $action_data['contract_workflow_id']=$data['id_contract_workflow'];
            $result[$key]['action_item_count']=count($this->Contract_model->getContractReviewActionItemsList($action_data));
            $result[$key]['open_question_action_item_count']=count($this->Contract_model->getContractReviewOpenActionItemsList($action_data));
            $action_data['action_status']='-';
            $result[$key]['open_question_open_action_item_count']=$result[$key]['open_question_action_item_count'].'/'.count($this->Contract_model->getContractReviewOpenActionItemsList($action_data));

            $result[$key]['contract_review_id']=pk_encrypt($result[$key]['contract_review_id']);
            //$result[$key]['module_id']=$result[$key]['id_module'];
            $result[$key]['id_module']=pk_encrypt($result[$key]['id_module']);
            if(isset($result[$key]['default_topic']['id_topic']))
                $result[$key]['default_topic']['id_topic']=pk_encrypt($result[$key]['default_topic']['id_topic']);
            $discussion_status = $this->Contract_model->getContractReviewDiscussionModuleCount(array('id_contract_review'=>$data['contract_review_id'],'module_id'=>$val['id_module'],'discussion_status'=>1));
            $contractReview = $this->User_model->check_record('contract_review',array('id_contract_review'=>$data['contract_review_id']));
            $result[$key]['validation_info'] = "";
            $result[$key]['validation_color']= '#ff0000';
            if((int)$result[$key]['module_status'] == 2 && count($discussion_status)==0){
                $result[$key]['validation_color']= '#808080';
                if($result[$key]['validation_contributor'])
                    $result[$key]['ready_for_validation']=true;
            }
            if((int)$result[$key]['module_status'] == 3)
            {
                $result[$key]['validation_color']= '#14ad00';
            }   
            if($result[$key]['validator_exists'])
            {
                $result[$key]['validation_info'] = 1;
                $progress_task_reviews=$this->calculateScoreAndProgress(array('id_contract_review'=>$data['contract_review_id'],'user_id'=>0));
                if(str_replace('%','',$progress_task_reviews['contract_progress'])=='100'){
                    $result[$key]['validation_info'] = 4;
                }
                if($contractReview[0]['validation_status'] == 2)
                {
                    if((int) $result[$key]['module_status'] == 2){ $result[$key]['validation_info'] = 2 ;}
                    elseif((int) $result[$key]['module_status'] == 3){$result[$key]['validation_info'] = 3 ;}
                    //$result[$key]['validation_info'] = ((int) $result[$key]['module_status'] == 2)?2:3;
                }
                elseif($contractReview[0]['validation_status'] == 3)
                {
                    $result[$key]['validation_info'] = 3; 
                }
            }
            $check_review_staus = $this->User_model->check_record('contract_review',array('id_contract_review'=>$val['contract_review_id'],'contract_review_status'=>'finished'));
            if(!empty($check_review_staus))
                $result[$key]['module_status'] = '0';
        }
        // print_r($result);exit;
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result,'all_modules_validate'=>$all_modules_validate);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function contractReview_get()
    {
        $data = $this->input->get();
        //print_r($data);
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));
        $this->form_validator->add_rules('contract_review_id', array('required'=>$this->lang->line('contract_review_id_req')));
        $this->form_validator->add_rules('module_id', array('required'=>$this->lang->line('module_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>array(array('contract_user_access'=>'')));
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['module_id'])) {
            $data['module_id'] = pk_decrypt($data['module_id']);
            if(!in_array($data['module_id'],$this->session_user_contract_review_modules)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }

        }
        if(isset($data['contract_review_id'])) {
            $c_review_id = $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
            if(!in_array($data['contract_review_id'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'3');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_contract_review'])) {
            $c_review_id = $data['id_contract_review'] = pk_decrypt($data['id_contract_review']);
            if(!in_array($data['id_contract_review'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'4');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_topic'])) {
            $data['id_topic'] = pk_decrypt($data['id_topic']);
            /*if(!in_array($data['id_topic'],$this->session_user_contract_review_topics)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'5');
                $this->response($result, REST_Controller::HTTP_OK);
            }*/
        }
        if(isset($data['last_review_id'])) {
            $data['last_review_id'] = pk_decrypt($data['last_review_id']);
            /*if(!in_array($data['last_review_id'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'6');
                $this->response($result, REST_Controller::HTTP_OK);
            }*/
        }
        if(isset($data['contract_workflow_id'])) {
            $data['contract_workflow_id'] = pk_decrypt($data['contract_workflow_id']);
            /*if(!in_array($data['last_review_id'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'6');
                $this->response($result, REST_Controller::HTTP_OK);
            }*/
        }else{
            $data['contract_workflow_id'] = 0;
        }
        $external_user = false;
        if($this->session_user_info->user_role_id == 7){
            $external_user = true;
            // if(!empty($data['contract_review_id'])){
            //     $data['contract_review_id']=pk_decrypt($data['contract_review_id']);
            // }
            $check_access=$this->User_model->check_record('contract_user',
            array(
                'contract_id'=>$data['contract_id'],
                'user_id'=>$this->session_user_info->id_user,
                'contract_review_id'=>$data['contract_review_id'],
                'status'=>1
                ));
            if(empty($check_access)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }

        $taskDetails = $this->User_model->check_record("contract_workflow",array("id_contract_workflow"=>$data['contract_workflow_id']));
       
        if(!empty($taskDetails)){
            $subTaskVal = $taskDetails[0]['parent_id']>0 ? 1:0;
            //1=>subtask , 0=>maintask  
        }
        // $contribution_type=$taskDetails[0]['parent_id']>0 ? 3:$this->session_user_info->contribution_type;
        // if($taskDetails[0]['parent_id']>0){
        //     $subTaskVal=1;
        //     $this->session_user_info->contribution_type=3;
        // }
        // else{
        //     $subTaskVal=0;
        // }
        //Changing the column dynamically.
        $answer_column = 'question_answer';
        if($this->Contract_model->checkReviewUserAccess(array('contract_review_id'=>$c_review_id,'id_user'=>$this->session_user_info->id_user))>0)
            if((int)$this->session_user_info->contribution_type == 1)
                $answer_column = 'v_question_answer';
        
        $data['dynamic_column'] = $answer_column;
        //echo '<pre>'.print_r($data);exit;

        $data['contribution_type']  = $this->session_user_info->contribution_type;
        if($this->session_user_info->contribution_type == 3)
            $data['provider_visibility'] = array(1);
        $module_score = $this->Contract_model->getContractReviewModuleScore($data);
        if(isset($data['is_workflow']) && $data['is_workflow'] == 1 && isset($data['contract_workflow_id']) && $data['contract_workflow_id']>0)
            $reviews = $this->Contract_model->getContractReview(array('contract_id' => $data['contract_id'],'contract_workflow_id'=>$data['contract_workflow_id'],'is_workflow'=>1,'status' => 'finished','order' => 'DESC'));
        else
            $reviews = $this->Contract_model->getContractReview(array('contract_id' => $data['contract_id'],'is_workflow'=>0,'status' => 'finished','order' => 'DESC'));
		
        if(!empty($reviews)){ $data['last_review_id'] = $reviews[0]['id_contract_review']; }
        $data['contribution_type'] = $this->session_user_info->contribution_type;
        $result = $this->Contract_model->getContractReviewModuleData($data);//echo $this->db->last_query();exit;
        $get_last_completed=$this->Project_model->getModuleUpdateData(array('contract_review_id'=>$data['contract_review_id']));
        // echo $this->db->last_query();exit;
        $result[0]['review_user_name']=!empty($get_last_completed[0]['user_name'])?$get_last_completed[0]['user_name']:'---';
        $result[0]['last_review']=!empty($get_last_completed[0]['date'])?$get_last_completed[0]['date']:'';
        $current_review_question = $this->Contract_model->getCurrentReviewQuestions($data['contract_review_id']);
        $questions = $this->Contract_model->getTopicData(array('id_topic'=>$data['id_topic']))['questions'];
        $answered_questions = array();
        $topic_questions = array();
        //echo '<pre>'.print_r($questions[0]['id_question']).'</pre>';exit;
        //echo 'session_user_id'.$this->session_user_id;exit;
        for($i = 0; $i < count($current_review_question); $i++){
            $answered_questions[$i] = $current_review_question[$i];
            $answered_questions[$i] = $answered_questions[$i]['question_id'];
        } 
        $result[0]['action_item_question_link'] = true;
        for($i = 0; $i < count($questions); $i++){
            $topic_questions[$i] = $questions[$i]['id_question'];
            if(!in_array($topic_questions[$i],$answered_questions)){
                $result[0]['action_item_question_link'] = false;break;
            }
        }
        $data['contribution_type']  = $this->session_user_info->contribution_type;
        $result[0]['question_count'] = $this->Contract_model->moduleQuestionCount($data['module_id'],$data['contract_review_id'],$this->session_user_info->contribution_type,$answer_column);
        $result[0]['ideedi']=(count($this->Contract_model->getContractReviewDiscussionModuleCount(array('id_contract_review'=>$data['contract_review_id'],'discussion_status'=>1,'module_id'=>$data['module_id'])))>0)?"itako":'annus';

        $CheckContractHasAccess=$this->Contract_model->CheckContractHasAccess(array('contract_review_id'=>$data['contract_review_id'],'user_id'=>$this->session_user_id));
        // echo '<pre>'.$this->db->last_query();exit;
        if(count($CheckContractHasAccess) > 0 || $this->session_user_info->user_role_id == 2 || $this->session_user_info->user_role_id == 6){
            $result[0]['contract_user_access']=$this->session_user_info->access;            
        }else{
            $result[0]['contract_user_access']='';
        }

        $module_status = true;
        $contribution_status = false;
        $result[0]['vc']=false;
        $result[0]['is_subtask']=$subTaskVal;
        $module_info = $this->User_model->check_record('module',array('id_module'=>$data['module_id']));
        if($this->session_user_info->contribution_type==3){
            $result[0]['contract_user_access']='';
        }
        if($this->Contract_model->checkReviewUserAccess(array('contract_review_id'=>$data['contract_review_id'],'id_user'=>$this->session_user_info->id_user))>0){
            
            $result[0]['contract_user_access']='co';

            // ::Requirement::
            //* Validation contributor logged in && module ready for validation => module_status = true;
            //* Validation contributor logged in && module not ready for validation=> module_status = false;
            //* Other contributor  logged in && module ready for validation => module_status = false;
            //* Other contributor  logged in && module not ready for validation => module_status = true;
            //* ::Help Data::
            //* $module_status = false => cannot edit only navigate
            //* $module_status = true => Edit and navigate
            //* module table module_status comments:
            //* '0->Inactive,1->Active,2->Ready for validation,3->Validation completed'
            //* User table contribution type :
            //* 3->External user with provider check on (Provider)
            //* 1->Internal user with Validator check on (Validator)
            //* 0->Internal user with Validator check off (Expert)
            //* 2->External user with provider check off
            //
            
            $module_status = false; // Initially setting contributor module access to false
                                    // Based on their access conditions module access set to true
            $contribution_status = true;
            $discussion_status = $this->Contract_model->getContractReviewDiscussionModuleCount(array('id_contract_review'=>$data['contract_review_id'],'module_id'=>$data['module_id'],'discussion_status'=>1));
            
            if(count($discussion_status) == 0 && ($module_info[0]['module_status'] == 2) && ($this->session_user_info->contribution_type==1)){
                $module_status = true;
                $result[0]['vc'] = true;
            }
            
            //User Access with Contract
            $result[0]['contract_user_access'] = $this->session_user_info->access; 
            if($this->Contract_model->checkReviewUserAccess(array('contract_review_id'=>$data['contract_review_id'],'id_user'=>$this->session_user_info->id_user))>0){
                if($this->session_user_info->contribution_type==1)
                    $result[0]['contract_user_access'] = 'validator';
                if($this->session_user_info->contribution_type==0)
                    $result[0]['contract_user_access'] = 'expert';
                if($this->session_user_info->contribution_type==3)
                    $result[0]['contract_user_access'] = 'provider';
            }
            //The following if conditions should be in the same order should not be moved up and down.
            if(($module_info[0]['module_status'] == 3 || $module_info[0]['module_status'] == 1) && ($this->session_user_info->contribution_type==1))
                $module_status = false;
            if(($module_info[0]['module_status'] == 1) && ($this->session_user_info->contribution_type==0 || $this->session_user_info->contribution_type==3))
                $module_status = true;
            if(($module_info[0]['module_status'] == 2 || $module_info[0]['module_status'] == 3) && ($this->session_user_info->contribution_type==0 || $this->session_user_info->contribution_type==3))
                $module_status = false;
            if((int)$module_info[0]['module_status'] == 3 && (int)$this->session_user_info->user_role_id != 2)
                $module_status = false;
            if((int)$module_info[0]['module_status'] == 3 )
                $contribution_status = false; // Once the module status is 3=>Validated no one can add a second openion                
        }
        if((int)$module_info[0]['module_status'] == 3 && (int)$this->session_user_info->user_role_id != 2)
                $module_status = false;

        if(isset($data['contract_workflow_id']) && $data['contract_workflow_id'] >0)
            $current_revew = $this->Contract_model->getContractReview(array('contract_id' => $data['contract_id'],'contract_workflow_id'=>$data['contract_workflow_id'],'order' => 'DESC'));
        else
            $current_revew = $this->Contract_model->getContractReview(array('contract_id' => $data['contract_id'],'is_workflow' => $data['is_workflow'],'order' => 'DESC'));
        // echo $this->db->last_query();exit;
        //If validation is on going then we are removieg review access to expeort and provier
        if(($current_revew[0]['validation_status'] ==2 || $current_revew[0]['validation_status'] ==3) && ($result[0]['contract_user_access'] == 'expert' || $result[0]['contract_user_access'] == 'provider'))
            $result[0]['contract_user_access'] = '';
        //If validation is on going then we are removieg review access to validator
        if(($current_revew[0]['validation_status'] ==0 || $current_revew[0]['validation_status'] ==1 || $current_revew[0]['validation_status'] ==3) && $result[0]['contract_user_access'] == 'validator')
            $result[0]['contract_user_access'] = '';
        // $result[0]['current_revew'] = $current_revew;
        $contractData = $this->User_model->check_record("contract",array("id_contract"=>$data['contract_id']));
        if(!empty($contractData))
        {
            if($contractData[0]['type'] == "project")
            {
                $workflowDetails = $this->User_model->check_record("contract_workflow",array("id_contract_workflow"=>$data['contract_workflow_id']));
                if(!empty($workflowDetails[0]))
                {
                    if($workflowDetails[0]['parent_id']>0)
                    {
                        $result[0]['contract_user_access'] = 'provider';
                    }
                }
            }
        }
        //side-by-side validation show / Not
        $result[0]['side_by_side_validation'] = false;
        // echo '<pre>'.print_r($current_revew);exit;
        $validator_exists = count($this->Contract_model->getValidatormodules(array('contract_review_id'=>$current_revew[0]['id_contract_review'],'module_id'=>$data['module_id'],'contribution_type'=>1)))>0?true:false;
        // echo '<pre>'.$this->db->last_query();exit;
        if($validator_exists && (int)$current_revew[0]['validation_status'] >=2 && ($this->session_user_info->user_role_id ==2 || $this->session_user_info->user_role_id == 3 || $this->session_user_info->user_role_id == 4 || $this->session_user_info->user_role_id == 6)){
            $result[0]['side_by_side_validation'] = true;
        }
        // print_r($data);exit;
        $check_val_ext=$this->User_model->check_record('contract_user',array('contract_review_id'=>$data['contract_review_id'],'contract_id'=>$data['contract_id'],'user_id'=>$this->session_user_info->id_user,'status'=>1));
        // echo $this->db->last_query();exit;
        $result[0]['is_disable_questions'] = 0;
        if($this->session_user_info->user_role_id == 4 && empty($check_val_ext)  && $current_revew[0]['validation_status'] ==2){

            $result[0]['side_by_side_validation'] = false;
            $result[0]['is_disable_questions'] = 1;
        }
        if($this->session_user_info->user_role_id == 3 && $current_revew[0]['validation_status'] ==2 && empty($check_val_ext)){
            $result[0]['side_by_side_validation'] = false;
            $result[0]['is_disable_questions'] = 1;
        }
            // print_r($result[0]['side_by_side_validation']);exit;
        if($current_revew[0]['contract_review_status'] == 'finished')
            $module_status = false; // If the review / Workflow is finalized we are not going to save the information.

        if(!empty($result))
        for($s=0;$s<count($module_score);$s++)
        {
            if($result[0]['id_module']==$module_score[$s]['module_id']){
                $result[0]['score'] = getScoreByCount($module_score[$s]);
            }
        }
        foreach($result as $k=>$v){
            foreach($result[$k]['contract_details'] as $kc=>$vc){
                $result[$k]['can_discuss'] = 0;
                $result[$k]['module_status'] = $module_status;
                $result[$k]['module_active'] = $module_info[0]['module_status']>0?true:false;
                $result[$k]['contribution_status'] = $contribution_status;
                $result[$k]['contract_details'][$kc]['business_unit_id']=pk_encrypt($result[$k]['contract_details'][$kc]['business_unit_id']);
                $result[$k]['contract_details'][$kc]['classification_id']=pk_encrypt($result[$k]['contract_details'][$kc]['classification_id']);
                $result[$k]['contract_details'][$kc]['contract_owner_id']=pk_encrypt($result[$k]['contract_details'][$kc]['contract_owner_id']);
                $result[$k]['contract_details'][$kc]['created_by']=pk_encrypt($result[$k]['contract_details'][$kc]['created_by']);
                $result[$k]['contract_details'][$kc]['currency_id']=pk_encrypt($result[$k]['contract_details'][$kc]['currency_id']);
                $result[$k]['contract_details'][$kc]['delegate_id']=pk_encrypt($result[$k]['contract_details'][$kc]['delegate_id']);
                $result[$k]['contract_details'][$kc]['id_contract']=pk_encrypt($result[$k]['contract_details'][$kc]['id_contract']);
                $result[$k]['contract_details'][$kc]['id_contract_review']=pk_encrypt($result[$k]['contract_details'][$kc]['id_contract_review']);
                $result[$k]['contract_details'][$kc]['relationship_category_id']=pk_encrypt($result[$k]['contract_details'][$kc]['relationship_category_id']);
                $result[$k]['contract_details'][$kc]['updated_by']=pk_encrypt($result[$k]['contract_details'][$kc]['updated_by']);

            }
            foreach($result[$k]['contributors'] as $kct=>$vct){
                //echo '<pre>'.print_r($vct);exit;
                if($this->session_user_id == $vct['user_id'])
                    $result[$k]['can_discuss'] = 1;
                foreach($vct['data'] as $kct1 => $vct1){
                    $result[$k]['contributors'][$kct]['data'][$kct1]['id_contract_user']=pk_encrypt($vct1['id_contract_user']);
                    $result[$k]['contributors'][$kct]['data'][$kct1]['contract_id']=pk_encrypt($vct1['contract_id']);
                    $result[$k]['contributors'][$kct]['data'][$kct1]['module_id']=pk_encrypt($vct1['module_id']);
                    $result[$k]['contributors'][$kct]['data'][$kct1]['id_user']=pk_encrypt($vct1['user_id']);
                    $result[$k]['contributors'][$kct]['data'][$kct1]['created_by']=pk_encrypt($vct1['created_by']);
                    $result[$k]['contributors'][$kct]['data'][$kct1]['updated_by']=pk_encrypt($vct1['updated_by']);
                    $result[$k]['contributors'][$kct]['data'][$kct1]['contract_review_id']=pk_encrypt($vct1['contract_review_id']);
                }
            }
            $result[$k]['topic_tabs']=$this->Contract_model->getTrendsTopics(array('module_id'=>$result[$k]['id_module'],'external_user'=>$external_user,'is_subtask'=>$result[0]['is_subtask']));
            foreach($result[$k]['topic_tabs'] as $tk => $tv){
                $result[$k]['topic_tabs'][$tk]['id_topic'] = pk_encrypt($tv['id_topic']);
                $result[$k]['topic_tabs'][$tk]['topic_name'] = $tv['topic_name'];
                unset($result[$k]['topic_tabs'][$tk]['module_id']);
                unset($result[$k]['topic_tabs'][$tk]['parent_topic_id']);
            }
            $result[$k]['contract_review_id']=pk_encrypt($result[$k]['contract_review_id']);
            $result[$k]['contract_workflow_id']=pk_encrypt($data['contract_workflow_id']);
            $result[$k]['created_by']=pk_encrypt($result[$k]['created_by']);
            $result[$k]['id_module']=pk_encrypt($result[$k]['id_module']);
            $result[$k]['parent_module_id']=pk_encrypt($result[$k]['parent_module_id']);
            $result[$k]['updated_by']=pk_encrypt($result[$k]['updated_by']);
            foreach($result[$k]['topics'] as $kt=>$vt){
                // $result[$k]['topic_tabs'][$kt]['id_topic']= pk_encrypt($vt['id_topic']);
                // $result[$k]['topic_tabs'][$kt]['topic_name']=$vt['topic_name'];
                $result[$k]['topics'][$kt]['created_by']=pk_encrypt($result[$k]['topics'][$kt]['created_by']);
                $result[$k]['topics'][$kt]['id_topic']=pk_encrypt($result[$k]['topics'][$kt]['id_topic']);
                $result[$k]['topics'][$kt]['module_id']=pk_encrypt($result[$k]['topics'][$kt]['module_id']);
                $result[$k]['topics'][$kt]['parent_topic_id']=pk_encrypt($result[$k]['topics'][$kt]['parent_topic_id']);
                $result[$k]['topics'][$kt]['updated_by']=pk_encrypt($result[$k]['topics'][$kt]['updated_by']);
                foreach($result[$k]['topics'][$kt]['questions'] as $kq=>$vq){
                    $result[$k]['topics'][$kt]['questions'][$kq]['created_by']=pk_encrypt($result[$k]['topics'][$kt]['questions'][$kq]['created_by']);
                    $result[$k]['topics'][$kt]['questions'][$kq]['second_opinion_exists']=count($this->User_model->check_record('contract_review_discussion_question',array('question_id'=>$result[$k]['topics'][$kt]['questions'][$kq]['id_question'])))>0?true:false;

                    $parent_question_id = $result[$k]['topics'][$kt]['questions'][$kq]['parent_question_id'];
                    //custom query
                    if((int)$this->session_user_info->user_role_id == 7)                  
                        $query = 'SELECT * FROM `contract_review_action_item` WHERE status = "open" AND reference_type="question" AND contract_id ='.$data["contract_id"].' AND (`responsible_user_id` ='.$this->session_user_id.' OR created_by='.$this->session_user_id.') AND contract_workflow_id = '.$data["contract_workflow_id"].' AND `question_id` IN(SELECT id_question questions_id from question WHERE provider_visibility = 1 AND item_status = 1 AND parent_question_id = '.$parent_question_id.')';
                    else
                        $query = 'SELECT * FROM `contract_review_action_item` WHERE status = "open" AND item_status = 1 AND reference_type="question" AND contract_workflow_id = '.$data["contract_workflow_id"].' AND contract_id ='.$data["contract_id"].' AND `question_id` IN(SELECT id_question questions_id from question WHERE parent_question_id = '.$parent_question_id.')';
                     // echo $query.'<br>';
                    $action_items = $this->User_model->custom_query($query);
                    // echo $this->db->last_query();exit;
                    $action_item_count = 0;
                    $v_action_item_count = 0;
                    if($result[0]['side_by_side_validation']){
                        foreach($action_items as $ak => $av){
                            if((int)$av['validator_record'])
                                $v_action_item_count++;
                            else
                                $action_item_count++;
                        }
                    }
                    else{                        
                        $result[$k]['topics'][$kt]['questions'][$kq]['attachment_count'] += $result[$k]['topics'][$kt]['questions'][$kq]['v_attachment_count'];
                        $action_item_count = count($action_items);
                    } 
                        
                    $result[$k]['topics'][$kt]['questions'][$kq]['action_item_count']=$action_item_count;
                    $result[$k]['topics'][$kt]['questions'][$kq]['v_action_item_count']=$v_action_item_count;

                    $result[$k]['topics'][$kt]['questions'][$kq]['id_question']=pk_encrypt($result[$k]['topics'][$kt]['questions'][$kq]['id_question']);

                    //Geting the help text from the parent question id.
                    $parent_question_data = $this->User_model->check_record('question',array('id_question'=>$result[$k]['topics'][$kt]['questions'][$kq]['parent_question_id']));
                    $result[$k]['topics'][$kt]['questions'][$kq]['help_text']=$parent_question_data[0]['help_text'];
                    

                    $result[$k]['topics'][$kt]['questions'][$kq]['parent_question_id']=pk_encrypt($result[$k]['topics'][$kt]['questions'][$kq]['parent_question_id']);
                    $result[$k]['topics'][$kt]['questions'][$kq]['topic_id']=pk_encrypt($result[$k]['topics'][$kt]['questions'][$kq]['topic_id']);
                    $result[$k]['topics'][$kt]['questions'][$kq]['updated_by']=pk_encrypt($result[$k]['topics'][$kt]['questions'][$kq]['updated_by']);
                    $result[$k]['topics'][$kt]['questions'][$kq]['parent_question_answer']=(pk_encrypt($result[$k]['topics'][$kt]['questions'][$kq]['parent_question_answer'])==NULL?$result[$k]['topics'][$kt]['questions'][$kq]['question_answer']:pk_encrypt($result[$k]['topics'][$kt]['questions'][$kq]['parent_question_answer']));
                    $result[$k]['topics'][$kt]['questions'][$kq]['v_parent_question_answer']=(pk_encrypt($result[$k]['topics'][$kt]['questions'][$kq]['v_parent_question_answer'])==NULL?$result[$k]['topics'][$kt]['questions'][$kq]['v_question_answer']:pk_encrypt($result[$k]['topics'][$kt]['questions'][$kq]['v_parent_question_answer']));

                    foreach($result[$k]['topics'][$kt]['questions'][$kq]['options'] as $ko=>$vo){
                        $result[$k]['topics'][$kt]['questions'][$kq]['options'][$ko]['created_by']=pk_encrypt($result[$k]['topics'][$kt]['questions'][$kq]['options'][$ko]['created_by']);
                        $result[$k]['topics'][$kt]['questions'][$kq]['options'][$ko]['id_question_option']=pk_encrypt($result[$k]['topics'][$kt]['questions'][$kq]['options'][$ko]['id_question_option']);
                        $result[$k]['topics'][$kt]['questions'][$kq]['options'][$ko]['parent_question_option_id']=pk_encrypt($result[$k]['topics'][$kt]['questions'][$kq]['options'][$ko]['parent_question_option_id']);
                        $result[$k]['topics'][$kt]['questions'][$kq]['options'][$ko]['question_id']=pk_encrypt($result[$k]['topics'][$kt]['questions'][$kq]['options'][$ko]['question_id']);
                        $result[$k]['topics'][$kt]['questions'][$kq]['options'][$ko]['updated_by']=pk_encrypt($result[$k]['topics'][$kt]['questions'][$kq]['options'][$ko]['updated_by']);

                    }
                }
            }
            if(isset($result[$k]['topic_pagination']['current']))
                $result[$k]['topic_pagination']['current']=pk_encrypt($result[$k]['topic_pagination']['current']);
            if(isset($result[$k]['topic_pagination']['next']))
                $result[$k]['topic_pagination']['next']=pk_encrypt($result[$k]['topic_pagination']['next']);
            if(isset($result[$k]['topic_pagination']['previous']))
                $result[$k]['topic_pagination']['previous']=pk_encrypt($result[$k]['topic_pagination']['previous']);

        }
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function questionAnswer_post()
    {
        $data = $this->input->post();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'01');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $this->form_validator->add_rules('contract_review_id', array('required'=>$this->lang->line('contract_review_id_req')));
        //$this->form_validator->add_rules('question_id', array('required'=>$this->lang->line('question_id_req')));
        $this->form_validator->add_rules('created_by', array('required'=>$this->lang->line('created_by_req')));
        //$this->form_validator->add_rules('question_answer', array('required'=>$this->lang->line('question_answer_req')));
        //$this->form_validator->add_rules('question_feedback', array('required'=>$this->lang->line('question_feedback_req')));
        $this->form_validator->add_rules('id_module', array('required'=>$this->lang->line('module_id_req')));
        $this->form_validator->add_rules('data', array('required'=>$this->lang->line('question_data_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_review_id'])) {
            $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
            if(!in_array($data['contract_review_id'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'1');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_module'])) {
            $module_id = $data['id_module'] = pk_decrypt($data['id_module']);
        }
        if(isset($data['id_contract_workflow'])) {
            $contract_workflow_id = $data['id_contract_workflow'] = pk_decrypt($data['id_contract_workflow']);
        }
        if(isset($data['contract_workflow_id'])) {
            $contract_workflow_id = $data['contract_workflow_id'] = pk_decrypt($data['contract_workflow_id']);
        }
        if(isset($data['created_by'])) {
            $data['created_by'] = pk_decrypt($data['created_by']);
            if($data['created_by']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        //validations end
        
        $question_data = $data['data'];
        $add = array();
        $previous_answers = $this->Contract_model->getReviewQuestionAnswer($data);

        $previous_answer_question_id = array_map(function($i){ return $i['question_id']; },$previous_answers);
        for($s=0;$s<count($question_data);$s++) {
            if (isset($question_data[$s]['question_id'])) {
                $question_id_loop = pk_decrypt($question_data[$s]['question_id']);
                // if(!in_array($question_id_loop,$this->session_user_contract_review_questions)){
                //     $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'3');
                //     $this->response($result, REST_Controller::HTTP_OK);
                // }
            }
            if (isset($question_data[$s]['parent_question_id'])) {
                $question_id_loop = pk_decrypt($question_data[$s]['parent_question_id']);
                /*if(!in_array($question_id_loop,$this->session_user_master_contract_review_questions)){
                    $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'4');
                    $this->response($result, REST_Controller::HTTP_OK);
                }*/
            }
            if (isset($question_data[$s]['question_option_id'])) {
                $question_option_id_loop = pk_decrypt($question_data[$s]['question_option_id']);

            }

        }
        $msg = $this->lang->line('success');
        $toaster = false;
        // var_dump($data);exit;
        // echo '<pre>'.print_r($data);exit;
		$data['module_status'] = 0;
        $module_info = $this->Module_model->getModuleName(array('language_id'=>1,'module_id'=>$module_id));
        $contract_id = $this->User_model->check_record('contract_review',array('id_contract_review'=>$data['contract_review_id']));
        $data['under_validation_or_readonly'] ='';
        $contractDetails = $this->User_model->check_record("contract",array("id_contract"=>$contract_id[0]['contract_id']));

        if((($contract_id[0]['validation_status']==2)&&(in_array($this->session_user_id,array($contractDetails[0]['delegate_id'],$contractDetails[0]['contract_owner_id']))))||((int)$this->session_user_info->user_role_id==6))
        {
            $data['under_validation_or_readonly'] = true;
            //for not saving answers in db(Read only for contract owner ,delegate when task or review is under validation, if logined user is a reader)
        }
        if($data['under_validation_or_readonly'] == true)
        {
            $result = array('status'=>TRUE, 'message' => '', 'data'=>'', 'toaster' => FALSE);
            $this->response($result, REST_Controller::HTTP_OK);
        }
		//if(!isset($data['is_workflow'])){
			//$data['is_workflow'] = $module_info[0]['is_workflow'];
		//}
        if(isset($data['is_workflow']) && $data['is_workflow'] == 1 && isset($contract_workflow_id) && $contract_workflow_id > 0)
            $contract_review = $this->Contract_model->getContractReview(array('contract_id'=>$contract_id[0]['contract_id'],'is_workflow'=>1,'contract_workflow_id'=>$contract_workflow_id,'order'=>'desc'));
        else
            $contract_review = $this->Contract_model->getContractReview(array('contract_id'=>$contract_id[0]['contract_id'],'is_workflow'=>0,'order'=>'desc'));
            //echo $contract_review[0]['contract_review_status'];exit;
        if(!(int)$module_info[0]['module_status'] || ((int)$contract_review[0]['id_contract_review'] != (int)$data['contract_review_id']) || $contract_review[0]['contract_review_status'] == 'finished')
            $data['module_status'] = 0;

        //Dynamic DB Columns into a variable
        $question_answer = 'question_answer';
        $question_feedback = 'question_feedback';
        $question_option_id = 'question_option_id';
		if($this->session_user_info->user_role_id==2){
			$data['module_status'] = 1;
		}else{
			//Checking for Owner or Delegate
			$owner_or_delegate = "SELECT * FROM contract WHERE id_contract = ".$contract_id[0]['contract_id']." AND (contract_owner_id = ".$this->session_user_id." OR delegate_id = ".$this->session_user_id.")";
			$owner_or_delegate = $this->User_model->custom_query($owner_or_delegate);
			if(count($owner_or_delegate) > 0 && in_array($contract_id[0]['validation_status'],array(0,1,3))){
				$data['module_status'] = 1;
			}else{
				//Getting the records of expert & provider modules
				$q = 'SELECT * from contract_user cu JOIN user u on u.id_user = cu.user_id WHERE cu.module_id ='.$module_id.' AND cu.user_id = '.$this->session_user_id.' AND u.contribution_type IN (0,3) AND cu.status = 1';
				$expert_provider_modules = $this->User_model->custom_query($q);
				//print_r($expert_provider_modules);
				if(count($expert_provider_modules)>0){
					//Checking for Expert & provider And the review is Not ready, Ready & completed validation.
					if(in_array($contract_id[0]['validation_status'],array(0,1,3)))
						$data['module_status'] = 1;
				}else{
					$q = 'SELECT * from contract_user cu JOIN user u on u.id_user = cu.user_id WHERE cu.module_id ='.$module_id.' AND cu.user_id = '.$this->session_user_id.' AND u.contribution_type = 1 AND cu.status = 1';
					$validators_on_module = $this->User_model->custom_query($q);
                    //Checking for Validator & provider And the review is Ongoing validation.
                    // echo 'one'.print_r($validators_on_module);
                    // echo 'two'.$contract_id[0]['validation_status'];
					if(count($validators_on_module) >0 && in_array($contract_id[0]['validation_status'],array(2))){
						$data['module_status'] = 1;
                        $question_answer = 'v_question_answer';
                        $question_feedback = 'v_question_feedback';
                        $question_option_id = 'v_question_option_id';
                    }
					
				}
			}
        }
        if(isset($contract_workflow_id)&&($contract_workflow_id>0))
        {
            $taskDetails = $this->User_model->check_record("contract_workflow",array("id_contract_workflow"=>$contract_workflow_id));
            if((!empty($taskDetails[0]))&&($taskDetails[0]['parent_id']>0))
            {
                $data['module_status'] = 1; //if it is a subtask
            }
        }
        if($contract_id[0]['contract_review_status'] == 'finished')
            $data['module_status'] = 0;//if the module status is finished then answeres should not be saved.
	

        //Checking here: if the logged in user is a contibutor(expert / provider): if yes No Saving action will be performed.
        if($data['module_status'] == '1'){
            //If module status is '1' then only we are saving other wise just returning success
             
            for($s=0;$s<count($question_data);$s++)
            {
    
                if(isset($question_data[$s]['question_id'])) $question_data[$s]['question_id']=pk_decrypt($question_data[$s]['question_id']);
                $question_info=$this->Question_model->getQuestion(array('id_question'=>$question_data[$s]['question_id']));
                //print_r($question_data[$s]['question_id']);exit;
    
                if($question_info[0]['question_type']=='input' || $question_info[0]['question_type']=='date'){
                    $question_data[$s][$question_option_id]=NULL;
                }
                else{
                    $question_data[$s][$question_option_id]=pk_decrypt($question_data[$s][$question_answer]);
                    if($question_data[$s][$question_option_id]!=NULL && $question_data[$s][$question_option_id]>0) {
                        $option_info = $this->Question_model->getQuestionOption(array('id_question_option' => $question_data[$s][$question_option_id]));
                        $question_data[$s][$question_answer] = $option_info[0]['option_value'];
                    }
                    else{
                        $question_data[$s][$question_option_id]=NULL;
                        $question_data[$s][$question_answer]=NULL;
                    }
                }
                //exit;
                if(isset($question_data[$s]['parent_question_id'])) $question_data[$s]['parent_question_id']=pk_decrypt($question_data[$s]['parent_question_id']);
                        
                $change= $this->User_model->check_record('contract_question_review',array('question_id'=>$question_data[$s]['question_id']));
                // print_r($previous_answer_question_id);
                // print_r($question_data[$s]['question_id']);exit;    
                if(in_array($question_data[$s]['question_id'],$previous_answer_question_id)){

                    // print_r($change[0][$question_answer]);
                    // print_r($question_data[$s]); exit;
                    // if(empty($change[0][$question_answer]) && empty($question_data[$s][$question_answer]))
                    
                    if(empty($change[0][$question_answer]) && empty($question_data[$s][$question_answer])||($change[0][$question_answer] != $question_data[$s][$question_answer]) || ($change[0][$question_feedback] != $question_data[$s][$question_feedback]) ||($change[0]['external_user_question_feedback'] != $question_data[$s]['external_user_question_feedback']) || ($change[0][$question_option_id] != $question_data[$s][$question_option_id])){
                   
                        $this->Contract_model->updateReviewQuestionAnswer(array(
                            'contract_review_id' => $data['contract_review_id'],
                            'question_id' => $question_data[$s]['question_id'],
                            'parent_question_id' => $question_data[$s]['parent_question_id'],
                            $question_answer => $question_data[$s][$question_answer],
                            $question_feedback => $question_data[$s][$question_feedback],
                            'external_user_question_feedback' => $question_data[$s]['external_user_question_feedback'],
                            'updated_by' =>  $data['created_by'],
                            'updated_on' => currentDate(),
                            $question_option_id => isset($question_data[$s][$question_option_id])?$question_data[$s][$question_option_id]:NULL
                             ));
                            // echo $this->db->last_query();exit;
                       
                    }
                                 
                } else {
                    // echo "else";exit;
                    $check_qst_ext=$this->User_model->check_record('contract_question_review',array('question_id'=>$question_data[$s]['question_id'],'contract_review_id'=>$data['contract_review_id']));
                    if(empty($check_qst_ext)){
                        $add[$s] = array(
                            'contract_review_id' => $data['contract_review_id'],
                            'question_id' => $question_data[$s]['question_id'],
                            'parent_question_id' => $question_data[$s]['parent_question_id'],
                            $question_answer => $question_data[$s][$question_answer],
                            $question_feedback => $question_data[$s][$question_feedback],
                            'external_user_question_feedback' => $question_data[$s]['external_user_question_feedback'],
                            $question_option_id => isset($question_data[$s][$question_option_id])?$question_data[$s][$question_option_id]:NULL
                        );
                        if($question_data[$s][$question_answer]!='' || $question_data[$s][$question_feedback]!='' || $question_data[$s]['external_user_question_feedback']!=''){                        
                            $add[$s]['updated_by'] = $data['created_by'];
                            $add[$s]['updated_on'] = currentDate();
                        }else{
                            $add[$s]['updated_by'] = null;
                            $add[$s]['updated_on'] = null;
                        }
                    }
                   
                }// add contract question review else part end

              
                //for any change in question answer and question feedback in any of the module
                if(($question_data[$s][$question_answer]!="" && $change[0][$question_answer] != $question_data[$s][$question_answer]) || ($question_data[$s][$question_feedback]!="" && $change[0][$question_feedback] != $question_data[$s][$question_feedback]) || ($question_data[$s]['external_user_question_feedback']!="" && $change[0]['external_user_question_feedback'] != $question_data[$s]['external_user_question_feedback'])){
                    // if is there any change then updating the module 
                   
                        $this->User_model->update_data('module',array('updated_by'=>$this->session_user_id,'updated_on'=>currentDate()),array('id_module'=>$module_id));
                        
                        // if is there any change then updating the contractReview
                        $this->Contract_model->updateContractReview(array('id_contract_review' => $data['contract_review_id'],'updated_by' => $data['created_by'],'updated_on' => currentDate()));
                    
                }
            
            }//for loop for question_data ended
            $msg = $this->lang->line('info_save');
            $toaster = true;
            
        }//module status if condition end
       // exit;
        $send['contract_review_id'] = $data['contract_review_id'];
        $send['module_id'] = $module_id;
        $send['dynamic_column']=$question_answer;
    
        
        if(!empty($add)){
            $this->Contract_model->addReviewQuestionAnswer_bulk($add);            
        }
        $module_progress = $this->Contract_model->progress($send);
 
        $discussion_status = $this->Contract_model->getContractReviewDiscussionByModule(array('module_id'=>$module_id));
        $module_info = $this->Module_model->getModuleName(array('language_id'=>1,'module_id'=>$module_id));
        if(isset($discussion_status[0])){
            if((int)$discussion_status[0]['discussion_status']==2 && (int)$module_progress == 100 && (int)$module_info[0]['module_status'] == 1 && count($validators_on_module)>0){
               $this->User_model->update_data('module',array('module_status'=>2),array('id_module'=>$module_id,'module_status'=>1));  
            }
        }else{
            if((int)$module_progress == 100 && (int)$module_info[0]['module_status'] == 1){
                $this->User_model->update_data('module',array('module_status'=>2),array('id_module'=>$module_id,'module_status'=>1));
            }            
        }
        //Making Module Ready for validation
        if(count($validators_on_module)>0){
            // if((int)$module_progress == 100 && (int)$module_info[0]['module_status'] == 2){
            //     //update 
            //     $this->User_model->update_data('module',array('module_status'=>3),array('id_module'=>$module_id,'module_status'=>2));
            // }else if((int)$module_progress != 100){
            //     $this->User_model->update_data('module',array('module_status'=>2),array('id_module'=>$module_id));
            // } //commeted for partial validation and validator remove
        }
		//Updating the Validation_Status
        $modules = $this->Contract_model->getValidatormodules(array('contribution_type'=>1,'contract_review_id'=>$data['contract_review_id']));
        
        foreach($modules as $k => $v){
            if((int)$v['module_status'] ==2){
                $ready_for_validation = true;
            }
            else{
                $ready_for_validation = false;
                break;
            }
        }
        if($ready_for_validation && $contract_review[0]['validation_status']==0){//updating the relation status =1 that means readay for validation
            $update_validation_status=$this->User_model->update_data('contract_review',array('validation_status'=>1),array('id_contract_review'=>$data['contract_review_id']));
        }

        //////store the scores of modules,topics and review of the contract
        if((int)$this->session_user_info->user_role_id == 7)
            $topic_score =  $this->Contract_model->getContractDashboard_old(array('contract_review_id' => $data['contract_review_id'],'provider_visibility'=>array(1)));
        else
            $topic_score =  $this->Contract_model->getContractDashboard_old(array('contract_review_id' => $data['contract_review_id'],'provider_visibility'=>array(1,0)));//echo $this->db->last_query();exit;
            $check_topic_id = $this->User_model->check_record('question',array('id_question'=>pk_decrypt($data['data'][0]['question_id'])));
            foreach($topic_score as $t=>$s){
            if($s['topic_id']==$check_topic_id[0]['topic_id']){
                $this->User_model->update_data('topic',array('topic_score'=>$s['topic_score']),array('module_id'=>$s['module_id'],'id_topic'=>$s['topic_id']));
            }
        }
        $module_score = $this->Contract_model->getContractReviewModuleScore(array('contract_review_id' => $data['contract_review_id']));//echo $this->db->last_query();exit;
        for ($sr = 0; $sr < count($module_score); $sr++) {
            $module_score[$sr]['score'] = getScoreByCount($module_score[$sr]);
            if($data['id_module']==$module_score[$sr]['module_id']){
                $this->User_model->update_data('module',array('module_score'=>$module_score[$sr]['score']),array('id_module'=>$module_score[$sr]['module_id'],'contract_review_id'=>$data['contract_review_id']));
            }
        } 
        
        if($this->session_user_info->user_role_id==2 || !isset($data["contract_review_id"])){
            $review_score = getScore(array_map(function ($i) { return strtolower($i['score']);}, $module_score));
        } 
        else {
            $user_modules = $this->Contract_model->getContractReviewModule($data);
            $new_array = [];
            foreach($module_score as $ms){
                foreach($user_modules as $um){
                    if($um["id_module"]==$ms["module_id"]){
                        $new_array[] = $ms;
                    }
                }
            }
            $review_score = getScore(array_map(function ($i) { return strtolower($i['score']);}, $new_array));
        } 
        $this->User_model->update_data('contract_review',array('review_score'=>$review_score),array('id_contract_review'=>$data['contract_review_id']));
        /////
        $result = array('status'=>TRUE, 'message' => $msg, 'data'=>'', 'toaster' => $toaster);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    function sendmailtovc($data){
        //sending mail to validation contributor.
        //print_r($data['type']); exit;
        $result = $this->User_model->getUserInfo(array('user_id' => $this->session_user_id));
		$customer_details = $this->Customer_model->getCustomer(array('id_customer' => $result->customer_id));

        if($customer_details[0]['company_logo']=='')
            $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'company');        
        else
            $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'profile', SMALL_IMAGE);
        
        if(!empty($customer_details))
            $customer_name = $customer_details[0]['company_name']; 
        $module_info = $this->Module_model->getModuleName(array('language_id'=>1,'module_id'=>$data['module_id']));
        $contract_info = $this->Contract_model->getContractDetails(array('contract_review_id'=>$data['contract_review_id']));
        $wildcards_replaces['module_name']=$module_info[0]['module_name'];
        
        if($data['type']!='project'){
            if($module_info[0]['is_workflow'] == 1){          
                $template_configurations=$this->Customer_model->EmailTemplateList(array('customer_id' => $result->customer_id,'module_key'=>'VALIDATION_READY','module_name' => 'WorkFlow'));
            }else{
                $template_configurations=$this->Customer_model->EmailTemplateList(array('customer_id' => $result->customer_id,'module_key'=>'VALIDATION_READY','module_name' => 'Review'));
            }
            $v_contributors = $this->Customer_model->getValidationContributors(array('contract_review_id'=>$data['contract_review_id'],'module_id'=>$data['module_id']));
            $template_configurations_parent=$template_configurations;
            if($template_configurations_parent['total_records']>0){
                foreach($v_contributors as $kd=>$vd){
                    $mailer_data=array();
                    $template_configurations=$template_configurations_parent['data'][0];
                    $wildcards=$template_configurations['wildcards'];
                    $wildcards_replaces=array();
                    $wildcards_replaces['first_name']=$vd['first_name'];
                    $wildcards_replaces['last_name']=$vd['last_name'];
                    $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
                    $wildcards_replaces['module_name']=$module_info[0]['module_name'];
                    $wildcards_replaces['provider_name']=$contract_info[0]['provider_name_show'];
                    $wildcards_replaces['initiate_by']=$this->session_user_info->first_name." ".$this->session_user_info->last_name;
                    $wildcards_replaces['initiate_on']=date("Y-m-d");
                    $wildcards_replaces['logo']=$customer_logo;
                    $wildcards_replaces['year'] = date("Y");
                    $wildcards_replaces['url']=WEB_BASE_URL.'html';
                    $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                    $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                    $from_name=$template_configurations['email_from_name'];
                    $from=$template_configurations['email_from'];
                    $to=$vd['email'];
                    $to_name=$vd['first_name'].' '.$vd['last_name'];
                    $mailer_data['mail_from_name']=$from_name;
                    $mailer_data['mail_to_name']=$to_name;
                    $mailer_data['mail_to_user_id']=$vd['id_user'];
                    $mailer_data['mail_from']=$from;
                    $mailer_data['mail_to']=$to;
                    $mailer_data['mail_subject']=$subject;
                    $mailer_data['mail_message']=$body;
                    $mailer_data['status']=0;
                    $mailer_data['send_date']=currentDate();
                    $mailer_data['is_cron']=0;
                    $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                    $mailer_id=$this->Customer_model->addMailer($mailer_data);
                    if($mailer_data['is_cron']==0) {
                        $this->load->library('sendgridlibrary');
                        $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                        if($mail_sent_status==1)
                            $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                    }
                }
            }
        }
        if($data['type']=='project'){
            $template_configurations=$this->Customer_model->EmailTemplateList(array('customer_id' => $result->customer_id,'module_key'=>'VALIDATION_READY','module_name' => 'Project'));
            $template_configurations_parent=$template_configurations;
            $v_contributors = $this->Customer_model->getValidationContributors(array('contract_review_id'=>$data['contract_review_id'],'module_id'=>$data['module_id']));
            if($template_configurations_parent['total_records']>0){
                foreach($v_contributors as $kd=>$vd){
                    $mailer_data=array();
                    $template_configurations=$template_configurations_parent['data'][0];
                    $wildcards=$template_configurations['wildcards'];
                    $wildcards_replaces=array();
                    $wildcards_replaces['first_name']=$vd['first_name'];
                    $wildcards_replaces['last_name']=$vd['last_name'];
                    $wildcards_replaces['project_name']=$contract_info[0]['contract_name'];
                    $wildcards_replaces['module_name']=$module_info[0]['module_name'];
                    $wildcards_replaces['provider_name']=$contract_info[0]['provider_name_show'];
                    $wildcards_replaces['initiate_by']=$this->session_user_info->first_name." ".$this->session_user_info->last_name;
                    $wildcards_replaces['initiate_on']=date("Y-m-d");
                    $wildcards_replaces['logo']=$customer_logo;
                    $wildcards_replaces['year'] = date("Y");
                    $wildcards_replaces['url']=WEB_BASE_URL.'html';
                    $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                    $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                    $from_name=$template_configurations['email_from_name'];
                    $from=$template_configurations['email_from'];
                    $to=$vd['email'];
                    $to_name=$vd['first_name'].' '.$vd['last_name'];
                    $mailer_data['mail_from_name']=$from_name;
                    $mailer_data['mail_to_name']=$to_name;
                    $mailer_data['mail_to_user_id']=$vd['id_user'];
                    $mailer_data['mail_from']=$from;
                    $mailer_data['mail_to']=$to;
                    $mailer_data['mail_subject']=$subject;
                    $mailer_data['mail_message']=$body;
                    $mailer_data['status']=0;
                    $mailer_data['send_date']=currentDate();
                    $mailer_data['is_cron']=0;
                    $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                    $mailer_id=$this->Customer_model->addMailer($mailer_data);
                    if($mailer_data['is_cron']==0) {
                        $this->load->library('sendgridlibrary');
                        $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                        if($mail_sent_status==1)
                            $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                    }
                }
            }
        }
        
    }

    public function finalize_post()
    {
        $data = $this->input->post();
        //echo 'data'.'<pre>';print_r($data);
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));
        $this->form_validator->add_rules('contract_review_id', array('required'=>$this->lang->line('contract_review_id_req')));
        $this->form_validator->add_rules('created_by', array('required'=>$this->lang->line('created_by_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_review_id'])) {
            $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
            $check_project=$this->User_model->check_record('contract',array('id_contract'=>$data['contract_id']));
            if(!in_array($data['contract_review_id'],$this->session_user_contract_reviews) && $check_project[0]['type']=='contract'){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['created_by'])) {
            $data['created_by'] = pk_decrypt($data['created_by']);
            if($data['created_by']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_workflow_id'])){
            $data['contract_workflow_id'] = pk_decrypt($data['contract_workflow_id']);
        }

        $is_without_discussion=isset($data['finalize_without_discussion'])?$data['finalize_without_discussion']:NULL;
        $finalize_comments=isset($data['finalize_comments'])?$data['finalize_comments']:NULL;
        $contract_reviews = $this->Contract_model->getContractReview(array('contract_id'=>$data['contract_id']));
        $msg = $this->lang->line('review_finalize');
        if(isset($data['is_workflow']) && $data['is_workflow'] == 1)
            $msg = $this->lang->line('workflow_finalize');
        // For Every Review Finalize we are storing the Static modules into stored modules.
        // Here we are storing the the static modules in to the static module table
        $first_review_modules = $this->Module_model->getStorableModules(array('contract_review_id'=>$data['contract_review_id'],'static'=>1,'module_status'=>array(1,2,3)));
        
        foreach($first_review_modules as $v){
            $insert_data = array(
                'parent_module_id' => $v['parent_module_id'],
                'module_id' => $v['id_module'],
                'contract_id' => $data['contract_id'],
                'status' => 1,
                'activate_in_next_review' => 0,
                'created_by' => $this->session_user_id,
                'created_on' => CurrentDate(),
                'updated_by' => $this->session_user_id,
                'updated_on' => CurrentDate()
            );
            $check_for_already_existance = $this->User_model->check_record('stored_modules',array('parent_module_id' => $v['parent_module_id'],'contract_id' => $data['contract_id']));
            if(isset($data['is_workflow']) && $data['is_workflow'] == 1){
                $insert_data['is_workflow'] = 1;
                $insert_data['contract_workflow_id'] = $data['contract_workflow_id'];
                $this->User_model->update_data('contract_workflow',array('status'=>0,'workflow_status'=>'workflow finlized'),array('id_contract_workflow'=>$data['contract_workflow_id']));
                $check_for_already_existance = $this->User_model->check_record('stored_modules',array('parent_module_id' => $v['parent_module_id'],'contract_workflow_id'=>$data['contract_workflow_id'],'contract_id' => $data['contract_id']));
                //Deleting calendar planning.          
            }
            
            if(empty($check_for_already_existance))
                $this->User_model->insert_data('stored_modules',$insert_data);
            else
                $this->User_model->update_data('stored_modules',array('status' => 1,'next_plan'=>null,'updated_by' => $this->session_user_id,'updated_on' => CurrentDate(),'module_id' => $v['id_module']),array('parent_module_id' => $v['parent_module_id'],'contract_id' => $data['contract_id']));
        }
        //echo '<pre>'.print_r($first_review_modules);exit;            
        
        $contract_info = $this->Contract_model->getContractDetails(array('id_contract' => $data['contract_id']));
        $this->Contract_model->updateContractReview(array('id_contract_review' => $data['contract_review_id'],'contract_review_status' => 'finished','updated_by' => $data['created_by'],'updated_on' => currentDate(),'finalize_comments'=>$finalize_comments,'finalize_without_discussion'=>$is_without_discussion,'contract_owner_id'=>$contract_info[0]['contract_owner_id'],'contract_delegate_id'=>$contract_info[0]['delegate_id']));
        //echo ''.$this->db->last_query(); exit;

        //Updating contract status only if is_workflow === 0 
        if(isset($data['is_workflow']) && $data['is_workflow'] == 0)
            $this->Contract_model->updateContract(array('id_contract' => $data['contract_id'],'contract_status' => 'review finalized'));
        $pending_discussions=$this->Contract_model->getContractDiscussion(array('id_contract_review'=>$data['contract_review_id'],'discussion_status'=>1));
        foreach($pending_discussions as $k=>$v){
            $this->closereviewdiscussion(array('id_contract_review_discussion'=>$v['id_contract_review_discussion'],'contract_id'=>$data['contract_id'],'module_id'=>$v['module_id'],'contract_review_id'=>$data['contract_review_id'],'created_by'=>$data['created_by']));
        }
        
        
        //Unlocking Contract for Review
        $check_review_schedule = $this->Contract_model->check_contract_in_calender(
            array(
                'contract_id' => $data['contract_id'],
                'business_unit_id' => $contract_info[0]['business_unit_id'],
                'relationship_category_id' => $contract_info[0]['relationship_category_id'],
                'provider_id' => $contract_info[0]['provider_name'],
                'is_workflow' => $data['is_workflow'],
                'only_one_contract' => true
            ));
            //echo '<pre>'.$this->db->last_query();
        if($data['is_workflow'] == '0'){
            if($check_review_schedule[0]['recurrence'] == 0){
                //If There is no future planning reviews
                $this->User_model->update_data('contract',array('is_lock'=>0),array('id_contract'=>$data['contract_id']));
                //echo '<pre>'.$this->db->last_query();
            }else if(count($check_review_schedule) <= 1){
                //If There is no future planning reviews
                $this->User_model->update_data('contract',array('is_lock'=>0),array('id_contract'=>$data['contract_id']));
                //echo '<pre>'.$this->db->last_query();
            }
        }
        
        //Checking for Past plannings on this contract
        $check_review_schedule = $this->Contract_model->check_contract_in_calender(
            array(
                'contract_id' => $data['contract_id'],
                'business_unit_id' => $contract_info[0]['business_unit_id'],
                'relationship_category_id' => $contract_info[0]['relationship_category_id'],
                'provider_id' => $contract_info[0]['provider_name'],
                'only_one_contract' => true,
                'id_calender' => $check_review_schedule[0]['id_calender']
            ));
            //echo '<pre>'.$this->db->last_query();
        foreach($check_review_schedule as $cal){
            //String to array of contract ids
            $contracts = explode(',',$cal['contract_id']);                    
            //echo '<pre>'.print_r($contracts);
            foreach($contracts as $con_k => $con_v){
                //Checking for current contract to remove from calendar planning.
                //echo '<br>IF'.$con_v.' == '.$data['contract_id'];
                if($con_v == $data['contract_id']){
                    //Unset if the contract is exists in this planning.
                    unset($contracts[$con_k]);
                    //Add it to completed column.
                    $update_sql = "UPDATE calender SET completed_contract_id = IF(completed_contract_id=''||completed_contract_id IS NULL,".$data['contract_id'].",CONCAT(completed_contract_id,',',".$data['contract_id'].")) WHERE id_calender = ".$cal['id_calender'];
                    $this->User_model->custom_update_query($update_sql);
                }
            }
            $contracts = implode(',',$contracts);
            $update_data = array('contract_id' => $contracts);
            
            if(strlen($contracts) < 1){
                //If there are no contracts available making status to '0'
                $update_data['status'] = 0;
            }
             //echo '<pre>'.print_r($update_data);
            $this->User_model->update_data('calender',$update_data,array('id_calender' => $cal['id_calender']));
             //echo '<pre>'.$this->db->last_query();
            
        }
        //echo '<pre>'.$this->db->last_query();exit;
        ////
        $business_unit = $this->Business_unit_model->getBusinessUnitDetails(array('id_business_unit'=>$contract_info[0]['business_unit_id']));
        $bu_info = $this->User_model->getUserInfo(array('user_id' => $contract_info[0]['contract_owner_id'],'user_status'=>1));
        $contract_review_info = $this->Contract_model->getContractReview(array('contract_id' => $data['contract_id']));
        $cust_admin_info = $this->User_model->getUserInfo(array('customer_id' => $business_unit[0]['customer_id'],'user_role_id' =>2,'user_status'=>1));
        //$contract_review_user = $this->User_model->getUserInfo(array('user_id' => $contract_review_info[0]['created_by']));
        $customer_details = $this->Customer_model->getCustomer(array('id_customer' => $cust_admin_info->customer_id));
        /*$cust_admin = $this->Customer_model->getCustomerAdminList(array('customer_id' => $customer_details[0]['id_customer']));
        $cust_admin = $cust_admin['data'][0];*/
        /*echo 'contract_info'.'<pre>';print_r($cust_admin_info);
        echo 'business'.'<pre>';print_r($business_unit);exit;
        echo 'buinfo'.'<pre>';print_r($bu_info);*/
        //echo 'contract_Review_user'.'<pre>';print_r($contract_review_user);exit;

        if($customer_details[0]['company_logo']=='') {
            $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'company');
        }
        else{
            $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'profile', SMALL_IMAGE);

        }
        if(!empty($customer_details)){ $customer_name = $customer_details[0]['company_name']; }
        $finalised_user = $this->User_model->getUserInfo(array('user_id' => $data['id_user']));
        if(isset($data['is_workflow']) && $data['is_workflow'] == 1){
            $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,'module_key'=>'CONTRACT_WORKFLOW_FINALIZE'));
        }else{
            $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $cust_admin_info->customer_id,'module_key'=>'CONTRACT_REVIEW_FINALIZE'));
        }
        if($template_configurations_parent['total_records']>0 && !empty($cust_admin_info)){
            $template_configurations=$template_configurations_parent['data'][0];
            $wildcards=$template_configurations['wildcards'];
            $wildcards_replaces=array();
            $wildcards_replaces['first_name']=$cust_admin_info->first_name;
            $wildcards_replaces['last_name']=$cust_admin_info->last_name;
            $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
            // $wildcards_replaces['contract_review_finalized_user_name']=$finalised_user->first_name.' '.$finalised_user->last_name.' ('.$finalised_user->user_role_name.')';
            // $wildcards_replaces['contract_review_finalized_date']=dateFormat(currentDate());
            if($data['is_workflow']==1){
                $wildcards_replaces['contract_workflow_finalized_user_name']=$finalised_user->first_name.' '.$finalised_user->last_name.' ('.$finalised_user->user_role_name.')';
                $wildcards_replaces['contract_workflow_finalized_date']=dateFormat(currentDate());
            }
            else{
                $wildcards_replaces['contract_review_finalized_user_name']=$finalised_user->first_name.' '.$finalised_user->last_name.' ('.$finalised_user->user_role_name.')';
                $wildcards_replaces['contract_review_finalized_date']=dateFormat(currentDate());
            }
            $wildcards_replaces['logo']=$customer_logo;
            $wildcards_replaces['year'] = date("Y");
            $wildcards_replaces['url']=WEB_BASE_URL.'html';
            $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
            $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
            /*$from_name=SEND_GRID_FROM_NAME;
            $from=SEND_GRID_FROM_EMAIL;
            $from_name=$cust_admin['name'];
            $from=$cust_admin['email'];*/
            $from_name=$template_configurations['email_from_name'];
            $from=$template_configurations['email_from'];
            $to=$cust_admin_info->email;
            $to_name=$cust_admin_info->first_name.' '.$cust_admin_info->last_name;
            $mailer_data['mail_from_name']=$from_name;
            $mailer_data['mail_to_name']=$to_name;
            $mailer_data['mail_to_user_id']=$cust_admin_info->id_user;
            $mailer_data['mail_from']=$from;
            $mailer_data['mail_to']=$to;
            $mailer_data['mail_subject']=$subject;
            $mailer_data['mail_message']=$body;
            $mailer_data['status']=0;
            $mailer_data['send_date']=currentDate();
            $mailer_data['is_cron']=0;
            $mailer_data['email_template_id']=$template_configurations['id_email_template'];
            //print_r($mailer_data);
            $mailer_id=$this->Customer_model->addMailer($mailer_data);
            if($mailer_data['is_cron']==0) {
                //$mail_sent_status=sendmail($to, $subject, $body, $from);
                $this->load->library('sendgridlibrary');
                $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                if($mail_sent_status==1)
                    $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
            }

        }
        if(isset($contract_info[0]['delegate_id'])){
            $delegate_info = $this->User_model->getUserInfo(array('user_id' => $contract_info[0]['delegate_id'],'user_status'=>1));
            if(isset($delegate_info))
                if($template_configurations_parent['total_records']>0 && !empty($delegate_info)){
                $template_configurations=$template_configurations_parent['data'][0];
                $wildcards=$template_configurations['wildcards'];
                $wildcards_replaces=array();
                $wildcards_replaces['first_name']=$delegate_info->first_name;
                $wildcards_replaces['last_name']=$delegate_info->last_name;
                $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
                // $wildcards_replaces['contract_review_finalized_user_name']=$finalised_user->first_name.' '.$finalised_user->last_name.' ('.$finalised_user->user_role_name.')';
                // $wildcards_replaces['contract_review_finalized_date']=dateFormat(currentDate());
                if($data['is_workflow']==1){
                    $wildcards_replaces['contract_workflow_finalized_user_name']=$finalised_user->first_name.' '.$finalised_user->last_name.' ('.$finalised_user->user_role_name.')';
                    $wildcards_replaces['contract_workflow_finalized_date']=dateFormat(currentDate());
                }
                else{
                    $wildcards_replaces['contract_review_finalized_user_name']=$finalised_user->first_name.' '.$finalised_user->last_name.' ('.$finalised_user->user_role_name.')';
                    $wildcards_replaces['contract_review_finalized_date']=dateFormat(currentDate());
                }
                $wildcards_replaces['logo']=$customer_logo;
                $wildcards_replaces['year'] = date("Y");
                $wildcards_replaces['url']=WEB_BASE_URL.'html';
                $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                /*$from_name = SEND_GRID_FROM_NAME;
                $from = SEND_GRID_FROM_EMAIL;
                $from_name=$cust_admin['name'];
                $from=$cust_admin['email'];*/
                $from_name=$template_configurations['email_from_name'];
                $from=$template_configurations['email_from'];
                $to=$delegate_info->email;
                $to_name=$delegate_info->first_name.' '.$delegate_info->last_name;
                $mailer_data['mail_from_name']=$from_name;
                $mailer_data['mail_to_name']=$to_name;
                $mailer_data['mail_to_user_id']=$delegate_info->id_user;
                $mailer_data['mail_from']=$from;
                $mailer_data['mail_to']=$to;
                $mailer_data['mail_subject']=$subject;
                $mailer_data['mail_message']=$body;
                $mailer_data['status']=0;
                $mailer_data['send_date']=currentDate();
                $mailer_data['is_cron']=0;
                $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                //print_r($mailer_data);
                $mailer_id=$this->Customer_model->addMailer($mailer_data);
                if($mailer_data['is_cron']==0) {
                    //$mail_sent_status=sendmail($to_delegate, $subject, $body, $from);
                    $this->load->library('sendgridlibrary');
                    $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                    if($mail_sent_status==1)
                        $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                }

            }
        }
        if($template_configurations_parent['total_records']>0 && !empty($bu_info)){
            $template_configurations=$template_configurations_parent['data'][0];
            $wildcards=$template_configurations['wildcards'];
            $wildcards_replaces=array();
            $wildcards_replaces['first_name']=$bu_info->first_name;
            $wildcards_replaces['last_name']=$bu_info->last_name;
            $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
            // $wildcards_replaces['contract_review_finalized_user_name']=$finalised_user->first_name.' '.$finalised_user->last_name.' ('.$finalised_user->user_role_name.')';
            // $wildcards_replaces['contract_review_finalized_date']=dateFormat(currentDate());
            if($data['is_workflow']==1){
                $wildcards_replaces['contract_workflow_finalized_user_name']=$finalised_user->first_name.' '.$finalised_user->last_name.' ('.$finalised_user->user_role_name.')';
                $wildcards_replaces['contract_workflow_finalized_date']=dateFormat(currentDate());
            }
            else{
                $wildcards_replaces['contract_review_finalized_user_name']=$finalised_user->first_name.' '.$finalised_user->last_name.' ('.$finalised_user->user_role_name.')';
                $wildcards_replaces['contract_review_finalized_date']=dateFormat(currentDate());
            }
            $wildcards_replaces['logo']=$customer_logo;
            $wildcards_replaces['year'] = date("Y");
            $wildcards_replaces['url']=WEB_BASE_URL.'html';
            $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
            $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
            /*$from_name = SEND_GRID_FROM_NAME;
            $from = SEND_GRID_FROM_EMAIL;
            $from_name=$cust_admin['name'];
            $from=$cust_admin['email'];*/
            $from_name=$template_configurations['email_from_name'];
            $from=$template_configurations['email_from'];
            $to=$bu_info->email;
            $to_name=$bu_info->first_name.' '.$bu_info->last_name;
            $mailer_data['mail_from_name']=$from_name;
            $mailer_data['mail_to_name']=$to_name;
            $mailer_data['mail_to_user_id']=$bu_info->id_user;
            $mailer_data['mail_from']=$from;
            $mailer_data['mail_to']=$to;
            $mailer_data['mail_subject']=$subject;
            $mailer_data['mail_message']=$body;
            $mailer_data['status']=0;
            $mailer_data['send_date']=currentDate();
            $mailer_data['is_cron']=0;
            $mailer_data['email_template_id']=$template_configurations['id_email_template'];
            //print_r($mailer_data);
            $mailer_id=$this->Customer_model->addMailer($mailer_data);
            if($mailer_data['is_cron']==0) {
                //$mail_sent_status=sendmail($to, $subject, $body, $from);
                $this->load->library('sendgridlibrary');
                $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                if($mail_sent_status==1)
                    $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
            }

        }

        $result = array('status'=>TRUE, 'message' => $msg, 'data'=>'');
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function trends_get($DATA=null){
        if(isset($DATA) && !empty($DATA)){
            $data = $DATA;
        }else{
            $data = $this->input->get();
        }
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));
        $this->form_validator->add_rules('contract_review_id', array('required'=>$this->lang->line('contract_review_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1){
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_id'])){
            $data['contract_id'] = pk_decrypt($data['contract_id']);
        }
        if(isset($data['contract_review_id'])){
            $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
        }
        if(isset($data['contract_workflow_id'])){
            $contract_workflow_id = $data['contract_workflow_id'] = pk_decrypt($data['contract_workflow_id']);
        }else{
            $contract_workflow_id = $data['contract_workflow_id'] = 0;
        }
        $data['external_user'] = false;
        if($this->session_user_info->user_role_id == 7){
            $data['external_user'] = true;
        }
        // echo '<pre>'.print_r($data);exit;
        $offset = isset($data['offset'])?$data['offset']:0;
        if(isset($data['trend_type']) && $data['trend_type'] == 'prev')
            $offset = $offset + 5;
        else if(isset($data['trend_type']) && $data['trend_type'] == 'next')
            $offset = $offset - 5;
        else
            $offset = 0;

        $current_review = $this->Contract_model->getCurrentReview($data);

        //echo '<pre>'.print_r($current_review);
        //Declaring Result arrays starts
        $result_array = $review_modules = $review_topics = $review_dates = array();
        //Declaring Result arrays end

        //Current Review Data Starts
        $result_array['offset'] = $offset;
        $result_array['review_date'] = isset($current_review[0])?$current_review[0]['created_on']:'';
        $result_array['review_status'] = isset($current_review[0])?$current_review[0]['contract_review_status']:'';
        $result_array['review_score'] = isset($current_review[0])?$current_review[0]['review_score']:'';
        $result_array['template_name'] = isset($current_review[0])?$current_review[0]['template_name']:'';
        $result_array['contract_workflow_id'] = (isset($data['contract_workflow_id']) && $data['contract_workflow_id']>0)?pk_encrypt($data['contract_workflow_id']):0;
        $result_array['contract_review_id'] = pk_encrypt($data['contract_review_id']);

        //Initializing Prev
        $result_array['prev'] = 0;
        //Checking previous reviews exists or not
        $contract_contributor = $this->User_model->check_record('contract_user',array('contract_id'=>$data['contract_id'],'user_id'=>$this->session_user_id));
        if($offset+5 >= 0){
            if($this->session_user_info->user_role_id == 7 || count($contract_contributor) > 0){
                $get_review_trends = 'SELECT cr.id_contract_review,cr.created_on FROM `contract_review` cr LEFT JOIN contract_user cu ON cr.id_contract_review = cu.contract_review_id WHERE id_contract_review < '.$data['contract_review_id'].' AND contract_workflow_id = '.$contract_workflow_id.' AND cr.contract_id = '.$data['contract_id'].' AND cu.user_id = '.$this->session_user_id.' GROUP BY id_contract_review ORDER BY id_contract_review DESC LIMIT '.($offset+5).',5';
            }else{
                $get_review_trends = 'SELECT id_contract_review,created_on FROM `contract_review` WHERE id_contract_review < '.$data['contract_review_id'].' AND contract_workflow_id = '.$contract_workflow_id.' AND contract_id = '.$data['contract_id'].' ORDER BY id_contract_review DESC LIMIT '.($offset+5).',5';
            }
            $get_review_trends = $this->User_model->custom_query($get_review_trends);
            //Updating Prev
            if(count($get_review_trends))
                $result_array['prev'] = 1;
        }
        
        //Initializing Next
        $result_array['next'] = 0;
        //Checking Next reviews exists or not
        // echo 'offset'.$offset;
        if($offset-5 >= 0){
            if($this->session_user_info->user_role_id == 7 || count($contract_contributor) > 0){
                $get_review_trends = 'SELECT cr.id_contract_review,cr.created_on FROM `contract_review` cr LEFT JOIN contract_user cu ON cr.id_contract_review = cu.contract_review_id WHERE id_contract_review < '.$data['contract_review_id'].' AND contract_workflow_id = '.$contract_workflow_id.' AND cr.contract_id = '.$data['contract_id'].' AND cu.user_id = '.$this->session_user_id.' GROUP BY id_contract_review ORDER BY id_contract_review DESC LIMIT '.($offset-5).',5';
            }else{
                $get_review_trends = 'SELECT id_contract_review,created_on FROM `contract_review` WHERE id_contract_review < '.$data['contract_review_id'].' AND contract_workflow_id = '.$contract_workflow_id.' AND contract_id = '.$data['contract_id'].' ORDER BY id_contract_review DESC LIMIT '.($offset-5).',5';
            }
            $get_review_trends = $this->User_model->custom_query($get_review_trends);
            //Updating Next
            if(count($get_review_trends))
                $result_array['next'] = 1;
        }
        
        $result_array['dates'] = $result_array['modules'] = array();        
        //Current Review Data Ends

        //Checking offset is lessthan or not.
        if($offset < 0)$offset=0;
        if($this->session_user_info->user_role_id == 7 || count($contract_contributor) > 0){
            $get_review_trends = 'SELECT cr.id_contract_review,cr.updated_on as created_on FROM `contract_review` cr LEFT JOIN contract_user cu ON cr.id_contract_review = cu.contract_review_id WHERE id_contract_review < '.$data['contract_review_id'].' AND contract_workflow_id = '.$contract_workflow_id.' AND cr.contract_id = '.$data['contract_id'].' AND cu.user_id = '.$this->session_user_id.' GROUP BY id_contract_review ORDER BY id_contract_review DESC LIMIT '.$offset.',5';
        }else{
            $get_review_trends = 'SELECT id_contract_review,updated_on as created_on FROM `contract_review` WHERE id_contract_review < '.$data['contract_review_id'].' AND contract_workflow_id = '.$contract_workflow_id.' AND contract_id = '.$data['contract_id'].' ORDER BY id_contract_review DESC LIMIT '.$offset.',5';
        }

        $get_review_trends = $this->User_model->custom_query($get_review_trends);
        $index = 0;
        if(count($get_review_trends) > 0){
            $get_review_trends = array_reverse($get_review_trends);
        }
            // echo '<pre>'.print_r($get_review_trends);exit;
            foreach($get_review_trends as $reviews){
                //Review Dates Object Starts
                $review_dates[$index]['date'] = date('M d, Y',strtotime($reviews['created_on']));
                $review_dates[$index]['contract_review_id'] = $reviews['id_contract_review'];
                $review_dates[$index]['contract_workflow_id'] = $result_array['contract_workflow_id'];
                //Review Dates Object Ends
                $index++;
            }
            $review_dates[$next_trend_index]['date'] = 'Current Score';
            $review_dates[$next_trend_index]['contract_review_id'] = $current_review[0]['contract_review_id'];
            $review_dates[$next_trend_index]['contract_workflow_id'] = $result_array['contract_workflow_id'];
            // echo '<pre>'.print_r($review_dates);exit;

            //Checking for contributor
            
            $contributors_modules = array();
            if($this->session_user_info->user_role_id == 3 || $this->session_user_info->user_role_id == 4 || $this->session_user_info->user_role_id == 7){
                $contributors_modules = $this->User_model->check_record('contract_user',array('contract_id'=>$data['contract_id'],'contract_review_id'=>$data['contract_review_id'],'status'=>1,'user_id'=>$this->session_user_id));
                 //echo '<pre>'.$this->db->last_query();
                if(count($contributors_modules)>0){

                    $contributors_modules = array_map(function($i){ return ($i['module_id']); },$contributors_modules);
                }
            }
             //echo '<pre>'.print_r($contributors_modules);exit;
            ////


            //Preparing Module object of current review
            $parent_modules = $this->Contract_model->getTrendsModules(array('contract_review_id'=>$data['contract_review_id'],'contributors_modules'=>$contributors_modules,'user_role_id'=>$this->session_user_info->user_role_id));
            // echo '<pre>'.$this->db->last_query();exit;
            foreach($parent_modules as $key => $module){
                $review_modules[$key]['id_module'] = pk_encrypt($module['id_module']);
                $review_modules[$key]['module_name'] = $module['module_name'];
                $review_modules[$key]['static'] = $module['static'];
                $review_modules[$key]['module_status'] = $module['module_status'];
                $review_modules[$key]['is_workflow'] = $module['is_workflow'];
                $review_modules[$key]['parent_module_id'] = pk_encrypt($module['parent_module_id']);
                foreach($review_dates as $rkey => $reviews){
                    //Geting Module_score from Module table
                    $module_score = $this->User_model->check_record('module',array('contract_review_id' => $reviews['contract_review_id'],'parent_module_id' => $module['parent_module_id']));//echo '<pre>'.$this->db->last_query();
                    //If the module status is 1 then only considering the score.
                    // if((int)$module_score[0]['module_status'])
                    //     $review_modules[$key]['module_scores'][] = isset($module_score[0])?$module_score[0]['module_score']:0;
                    // else
                    //     $review_modules[$key]['module_scores'][] = '';
                        $review_modules[$key]['module_scores'][] = isset($module_score[0])?$module_score[0]['module_score']:0;
                    $review_modules[$key]['module_ids'][] = isset($module_score[0])?$module_score[0]['id_module']:0;
                }

                $parent_topics = $this->Contract_model->getTrendsTopics(array('module_id'=>$module['id_module'],'external_user'=>$data['external_user']));
                
                //Preparing the topic ids againest reviews
                $review_topics = array();
                foreach($parent_topics as $tkey => $topic){
                    $review_topics[$tkey]['id_topic'] = $topic['id_topic'];
                    $review_topics[$tkey]['topic_name'] = $topic['topic_name'];
                    $review_topics[$tkey]['parent_topic_id'] = $topic['parent_topic_id'];
                }
                $review_modules[$key]['topics'] = $review_topics;
            }
            
            //Topic level
            foreach($review_modules as $rm => $rmodule){
                foreach($rmodule['topics'] as $rt => $rtopic){
                    //Geting Topic_score from Module table
                    foreach($rmodule['module_ids'] as $v){
                        $topic_score = $this->Contract_model->getTrendsTopicScore(array('module_ids'=>$v,'parent_topic_id'=>$rtopic['parent_topic_id']));
                        $review_modules[$rm]['topics'][$rt]['topic_scores'][] = isset($topic_score[0])?$topic_score[0]['topic_score']:0;
                        $review_modules[$rm]['topics'][$rt]['id_topic']= pk_encrypt($rtopic['id_topic']);
                        $review_modules[$rm]['topics'][$rt]['parent_topic_id'] = pk_encrypt($rtopic['parent_topic_id']);
                        $review_modules[$rm]['topics'][$rt]['topic_ids'][] = isset($topic_score[0])?$topic_score[0]['id_topic']:0;
                    }
                    $parent_questions = $this->Contract_model->getTrendsQuestions(array('topic_id'=>$rtopic['id_topic'],'external_user'=>$data['external_user']));
                    
                    //Preparing the question ids againest reviews
                    $review_questions = array();
                    foreach($parent_questions as $qkey => $question){
                        $review_questions[$qkey]['id_question'] = $question['id_question'];
                        $review_questions[$qkey]['question_text'] = $question['question_text'];
                        $review_questions[$qkey]['parent_question_id'] = $question['parent_question_id'];
                        $review_questions[$qkey]['question_type'] = $question['question_type'];
                        $review_questions[$qkey]['provider_visibility'] = $question['provider_visibility'];
                    }
                    $review_modules[$rm]['topics'][$rt]['questions'] = $review_questions;
                }
                //unsetting after used;
                unset($review_modules[$rm]['module_ids']);
            }
            
            //Question level
            foreach($review_modules as $rm => $rmodule){
                foreach($rmodule['topics'] as $rt => $rtopic){
                    foreach($rtopic['questions'] as $rq => $rquestion){
                        foreach($rtopic['topic_ids'] as $v){
                            $question_answeres = $this->Contract_model->getTrendsQuestionAnsweres(array('topic_ids'=>$v,'question_type'=>$rquestion['question_type'],'parent_question_id'=>$rquestion['parent_question_id']));
                            // echo '<pre>'.print_r($question_answeres);
                            $review_modules[$rm]['topics'][$rt]['questions'][$rq]['question_answeres'][]=isset($question_answeres[0])?$question_answeres[0]['question_answere']:'';
                            $review_modules[$rm]['topics'][$rt]['questions'][$rq]['id_question'] = pk_encrypt($rquestion['id_question']);
                            $review_modules[$rm]['topics'][$rt]['questions'][$rq]['provider_visibility'] = $rquestion['provider_visibility'];
                            $review_modules[$rm]['topics'][$rt]['questions'][$rq]['parent_question_id'] = pk_encrypt($rquestion['parent_question_id']);
                        }
                    }
                    //unsetting after used;
                    unset($review_modules[$rm]['topics'][$rt]['topic_ids']);
                }
            }

            //Assigning Modules,dates to result array.
            $result_array['modules'] = $review_modules;
            $result_array['dates'] = $review_dates;

            //Encrypting Ids starts
            foreach($result_array['dates'] as $k => $v){
                $result_array['dates'][$k]['contract_review_id'] = pk_encrypt($v['contract_review_id']);
            }
            //Encrypting Ids ends
            
        //}

        if(isset($DATA)){
            return $result_array;
        }else{
            $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result_array);
            $this->response($result, REST_Controller::HTTP_OK);
        }

    }
    public function dashboard_get(){
            // 
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            if($this->session_user_info->user_role_id!=7)
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'1');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'3');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_contract_review'])) {
            $data['id_contract_review'] = pk_decrypt($data['id_contract_review']);
            if(!in_array($data['id_contract_review'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'4');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        // if(isset($data['contract_review_id'])) {
        //     $contract_workflow_id = $data['contract_workflow_id'] = pk_decrypt($data['contract_workflow_id']);
        //     unset($data['contract_workflow_id']);//Unsetting because we don't need it to get contract review
        // }
        if(isset($data['contract_workflow_id'])) {
            $contract_workflow_id = $data['contract_workflow_id'] = pk_decrypt($data['contract_workflow_id']);
        }
        if(isset($data['id_contract_workflow'])) {
            $contract_workflow_id = $data['id_contract_workflow'] = pk_decrypt($data['id_contract_workflow']);
        }
        // echo '<pre>'.print_r($this->session_user_contract_reviews);
        // echo '<pre>'.print_r($data);exit;
        if(isset($data['contract_review_id'])) {
            $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
            if(!in_array($data['contract_review_id'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'5');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }

        /* checking the external user access  start*/
        if($this->session_user_info->user_role_id==7){
            $check_access=$this->User_model->check_record('contract_user',
            array(
                'contract_id'=>$data['contract_id'],
                'user_id'=>$this->session_user_info->id_user,
                'contract_review_id'=>$data['contract_review_id'],
                'status'=>1
                ));
                if(empty($check_access)){
                    $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                    $this->response($result, REST_Controller::HTTP_OK);
                }
        }
        /* checking the external user access  end*/

        $result_array = array();
        $data['order'] = 'DESC';
        $contributor_modules=array();
        $contribution_type = array('expert','validator','provider');        
        
        if(isset($data['id_user']) && isset($data['user_role_id']) && $data['user_role_id']==5){
            $data['contract_user'] = $data['id_user'];
            if(!in_array($data['contract_user'],$this->session_user_contributors)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'6');
                $this->response($result, REST_Controller::HTTP_OK);
            }
            $contributor_modules=$this->Contract_model->getContractContributors(array('user_id'=>$data['contract_user']));
            //echo "<pre>";print_r($contributor_modules);echo "</pre>";
            $contributor_modules_array = array();
            foreach($contribution_type as $v){
                //echo '<pre>'.print_r($v);exit;
                $contributor_modules_array = array_merge($contributor_modules_array,array_map(function($i){ return ($i['module_id']); },$contributor_modules[$v]['data']));
            }
            $contributor_modules = $contributor_modules_array;  
        }
        else{
            $contributor_modules=$this->Contract_model->getContractContributors(array('user_id'=>$data['id_user']));
            //echo "<pre>";print_r($contributor_modules);echo "</pre>";
            $contributor_modules_array = array();
            foreach($contribution_type as $v){
                //echo '<pre>'.print_r($v);exit;
                $contributor_modules_array = array_merge($contributor_modules_array,array_map(function($i){ return ($i['module_id']); },$contributor_modules[$v]['data']));
            }
            $contributor_modules = $contributor_modules_array;
        }
        //echo '<pre>'.print_r($data);exit;
        $reviews = $this->Contract_model->getContractReview($data);
        
        //echo '<pre>'.$this->db->last_query();exit;exit;
        for($s=0;$s<count($reviews);$s++)
        {
            if(!in_array($reviews[$s]['business_unit_id'],$this->session_user_own_business_units)){
                if($this->Contract_model->checkReviewUserAccess(array('contract_review_id'=>$reviews[$s]['id_contract_review'],'id_user'=>$this->session_user_id))>0){

                }
                else{
                    unset($reviews[$s]);
                }
            }
        }
        $reviews=array_values($reviews); 
        $contract_review_id = array_map(function($i){ return $i['id_contract_review']; },$reviews);
        $data['contract_review_id']=(isset($data['contract_review_id']) && $data['contract_review_id']>0)?$data['contract_review_id']:(isset($reviews[0]['id_contract_review'])?$reviews[0]['id_contract_review']:0);
        //echo '<pre>'.print_r($data['contract_review_id']);exit;
        $module_data=array();
        $validator = 0;
        $answer_column = 'question_answer';
        $validator_modules = $this->Contract_model->getValidatormodules(array('contract_review_id'=>$data['contract_review_id'],'user_id'=>$this->session_user_id,'contribution_type'=>1));
        if(count($validator_modules) > 0){
            $validator = 1;
            $answer_column = 'v_question_answer';
        } 
        
        if(isset($data['contract_review_id'])){
            // print_r($data);exit;
            $index = array_search($data['contract_review_id'],$contract_review_id);
            for($s=0;$s<count($reviews);$s++)
            {
                if($reviews[$s]['id_contract_review']==$data['contract_review_id']){
                    $result_array['data'] = array(
                        'review_date' => ($reviews[$s]['updated_date']!='')?date('Y-m-d',strtotime($reviews[$s]['updated_date'])):'',
                        'review_status' => ($reviews[$s]['contract_review_status']=='finished')?'finalized':$reviews[$s]['contract_review_status']
                    );
                }
            }
            $result_array['next'] = isset($contract_review_id[$index-1])?$contract_review_id[$index-1]:0;
            $result_array['prev'] = isset($contract_review_id[$index+1])?$contract_review_id[$index+1]:0; 
            if($data['contract_review_id']>0){
                // print_r($data);exit;
                $check_workflow_type=$this->User_model->check_record('contract_workflow',array('id_contract_workflow'=>$data['contract_workflow_id']));
                // print_r($check_workflow_type[0]['parent_id']);exit;
                if((int)$this->session_user_info->user_role_id == 7)
                    $module_data =  $this->Contract_model->getContractDashboard(array('contract_review_id' => $data['contract_review_id'],'provider_visibility'=>array(1),'dynamic_column' => $answer_column));
                else
                    $module_data =  $this->Contract_model->getContractDashboard(array('contract_review_id' => $data['contract_review_id'],'provider_visibility'=>array(1,0),'dynamic_column' => $answer_column));
                    // echo '<pre>'.$this->db->last_query();exit;
                $contributor_modules=$this->Contract_model->getContractContributors(array('user_id'=>$data['id_user'],'contract_review_id' => $data['contract_review_id']));
                //$contributor_modules=$this->Contract_model->getContractContributors(array('user_id'=>$data['id_user']));
                //echo '<pre>'.$this->db->last_query();exit;
                $contributor_modules_array = array();
                foreach($contribution_type as $v){
                    //echo '<pre>'.print_r($v);exit;
                    $contributor_modules_array = array_merge($contributor_modules_array,array_map(function($i){ return ($i['module_id']); },$contributor_modules[$v]['data']));
                }
                $contributor_modules = $contributor_modules_array;
            }
        }
        else{
            $result_array['data'] = array(
                'review_date' => ($reviews[0]['updated_on']!='')?date('Y-m-d',strtotime($reviews[0]['updated_on'])):'',
                'review_status' => $reviews[0]['contract_review_status']
            );
            $result_array['next'] = 0;
            $result_array['prev'] = isset($reviews[1])?$reviews[1]['id_contract_review']:0;
            if($data['contract_review_id']>0) {
               // print_r($data);exit;
                if((int)$this->session_user_info->user_role_id == 7)
                    $module_data = $this->Contract_model->getContractDashboard(array('contract_review_id' => $reviews[0]['id_contract_review'],'provider_visibility'=>array(1),'dynamic_column' => $answer_column));
                else
                    $module_data = $this->Contract_model->getContractDashboard(array('contract_review_id' => $reviews[0]['id_contract_review'],'provider_visibility'=>array(1,0),'dynamic_column' => $answer_column));
                $contributor_modules=$this->Contract_model->getContractContributors(array('user_id'=>$data['id_user'],'contract_review_id' => $data['contract_review_id']));
                //$contributor_modules=$this->Contract_model->getContractContributors(array('user_id'=>$data['id_user']));
                $contributor_modules_array = array();
                foreach($contribution_type as $v){
                    //echo '<pre>'.print_r($v);exit;
                    $contributor_modules_array = array_merge($contributor_modules_array,array_map(function($i){ return ($i['module_id']); },$contributor_modules[$v]['data']));
                }
                $contributor_modules = $contributor_modules_array;
            }
        }
        $result_array['modules'] = array();
		
        for($s=0;$s<count($module_data);$s++)
        {
            //echo '=='.$module_data[$s]['module_id'].'==<pre>$module_data[$s][module_id],$contributor_modules'.print_r($contributor_modules);exit;
            if(count($contributor_modules)==0 || (count($contributor_modules)>0 && in_array($module_data[$s]['module_id'],$contributor_modules))) {
                $validator_exists = count($this->Contract_model->getValidatormodules(array('contract_review_id'=> $data['contract_review_id'],'module_id'=>$module_data[$s]['module_id'],'contribution_type'=>1)))>0?true:false;
                if($validator_exists  && ($this->session_user_info->user_role_id ==2 || $this->session_user_info->user_role_id == 3 || $this->session_user_info->user_role_id == 4 || $this->session_user_info->user_role_id == 6)){
                    $result_array['modules'][$module_data[$s]['module_id']]['side_by_side_validation'] = true;
                }
                else{
                    $result_array['modules'][$module_data[$s]['module_id']]['side_by_side_validation'] = false;
                }
                if((int)$this->session_user_info->user_role_id == 7)
                    $questions = $this->Contract_model->getTopicData(array('id_topic'=>$module_data[$s]['topic_id'],'provider_visibility'=>1));
                else
                    $questions = $this->Contract_model->getTopicData(array('id_topic'=>$module_data[$s]['topic_id']));
                    // print_r($questions);exit;
                   $new_array = [];
                    foreach($questions['questions'] as $k => $v){
                        // if($validator){
                        //     //
                        //     $questions['questions'][$k]['question_option_answer'] = $questions['questions'][$k]['v_question_option_answer'];
                        //     $questions['questions'][$k]['question_feedback'] = $questions['questions'][$k]['v_question_feedback'];
                        //     if($v['question_type'] == 'date' || $v['question_type'] =='input')
                        //         $questions['questions'][$k]['question_answer'] = $questions['questions'][$k]['v_question_answer'];
                        //         else
                        //             $questions['questions'][$k]['question_answer'] = $questions['questions'][$k]['v_question_option_answer'];
                        //     if(empty($questions['questions'][$k]['question_answer']))
                        //     {
                        //         $questions['questions'][$k]['question_answer'] ="---";
                        //     }
                        // }
                        if($v['question_type'] == 'date' || $v['question_type'] =='input'){
                            $questions['questions'][$k]['question_answer'] = $questions['questions'][$k]['question_answer'];
                        }
                        else{
                            $questions['questions'][$k]['question_answer'] = $questions['questions'][$k]['question_option_answer'];
                            $questions['questions'][$k]['v_question_answer'] = $questions['questions'][$k]['v_question_option_answer'];
                        }
                        //logined user is a validator for this module and module is not submited then changing question_answer  to v_question_answer and question_feedback to v_question_feedback
                        // if($validator && $module_data[$s]['module_status']!=3)
                        // {
                        //     if($v['question_type'] == 'date' || $v['question_type'] =='input'){
                        //         $questions['questions'][$k]['question_answer'] = $questions['questions'][$k]['v_question_answer'];
                        //     }
                        //     else{
                        //         $questions['questions'][$k]['question_answer'] = $questions['questions'][$k]['v_question_option_answer'];
                        //     }
                        //     $questions['questions'][$k]['question_option_answer'] = $questions['questions'][$k]['v_question_option_answer'];
                        //     $questions['questions'][$k]['question_feedback'] =$questions['questions'][$k]['v_question_feedback'];
                        //     if(empty($questions['questions'][$k]['question_answer']))
                        //     {
                        //         $questions['questions'][$k]['question_answer'] ="---";
                        //     }
                        // }
                        if((empty($questions['questions'][$k]['v_question_answer'])))
                        {
                            $questions['questions'][$k]['v_question_answer'] = "---";
                        }
                        $questions['questions'][$k]['validator'] = $validator;
                        $questions['questions'][$k]['discussion'] = array();
                        $review_discussion = "SELECT crdq.id_contract_review_discussion_question,crdq.remarks,crdq.created_on,CONCAT(u.first_name,' ',u.last_name) initiated_by FROM contract_review_discussion crd JOIN contract_review_discussion_question crdq ON crd.id_contract_review_discussion = crdq.contract_review_discussion_id JOIN user u on crdq.created_by = u.id_user WHERE crdq.question_id = ".$v['id_question']." ";
                        $review_discussion = $this->User_model->custom_query($review_discussion);
                        if(count($review_discussion) > 0){
                            $question_discussion = "SELECT crdql.remarks,CONCAT(u.first_name,' ',u.last_name) initiated_by,crdql.created_on FROM contract_review_discussion_question_log crdql LEFT JOIN user u on crdql.created_by = u.id_user WHERE crdql.contract_review_discussion_question_id = ".$review_discussion[0]['id_contract_review_discussion_question']." ORDER BY crdql.id_contract_review_discussion_question_log DESC";
                            $log_index = 0;
                            $question_discussion = $this->User_model->custom_query($question_discussion);
                            foreach($question_discussion as $logk => $logv){
                                $questions['questions'][$k]['discussion']['log'][$log_index]['comments'] = $logv['remarks'];
                                $questions['questions'][$k]['discussion']['log'][$log_index]['created_by'] = $logv['initiated_by'];
                                $questions['questions'][$k]['discussion']['log'][$log_index]['created_on'] = $logv['created_on'];
                                $log_index++;
                            }
                            $questions['questions'][$k]['discussion']['log'][$log_index]['comments'] = $review_discussion[0]['remarks'];
                            $questions['questions'][$k]['discussion']['log'][$log_index]['created_by'] = $review_discussion[0]['initiated_by'];
                            $questions['questions'][$k]['discussion']['log'][$log_index]['created_on'] = $review_discussion[0]['created_on'];

                        }else{
                            $questions['questions'][$k]['discussion'] = '';
                        }
                        $v_attachment_count = 0;
                        $attachment_count = 0;
                        $questions['questions'][$k]['all_attachments'] = $questions['questions'][$k]['attachments'];
                        $questions['questions'][$k]['v_attachments']=[];
                        $questions['questions'][$k]['attachments']=[];
                        foreach($questions['questions'][$k]['all_attachments'] as $key =>$val){
                            if((int)$val['validator_record'])
                            {
                                $v_attachment_count++;
                                $questions['questions'][$k]['v_attachments'][$key] =$questions['questions'][$k]['all_attachments'][$key];
                                $questions['questions'][$k]['v_attachments'][$key]['document_source']=($questions['questions'][$k]['all_attachments'][$key]['document_source']);
                                $questions['questions'][$k]['v_attachments'][$key]['encryptedPath']=pk_encrypt($questions['questions'][$k]['all_attachments'][$key]['document_source']);
                                $questions['questions'][$k]['v_attachments'][$key]['id_document']=pk_encrypt($questions['questions'][$k]['all_attachments'][$key]['id_document']);
                                $questions['questions'][$k]['v_attachments'][$key]['module_id']=pk_encrypt($questions['questions'][$k]['all_attachments'][$key]['module_id']);
                                $questions['questions'][$k]['v_attachments'][$key]['reference_id']=pk_encrypt($questions['questions'][$k]['all_attachments'][$key]['reference_id']);
                            }
                            else
                            {
                                $attachment_count++;
                                $questions['questions'][$k]['attachments'][$key] =$questions['questions'][$k]['all_attachments'][$key];
                                $questions['questions'][$k]['attachments'][$key]['document_source']=($questions['questions'][$k]['all_attachments'][$key]['document_source']);
                                $questions['questions'][$k]['attachments'][$key]['encryptedPath']=pk_encrypt($questions['questions'][$k]['all_attachments'][$key]['document_source']);
                                $questions['questions'][$k]['attachments'][$key]['id_document']=pk_encrypt($questions['questions'][$k]['all_attachments'][$key]['id_document']);
                                $questions['questions'][$k]['attachments'][$key]['module_id']=pk_encrypt($questions['questions'][$k]['all_attachments'][$key]['module_id']);
                                $questions['questions'][$k]['attachments'][$key]['reference_id']=pk_encrypt($questions['questions'][$k]['all_attachments'][$key]['reference_id']);
                            }
                        }
                        $questions['questions'][$k]['v_attachments']=array_values($questions['questions'][$k]['v_attachments']);
                        $questions['questions'][$k]['attachments']=array_values($questions['questions'][$k]['attachments']);
                        $questions['questions'][$k]['attachment_count'] = $attachment_count++;
                        $questions['questions'][$k]['v_attachment_count'] = $v_attachment_count++;
                        //logined user is a validator for this module and module is not submited then changing attachments and attachments count to v_attachments and v_attachment count
                        // if($validator && $module_data[$s]['module_status']!=3)
                        // {
                        //     $questions['questions'][$k]['attachments']=$questions['questions'][$k]['v_attachments'];
                        //     $questions['questions'][$k]['attachment_count'] = $questions['questions'][$k]['v_attachment_count'];
                        // }
                        $questions['questions'][$k]['id_question']=pk_encrypt($questions['questions'][$k]['id_question']);
                        if($result_array['modules'][$module_data[$s]['module_id']]['side_by_side_validation'])
                        {
                            $questions['questions'][$k]['validator']=0;
                        }
                        unset($questions['questions'][$k]['all_attachments']);
                        array_push($new_array,$questions['questions'][$k]);
                        //this block is for creating duplicate question in result set when side by side validation is true
                        if($result_array['modules'][$module_data[$s]['module_id']]['side_by_side_validation'])
                        {
                            $questions['questions'][$k]['validator'] =$validator;
                            $questions['questions'][$k]['is_validator'] =1;
                            if(strtolower($questions['questions'][$k]['v_question_answer']) ==  strtolower($questions['questions'][$k]['question_answer']) )
                            {
                                $questions['questions'][$k]['is_green_diffference'] =1;  
                            }
                            elseif(empty($questions['questions'][$k]['v_question_answer'])||($questions['questions'][$k]['v_question_answer'] =="---") )
                            {
                                $questions['questions'][$k]['is_blue_difference'] =1;  
                            }
                            else{
                                $questions['questions'][$k]['is_red_difference'] =1; 
                            }
                            $questions['questions'][$k]['discussion']='';

                            $questions['questions'][$k]['question_answer'] = $questions['questions'][$k]['v_question_answer'];
                            $questions['questions'][$k]['question_option_answer'] = $questions['questions'][$k]['v_question_option_answer'];
                            $questions['questions'][$k]['question_feedback'] = $questions['questions'][$k]['v_question_feedback'];
                            $questions['questions'][$k]['attachments']=$questions['questions'][$k]['v_attachments'];
                            $questions['questions'][$k]['attachment_count'] = $questions['questions'][$k]['v_attachment_count'];
                            array_push($new_array,$questions['questions'][$k]);
                        }
                    }
                    unset($questions['questions']);
                    $questions['questions'] = $new_array;
                    // if($validator){
                        
                    //     $module_socre = $this->Contract_model->getContributorContractReviewModuleScore(array('dynamic_column'=>$answer_column,'contract_review_id'=>$data['contract_review_id'],'module_ids'=>array($module_data[$s]['module_id'])));
                    //     $module_data[$s]['topic_score'] = getScoreByCount($module_socre[0]);
                    //     // echo '<pre>'.print_r($module_socre[0]);exit;
                    // }
                $result_array['modules'][$module_data[$s]['module_id']]['module_id'] = pk_encrypt($module_data[$s]['module_id']);
                // echo '<pre>'.print_r($module_data[$s]);
                if(!(int)$module_data[$s]['module_status'])
                    $module_data[$s]['module_name'] = $module_data[$s]['module_name'].' (Stored)';
                $result_array['modules'][$module_data[$s]['module_id']]['module_name'] = $module_data[$s]['module_name'];
                $result_array['modules'][$module_data[$s]['module_id']]['static'] = $module_data[$s]['static'];
                $result_array['modules'][$module_data[$s]['module_id']]['module_status'] = $module_data[$s]['module_status'];
                $result_array['modules'][$module_data[$s]['module_id']]['is_workflow'] = $module_data[$s]['is_workflow'];
                $result_array['modules'][$module_data[$s]['module_id']]['module_order'] = $module_data[$s]['module_order'];
                // if($validator_exists && ($module_data[$s]['module_status']==3) && ($this->session_user_info->user_role_id ==2 || $this->session_user_info->user_role_id == 3 || $this->session_user_info->user_role_id == 4)){
                //     $result_array['modules'][$module_data[$s]['module_id']]['side_by_side_validation'] = true;
                // }
                // else{
                //     $result_array['modules'][$module_data[$s]['module_id']]['side_by_side_validation'] = false;
                // }
                $result_array['modules'][$module_data[$s]['module_id']]['topics'][] = array(
                    'topic_id' => pk_encrypt($module_data[$s]['topic_id']),
                    'topic_name' => $module_data[$s]['topic_name'],
                    'topic_score' => $module_data[$s]['topic_score'],
                    'questions' => $questions['questions']
                );
            }
        }
        //echo '<pre>'.print_r($result_array);exit;
        $result_array['modules'] = array_values($result_array['modules']);
        usort($result_array['modules'], function ($a, $b) {
            return $a['module_order'] - $b['module_order'];
        });
        // echo "<pre>";print_r($result_array['modules']);echo "</pre>";

        for($s=0;$s<count($result_array['modules']);$s++) //getting score for module by topics score // getScore is a helper function
        {
            // if((int)$result_array['modules'][$s]['module_status'])
            $result_array['modules'][$s]['module_score'] = getScore($score = array_map(function($i){ return strtolower($i['topic_score']); },$result_array['modules'][$s]['topics']));
        }
        // echo '<pre>'.print_r($result_array['modules']);exit;
        $special_message = false;
        if($this->session_user_info->user_role_id == 3 || $this->session_user_info->user_role_id == 4 || $this->session_user_info->user_role_id == 7){
            $OwnerOrDelegate = "SELECT * FROM contract WHERE id_contract = ".$data['contract_id']." AND (contract_owner_id = $this->session_user_id OR delegate_id = $this->session_user_id)";
            $OwnerOrDelegate = $this->User_model->custom_query($OwnerOrDelegate);

            $IsContributor = $this->User_model->check_record('contract_user',array('contract_review_id'=>$data['contract_review_id'],'user_id'=>$this->session_user_id));
            if($this->session_user_info->user_role_id == 4){
            $isPrevious_deligate = $this->User_model->check_record('contract_review',array('id_contract_review'=>$data['contract_review_id'],'contract_delegate_id'=>$this->session_user_id));
            }
            if($this->session_user_info->user_role_id == 3){
            $isPrevious_owener = $this->User_model->check_record('contract_review',array('id_contract_review'=>$data['contract_review_id'],'contract_owner_id'=>$this->session_user_id));
            }
            
            if(count($OwnerOrDelegate) > 0){

            }else if(count($IsContributor) > 0){
                
            }
            elseif(count($isPrevious_deligate) > 0){

            }
            elseif(count($isPrevious_owener) > 0){

            }
            else{
                $special_message = true;
                $result_array['modules'] = [];
            }
        }
        $check_contract=$this->User_model->check_record('contract',array('id_contract'=>$data['contract_id']));
        if($check_contract[0]['type']=='project'){
            $check_work_flow_name=$this->User_model->check_record('contract_workflow',array('id_contract_workflow'=>$data['contract_workflow_id']));
        }
        if(!empty($check_work_flow_name)){
            $result_array['modules'][0]['module_name']=$check_work_flow_name[0]['workflow_name'];
        }
        $result_array['is_subtask']=0;
        if($check_work_flow_name[0]['parent_id']>0){
            $result_array['is_subtask']=1;
        }
        $get_bu_name=$this->Project_model->getBuname(array('contract_id'=>$data['contract_id']));
        $final_subtask_list=array();
        if($get_bu_name[0]['type']=='project' && $check_work_flow_name[0]['parent_id']==0){
            $get_subtaskList=$this->Project_model->get_subtaskList(array('parent_id'=>$data['contract_workflow_id']));
            $get_module_id=$this->Project_model->get_template_name(array('contract_review_id'=>$data['contract_review_id']));
            $final_subtask_list[0]['workflow_name']=$get_bu_name[0]['bu_name'];
            $final_subtask_list[0]['id_module']=pk_encrypt($get_module_id[0]['id_module']);
            $final_subtask_list[0]['template_name']=$check_work_flow_name[0]['workflow_name'];
            $final_subtask_list[0]['is_workflow']=1;
            $final_subtask_list[0]['is_subtask']=0;
            $final_subtask_list[0]['contract_review_id']=pk_encrypt($data['contract_review_id']);
            $final_subtask_list[0]['contract_workflow_id']=pk_encrypt($data['id_contract_workflow']);

        }
        foreach($get_subtaskList as $sb=>$sbt){
            // print_r($sbt);exit;
            $final_subtask_list[$sb+1]['workflow_name']=$sbt['provider_name'];
            $final_subtask_list[$sb+1]['template_name']=$sbt['template_name'];
            $final_subtask_list[$sb+1]['provider_name']=$sbt['provider_name'];
            $final_subtask_list[$sb+1]['id_module']=pk_encrypt($sbt['id_module']);
            $final_subtask_list[$sb+1]['is_workflow']=1;
            $final_subtask_list[$sb+1]['is_subtask']=1;
            $final_subtask_list[$sb+1]['contract_review_id']=pk_encrypt($sbt['id_contract_review']);
            $final_subtask_list[$sb+1]['contract_workflow_id']=pk_encrypt($sbt['id_contract_workflow']);
        }
        // print_r($result_array['modules'][0]);exit;
        $result_array['subtask_list']=$final_subtask_list;
        $result_array['next'] = pk_encrypt(isset($result_array['next'])?$result_array['next']:NULL);
        $result_array['prev'] = pk_encrypt(isset($result_array['prev'])?$result_array['prev']:NULL);
        $result_array['review_score'] = getScore($score = array_map(function($i){ return strtolower($i['module_score']); },$result_array['modules']));
        $result_array['contract_workflow_id'] = 0;
        if(isset($data['is_workflow']) && $data['is_workflow'] == 1){
            $contract_workflow_query = 'SELECT *,cr.updated_by as last_review FROM contract_workflow cw LEFT JOIN contract_review cr on cr.contract_workflow_id = cw.id_contract_workflow LEFT JOIN template t on cw.workflow_id = t.id_template WHERE cw.id_contract_workflow = '.$contract_workflow_id.' ORDER BY cr.id_contract_review DESC';
            $contract_workflow_query = $this->User_model->custom_query($contract_workflow_query);
            // echo '<pre>'.print_r($contract_workflow_query);exit;
            $result_array['template_name'] = $contract_workflow_query[0]['template_name'];
            $result_array['contract_workflow_id']=pk_encrypt($contract_workflow_id);
        }else{
            $contract_info = 'SELECT t.* FROM template t LEFT JOIN contract c ON t.id_template = c.template_id WHERE c.id_contract = '.$data['contract_id'];
            $contract_info = $this->User_model->custom_query($contract_info);
            // echo '<pre>'.print_r($contract_workflow_query);
            $result_array['template_name']=$contract_info[0]['template_name'];
        }
        $last_submitted = "SELECT cr.updated_on as submetted_on,CONCAT(u.first_name,' ',u.last_name) submitted_by FROM contract_review cr JOIN user u ON cr.updated_by = u.id_user WHERE cr.id_contract_review = ".$data['contract_review_id'];
        $last_submitted = $this->User_model->custom_query($last_submitted);
        $result_array['submetted_on']=$last_submitted[0]['submetted_on'];
        $result_array['submitted_by']=$last_submitted[0]['submitted_by'];
        $result_array['contract_review_id']=pk_encrypt($data['contract_review_id']);
        if(!empty($data['contract_review_id'])){
            $score_review=$this->User_model->check_record('contract_review',array('id_contract_review'=>$data['contract_review_id']));
            $result_array['review_score']=$score_review[0]['review_score'];
        }
        if(strtolower($result_array['data']['review_status']) == 'pending review')
            $result_array['data']['review_status']='Review to Initiate';
        else if(strtolower($result[$s]['review_status']) == 'pending workflow')
            $result_array['data']['review_status']='Task to Initiate';
        else if(strtolower($result[$s]['review_status']) == 'finished')
            $result_array['data']['review_status']='Review Finalized';
        else
            $result_array['data']['review_status']=ucwords(str_replace('workflow','task',$result_array['data']['review_status']));
        if($special_message){
            $result = array('status'=>TRUE, 'special_message'=>true,'message' => $this->lang->line('no_review_access'), 'data'=>$result_array);
        }else{
            $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result_array);
        }
        $this->response($result, REST_Controller::HTTP_OK);

    }

    public function dashboardexport_get(){

        $data = $this->input->get();
        // if($this->session_user_info->customer_id==4){
        //     $result = array('status'=>FALSE, 'error' =>$this->lang->line('unable_download_file'), 'data'=>'');
        //     $this->response($result, REST_Controller::HTTP_OK);
        // }
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            if($this->session_user_info->user_role_id!=7)
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_contract_review'])) {
            $data['id_contract_review'] = pk_decrypt($data['id_contract_review']);
            if(!in_array($data['id_contract_review'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_review_id'])) {
            $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
            if(!in_array($data['contract_review_id'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_workflow_id'])) {
            $data['contract_workflow_id'] = pk_decrypt($data['contract_workflow_id']);
            }
       // $data['export_type']='trends';
        $result_array = array();
        $data['order'] = 'DESC';
        $contributor_modules=array();
        $contribution_type = array('expert','validator','provider'); 
        /*checking the review acces for user start  */
        if(in_array($this->session_user_info->user_role_id,array(4))){
            /* checking contract attachments access for delegate */
            $delegate_access=0;
            $check_delegate_access=$this->User_model->check_record('contract_user',array('contract_id'=>$data['contract_id'],'user_id'=>$this->session_user_info->id_user,'contract_review_id'=>$data['contract_review_id'],'status'=>1));
            if(!empty($check_delegate_access)){
                $delegate_access=1;
            }  
            $check_contract_delgate_access=$this->User_model->check_record('contract',array('id_contract'=>$data['contract_id'],'delegate_id'=>$this->session_user_info->id_user,'is_deleted'=>0));
            if(!empty($check_contract_delgate_access)){
                 $delegate_access=1;
            }
            if($delegate_access==0){
                 $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'),'data'=>'10');
                 echo json_encode($result);exit;
            }
        }
        if(in_array($this->session_user_info->user_role_id,array(3))){
            /* checking contract attachments access for owner */
             $owner_access=0;
             $check_contract_owner_access=$this->User_model->check_record('contract',array('id_contract'=>$data['contract_id'],'contract_owner_id'=>$this->session_user_info->id_user,'is_deleted'=>0));
             if(!empty($check_contract_owner_access)){
                  $owner_access=1;
             }
             $check_owner_access=$this->User_model->check_record('contract_user',array('contract_id'=>$data['contract_id'],'user_id'=>$this->session_user_info->id_user,'contract_review_id'=>$data['contract_review_id'],'status'=>1));
             if(!empty($check_owner_access)){
                  $owner_access=1;
             }
             if($owner_access==0){
                  $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'),'data'=>'11');
                  echo json_encode($result);exit;
              }  
        }
        if(in_array($this->session_user_info->user_role_id,array(6))){
         /* checking contract attachments access for read-only user */
             $contract_id=$data['contract_id'];
             $relation=$this->checkBuwithContract($data['contract_id'], $this->session_user_info->id_user);              
             if(!$relation){
                 $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'),'data'=>'12');
                 echo json_encode($result);exit;
             }
        }
        if(in_array($this->session_user_info->user_role_id,array(7))){
         /* checking contract attachments access for external user */
             $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'),'data'=>'13');
             echo json_encode($result);exit;
        }   
        /*checking the review acces for user end  */
        if(isset($data['id_user']) && isset($data['user_role_id']) && $data['user_role_id']==5){
            $data['contract_user'] = $data['id_user'];
            if(!in_array($data['contract_user'],$this->session_user_contributors)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
            $contributor_modules=$this->Contract_model->getContractContributors(array('user_id'=>$data['contract_user']));
            //echo "<pre>";print_r($contributor_modules);echo "</pre>";
            $contributor_modules_array = array();
            foreach($contribution_type as $v){
                //echo '<pre>'.print_r($v);exit;
                $contributor_modules_array = array_merge($contributor_modules_array,array_map(function($i){ return ($i['module_id']); },$contributor_modules[$v]['data']));
            }
            $contributor_modules = $contributor_modules_array;  
        }
        else{
            $contributor_modules=$this->Contract_model->getContractContributors(array('user_id'=>$data['id_user']));
            //echo "<pre>";print_r($contributor_modules);echo "</pre>";
            $contributor_modules_array = array();
            foreach($contribution_type as $v){
                //echo '<pre>'.print_r($v);exit;
                $contributor_modules_array = array_merge($contributor_modules_array,array_map(function($i){ return ($i['module_id']); },$contributor_modules[$v]['data']));
            }
            $contributor_modules = $contributor_modules_array;
        } 
        if($data['export_type']!=='' && $data['export_type']=='trends'){
            $data['limit']=5;
            // $data['status']='finished';
            // $data['offset']=$data['offset']+1;
            $data['condition']='less_than_current_review';

            $reviews_data = $this->Contract_model->getContractReview($data);
            unset($data['limit']);
            // unset($data['status']);
            unset($data['condition']);

            $reviews_data1 = $this->Contract_model->getContractReview($data);//echo '<pre>'.$this->db->last_query();exit;
            $current_review[0]=$reviews_data1[0];
            $reviews_data=array_merge($current_review,$reviews_data);
            for($s=0;$s<count($reviews);$s++)
            {
                if(!in_array($reviews_data[$s]['business_unit_id'],$this->session_user_own_business_units)){
                    if($this->Contract_model->checkReviewUserAccess(array('contract_review_id'=>$reviews_data[$s]['id_contract_review'],'id_user'=>$this->session_user_id))>0){

                    }
                    else{
                        unset($reviews_data[$s]);
                    }
                }
            }
        
            foreach($reviews_data as $reviews){
                $data['contract_review_id'] = $reviews['id_contract_review'];
                //$data['contract_review_id']=(isset($data['contract_review_id']) && $data['contract_review_id']>0)?$data['contract_review_id']:(isset($reviews[0]['id_contract_review'])?$reviews[0]['id_contract_review']:0);
                $module_data=array();
                if(isset($data['contract_review_id'])){
                    $result_array['review_date'] = ($reviews['updated_date']!='')?date('Y-m-d',strtotime($reviews['updated_date'])):'';
                    if(isset($data['is_workflow']) && $data['is_workflow']==1){
                    $result_array['review_status'] = ($reviews['contract_review_status']=='finished')?'workflow finalized':$reviews['contract_review_status'];  
                    }
                    else{
                        $result_array['review_status'] = ($reviews['contract_review_status']=='finished')?'review finalized':$reviews['contract_review_status'];
                    }
                    //print_r($result_array);exit;
                    if($data['contract_review_id']>0){
                        if((int)$this->session_user_info->user_role_id == 7)
                            $module_data =  $this->Contract_model->getContractDashboard(array('contract_review_id' => $data['contract_review_id'],'provider_visibility'=>array(1)));
                        else
                            $module_data =  $this->Contract_model->getContractDashboard(array('contract_review_id' => $data['contract_review_id'],'provider_visibility'=>array(1,0)));
                            //echo '<pre>'.$this->db->last_query();exit;
                        $contributor_modules=$this->Contract_model->getContractContributors(array('user_id'=>$data['id_user'],'contract_review_id' => $data['contract_review_id']));
                        $contributor_modules_array = array();
                        foreach($contribution_type as $v){
                            //echo '<pre>'.print_r($v);exit;
                            $contributor_modules_array = array_merge($contributor_modules_array,array_map(function($i){ return ($i['module_id']); },$contributor_modules[$v]['data']));
                        }
                        $contributor_modules = $contributor_modules_array;
                    }
                }
               
                $result_array['modules'] = array();
                for($s=0;$s<count($module_data);$s++)
                {
                    if(count($contributor_modules)==0 || (count($contributor_modules)>0 && in_array($module_data[$s]['module_id'],$contributor_modules))) {
                        if((int)$this->session_user_info->user_role_id == 7)
                            $questions = $this->Contract_model->getTopicData(array('id_topic'=>$module_data[$s]['topic_id'],'provider_visibility'=>1));
                        else
                            $questions = $this->Contract_model->getTopicData(array('id_topic'=>$module_data[$s]['topic_id']));
                            foreach($questions['questions'] as $k => $v){
                                foreach($questions['questions'][$k]['attachments'] as $key =>$val){
        
                                    $questions['questions'][$k]['attachments'][$key]['document_source'] =($questions['questions'][$k]['attachments'][$key]['document_source']);
                                    $questions['questions'][$k]['attachments'][$key]['id_document'] =pk_encrypt($questions['questions'][$k]['attachments'][$key]['id_document']);
                                    $questions['questions'][$k]['attachments'][$key]['module_id'] =pk_encrypt($questions['questions'][$k]['attachments'][$key]['module_id']);
                                    $questions['questions'][$k]['attachments'][$key]['reference_id'] =pk_encrypt($questions['questions'][$k]['attachments'][$key]['reference_id']);
                                }
                                $questions['questions'][$k]['id_question']=pk_encrypt($questions['questions'][$k]['id_question']);
                            }
                        $result_array['modules'][$module_data[$s]['module_id']]['module_id'] = pk_encrypt($module_data[$s]['module_id']);
                        if(!(int)$module_data[$s]['module_status'])
                            $module_data[$s]['module_name'] = $module_data[$s]['module_name'].' (Stored)';
                        $result_array['modules'][$module_data[$s]['module_id']]['module_name'] = $module_data[$s]['module_name'];
                        $result_array['modules'][$module_data[$s]['module_id']]['topics'][] = array(
                            'topic_id' => pk_encrypt($module_data[$s]['topic_id']),
                            'topic_name' => $module_data[$s]['topic_name'],
                            'topic_score' => $module_data[$s]['topic_score'],
                            'questions' => $questions['questions']
                        );
                    }
                }
        
                $result_array['modules'] = array_values($result_array['modules']);
                //echo '<pre>'.print_r($result_array['modules']);exit;
                $result_array['contract'] = $this->Contract_model->getContractDetails(array('id_contract'=>$data['contract_id']))[0];
               // echo "<pre>";print_r($result_array['contract']);echo "</pre>";exit;
        
                for($s=0;$s<count($result_array['modules']);$s++) //getting score for module by topics score // getScore is a helper function
                {
                    $result_array['modules'][$s]['module_score'] = getScore($score = array_map(function($i){ return strtolower($i['topic_score']); },$result_array['modules'][$s]['topics']));
                }
                //$result_array['next'] = pk_encrypt(isset($result_array['next'])?$result_array['next']:NULL);
                //$result_array['prev'] = pk_encrypt(isset($result_array['prev'])?$result_array['prev']:NULL);
                $result_array['review_score'] = getScore($score = array_map(function($i){ return strtolower($i['module_score']); },$result_array['modules']));
                $result_array['contract_review_id']=pk_encrypt($data['contract_review_id']);
                $result_array['contract_workflow_id']=pk_decrypt($data['contract_workflow_id']);
                $result_array['is_workflow']=$data['is_workflow'];
                //echo '<pre>'.print_r($result_array);exit;
                $result_array['only_module'] = isset($data['only_module'])?$data['only_module']:true;
                $result_array_new[]=$result_array;

            }
            //print_r($data);exit;
            if(isset($data['is_workflow']) && $data['is_workflow']==1){
                $qurey= "SELECT * FROM contract_review WHERE `contract_id` =".$data['contract_id']."  AND is_workflow=1 ORDER BY id_contract_review DESC ";
                $contract_review_data = $this->User_model->custom_query($qurey);//echo $this->db->last_query();exit;
            }
            else{
            $qurey= "SELECT * FROM contract_review WHERE `contract_id` =".$data['contract_id']."  AND is_workflow=0 ORDER BY id_contract_review DESC ";
                $contract_review_data = $this->User_model->custom_query($qurey);//echo $this->db->last_query();exit; 
            }
             //print_r($contract_review_data);exit;
            $check_contact_name=$this->User_model->check_record('contract',array('id_contract'=>$data['contract_id']));
            if(isset($contract_review_data[0]['updated_on']) && $contract_review_data[0]['updated_on']!=''){
            $result_array_new['review_date'] = date('Y-m-d',strtotime($contract_review_data[0]['updated_on']));
            }
            else{
                $result_array_new['review_date'] = date('Y-m-d',strtotime($contract_review_data[0]['created_on']));
            }
            $result_array_new['contract_name']=$check_contact_name[0]['contract_name'];
            $result_array_new['export_type']='trends';
            //print_r($result_array_new);exit;
            $this->exportdashboard($result_array_new);
        } 
        else{
            //print_r($result_array_new);exit;
            $reviews = $this->Contract_model->getContractReview($data);//echo $this->db->last_query();exit;
            for($s=0;$s<count($reviews);$s++)
            {
                if(!in_array($reviews[$s]['business_unit_id'],$this->session_user_own_business_units)){
                    if($this->Contract_model->checkReviewUserAccess(array('contract_review_id'=>$reviews[$s]['id_contract_review'],'id_user'=>$this->session_user_id))>0){
    
                    }
                    else{
                        unset($reviews[$s]);
                    }
                }
            }
            
            $reviews=array_values($reviews);            //print_r($reviews);exit;
            $contract_review_id = array_map(function($i){ return $i['id_contract_review']; },$reviews);//print_r($contract_review_id);exit;
            $data['contract_review_id']=(isset($data['contract_review_id']) && $data['contract_review_id']>0)?$data['contract_review_id']:(isset($reviews[0]['id_contract_review'])?$reviews[0]['id_contract_review']:0);
            $module_data=array();
            if(isset($data['contract_review_id'])){
                $index = array_search($data['contract_review_id'],$contract_review_id);
                for($s=0;$s<count($reviews);$s++)
                {
                    if($reviews[$s]['id_contract_review']==$data['contract_review_id']){
                            $result_array['review_date'] = ($reviews[$s]['updated_date']!='')?date('Y-m-d',strtotime($reviews[$s]['updated_date'])):'';
                            $result_array['review_status'] = ($reviews[$s]['contract_review_status']=='finished')?'review finalized':$reviews[$s]['contract_review_status'];
                    }
                }
               
                if($data['contract_review_id']>0){
                    if((int)$this->session_user_info->user_role_id == 7)
                        $module_data =  $this->Contract_model->getContractDashboard(array('contract_review_id' => $data['contract_review_id'],'provider_visibility'=>array(1)));
                    else
                        $module_data =  $this->Contract_model->getContractDashboard(array('contract_review_id' => $data['contract_review_id'],'provider_visibility'=>array(1,0)));
                    $contributor_modules=$this->Contract_model->getContractContributors(array('user_id'=>$data['id_user'],'contract_review_id' => $data['contract_review_id']));
                    //echo '<pre>'.$this->db->last_query();exit;
                    $contributor_modules_array = array();
                    foreach($contribution_type as $v){
                        //echo '<pre>'.print_r($v);exit;
                        $contributor_modules_array = array_merge($contributor_modules_array,array_map(function($i){ return ($i['module_id']); },$contributor_modules[$v]['data']));
                    }
                    $contributor_modules = $contributor_modules_array;
                }
            }
            else{
                $result_array['review_date'] = ($reviews[0]['updated_on']!='')?date('Y-m-d',strtotime($reviews[0]['updated_on'])):'';
                $result_array['review_status'] = $reviews[0]['contract_review_status'];
                //$result_array['next'] = 0;
                //$result_array['prev'] = isset($reviews[1])?$reviews[1]['id_contract_review']:0;
                if($data['contract_review_id']>0) {
                    if((int)$this->session_user_info->user_role_id == 7)
                        $module_data = $this->Contract_model->getContractDashboard(array('contract_review_id' => $reviews[0]['id_contract_review'],'provider_visibility'=>array(1)));
                    else
                        $module_data = $this->Contract_model->getContractDashboard(array('contract_review_id' => $reviews[0]['id_contract_review'],'provider_visibility'=>array(1,0)));
                    $contributor_modules=$this->Contract_model->getContractContributors(array('user_id'=>$data['id_user'],'contract_review_id' => $data['contract_review_id']));
                    //echo '<pre>'.$this->db->last_query();exit;
                    $contributor_modules_array = array();
                    foreach($contribution_type as $v){
                        //echo '<pre>'.print_r($v);exit;
                        $contributor_modules_array = array_merge($contributor_modules_array,array_map(function($i){ return ($i['module_id']); },$contributor_modules[$v]['data']));
                    }
                    $contributor_modules = $contributor_modules_array;
                }
            }
            $result_array['modules'] = array();
            for($s=0;$s<count($module_data);$s++)
            {
                if(count($contributor_modules)==0 || (count($contributor_modules)>0 && in_array($module_data[$s]['module_id'],$contributor_modules))) {
                    $validator =0;
                    if(!empty($module_data[$s]['module_id']))
                    {
                        $validator_modules = $this->Contract_model->getValidatormodules(array('module_id'=>$module_data[$s]['module_id'],'contribution_type'=>1));
                        if(count($validator_modules) > 0){
                            $validator = 1;
                        }
                    }
                    if((int)$this->session_user_info->user_role_id == 7)
                        $questions = $this->Contract_model->getTopicData(array('id_topic'=>$module_data[$s]['topic_id'],'provider_visibility'=>1));
                    else
                        $questions = $this->Contract_model->getTopicData(array('id_topic'=>$module_data[$s]['topic_id']));
                        // echo $this->db->last_query();exit;
                        // print_r($questions);exit;
                        foreach($questions['questions'] as $k => $v){
                            foreach($questions['questions'][$k]['attachments'] as $key =>$val){
    
                                $questions['questions'][$k]['attachments'][$key]['document_source'] =($questions['questions'][$k]['attachments'][$key]['document_source']);
                                $questions['questions'][$k]['attachments'][$key]['id_document'] =pk_encrypt($questions['questions'][$k]['attachments'][$key]['id_document']);
                                $questions['questions'][$k]['attachments'][$key]['module_id'] =pk_encrypt($questions['questions'][$k]['attachments'][$key]['module_id']);
                                $questions['questions'][$k]['attachments'][$key]['reference_id'] =pk_encrypt($questions['questions'][$k]['attachments'][$key]['reference_id']);
                            }
                            $questions['questions'][$k]['id_question']=pk_encrypt($questions['questions'][$k]['id_question']);
                        }
                    $result_array['modules'][$module_data[$s]['module_id']]['module_id'] = pk_encrypt($module_data[$s]['module_id']);
                    $result_array['modules'][$module_data[$s]['module_id']]['validator'] = $validator;
                    if(!(int)$module_data[$s]['module_status'])
                        $module_data[$s]['module_name'] = $module_data[$s]['module_name'].' (Stored)';
                    $result_array['modules'][$module_data[$s]['module_id']]['module_name'] = $module_data[$s]['module_name'];
                    $result_array['modules'][$module_data[$s]['module_id']]['topics'][] = array(
                        'topic_id' => pk_encrypt($module_data[$s]['topic_id']),
                        'topic_name' => $module_data[$s]['topic_name'],
                        'topic_score' => $module_data[$s]['topic_score'],
                        'questions' => $questions['questions']
                    );
                }
            }
    
            $result_array['modules'] = array_values($result_array['modules']);
            //echo '<pre>'.print_r($result_array['modules']);exit;
            $result_array['contract'] = $this->Contract_model->getContractDetails(array('id_contract'=>$data['contract_id']))[0];
            //echo "<pre>";print_r($result_array['modules']);echo "</pre>";
    
            for($s=0;$s<count($result_array['modules']);$s++) //getting score for module by topics score // getScore is a helper function
            {
                $result_array['modules'][$s]['module_score'] = getScore($score = array_map(function($i){ return strtolower($i['topic_score']); },$result_array['modules'][$s]['topics']));
            }
            //$result_array['next'] = pk_encrypt(isset($result_array['next'])?$result_array['next']:NULL);
            //$result_array['prev'] = pk_encrypt(isset($result_array['prev'])?$result_array['prev']:NULL);
            $result_array['review_score'] = getScore($score = array_map(function($i){ return strtolower($i['module_score']); },$result_array['modules']));
            $result_array['contract_review_id']=pk_encrypt($data['contract_review_id']);
            $result_array['contract_workflow_id']=$data['contract_workflow_id'];
            $result_array['is_workflow']=$data['is_workflow'];
            //echo '<pre>'.print_r($result_array);exit;
            $result_array['only_module'] = isset($data['only_module'])?$data['only_module']:true;
        }
        // print_r($result_array);exit;
        $this->exportdashboard($result_array);

    }
	
	/////
	
	
	function exportdashboard($data){
        $this->load->library('excel');
        //activate worksheet number 1
        $excelRowstartsfrom=1;
        $excelColumnstartsFrom=0;
        $columnBegin =$excelColumnstartsFrom;
        $excelstartsfrom=$excelRowstartsfrom;
        $question_count = 0;
       
        if($data['export_type']!=='' && $data['export_type']=='trends'){
            $data_trends=$data;
            
            foreach($data_trends as $data1){
                foreach($data1['modules'] as $k => $v){
                    foreach($data1['modules'][$k]['topics'] as $m => $n){
                        $question_count = $question_count + count($n['questions']);
                    }
                }
            }
        }
        else{

            foreach($data['modules'] as $k => $v){
                foreach($data['modules'][$k]['topics'] as $m => $n){
                    $question_count = $question_count + count($n['questions']);
                }
            }
        }
        //echo 'question count'.$question_count;exit;
        //Heading Starts
        $head = $this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($columnBegin+16) . $excelstartsfrom;
        $body = $this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($columnBegin+16) . ($excelstartsfrom+$question_count);
        
        //echo 'body'.$body;exit;
        $this->excel->getActiveSheet()->getStyle($body)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                ),
                'font'  => array(
                    'bold'  => false
                )
            )
        );
        $this->excel->getActiveSheet()->getStyle($head)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin))->setWidth(15);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin+1))->setWidth(15);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin+2))->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin+3))->setWidth(15);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin+4))->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin+5))->setWidth(20);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin+6))->setWidth(15);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin+7))->setWidth(45);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin+8))->setWidth(45);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin+9))->setWidth(25);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin+10))->setWidth(15);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin+11))->setWidth(25);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin+12))->setWidth(25);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin+13))->setWidth(15);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin+14))->setWidth(15);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin+15))->setWidth(15);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin+16))->setWidth(15);
        
        $this->excel->getActiveSheet()->getStyle($head)->getFill()->getStartColor()->setARGB('D1D1D1d1');
        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin) . $excelstartsfrom,'Relation');
        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+1) . $excelstartsfrom,'Contract ID');
        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+2) . $excelstartsfrom,'Contract Name');
        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+3) . $excelstartsfrom,'Category');
        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+4) . $excelstartsfrom,'Review Date');
        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+5) . $excelstartsfrom,'Status');
        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+6) . $excelstartsfrom,'Module Name');
        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+7) . $excelstartsfrom,'Topic Name');
        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+8) . $excelstartsfrom,'Question');
        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+9) . $excelstartsfrom,'Answer');
        //question score
        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+10) . $excelstartsfrom,'Score');

        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+11) . $excelstartsfrom,'Internal feedback');
        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+12) . $excelstartsfrom,'External feedback');
        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+13) . $excelstartsfrom,'Validator Opinion');
        //validator question score
        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+14) . $excelstartsfrom,'Score');

        //$this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+10) . $excelstartsfrom,'Your Feedback');
        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+15) . $excelstartsfrom,'Validator Feedback');
        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+16) . $excelstartsfrom,'Discussion');

        //Heading Ends
        
        //print_r($data);exit;
        if($data['export_type']!=='' && $data['export_type']=='trends'){
            $data_trends=$data;
            unset($data);
            //print_r($data_trends);exit;
            foreach($data_trends as $data){ //print_r($data['review_status']);exit;
                foreach($data['modules'] as $k => $v){ 
        
                    //echo '<pre>'.print_r($data[]).'</pre>';exit;
                    foreach($data['modules'][$k]['topics'] as $m => $n){
                        //echo '<pre>'.print_r($n).'</pre>';exit;
                        foreach($data['modules'][$k]['topics'][$m]['questions'] as $o => $p){
                            $excelstartsfrom++;
                            ///answer RAG Calculation
                            $ans = $p['question_option_answer'];
                            if($p['question_option_answer']=='R') $ans = 'Red';
                            else if($p['question_option_answer']=='A') $ans = 'Amber';
                            else if($p['question_option_answer']=='G') $ans = 'Green';
                            else if($p['question_type']=='date') $ans =!empty($p['question_answer'])?date("d-m-Y",strtotime($p['question_answer'])):'';
                            else $ans = $p['question_option_answer'];
                            ///v_answer RAG Calculation
                            $ans3 = $p['v_question_option_answer'];
                            if($p['v_question_option_answer']=='R') $ans3 = 'Red';
                            else if($p['v_question_option_answer']=='A') $ans3 = 'Amber';
                            else if($p['v_question_option_answer']=='G') $ans3 = 'Green';
                            else if($p['question_type']=='date') $ans3 =!empty($p['v_question_answer'])?date("d-m-Y",strtotime($p['v_question_answer'])):'';
                            else $ans3 = $p['v_question_option_answer'];
                            if(empty($ans3)){ $ans3 ="---";}
                            ///second opinion RAG Calculation
                            $ans2 = $p['second_opinion'];
                            if($p['second_opinion']=='R') $ans2 = 'Red';
                            else if($p['second_opinion']=='A') $ans2 = 'Amber';
                            else if($p['second_opinion']=='G') $ans2 = 'Green';
                            else $ans2 = $p['second_opinion'];
                            if($p['provider_visibility'] == 1)
                            {
                                $colourCell = $this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey(16) . ($excelstartsfrom);
                                $this->excel->getActiveSheet()->getStyle($colourCell)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setRGB('a9d18e');
                            }
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin) . $excelstartsfrom,$data['contract']['provider_name_show']);
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+2) . $excelstartsfrom,$data['contract']['contract_name']);
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+1) . $excelstartsfrom,$data['contract']['contract_unique_id']);
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+3) . $excelstartsfrom,$data['contract']['relationship_category_name']);
                            $format = 'mmm d,YYYY';
                            $date = '';
                            $dateVal = '';
                            if(!empty($data['review_date']))
                            {
                                $date = new DateTime($data['review_date']);
                                $dateVal = PHPExcel_Shared_Date::PHPToExcel($date);
                            }
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+4) . $excelstartsfrom,$dateVal);
                            $this->excel->setActiveSheetIndex(0)->getStyle($this->getkey($columnBegin+4) . $excelstartsfrom)->getNumberFormat()->setFormatCode($format);
                            //$this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+4) . $excelstartsfrom,date_format(date_create($data['review_date']),"M d, Y"));
                            if(isset($data['is_workflow']) && $data['is_workflow']==1)
                            {
                                $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+5) . $excelstartsfrom,$data['review_status']);
                            }
                            else
                            {
                                $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+5) . $excelstartsfrom,$data['review_status']); 
                            }
                            // print_r($data);exit;
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+6) . $excelstartsfrom,$v['module_name']);
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+7) . $excelstartsfrom,$n['topic_name']);
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+8) . $excelstartsfrom,$p['question_text']);
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+9) . $excelstartsfrom,$ans);
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+10) . $excelstartsfrom,questionScore($p['option_value'],$p['question_type']));
                            if($this->session_user_info->user_role_id == 7)
                            {
                                $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+11) . $excelstartsfrom,'---'); 
                            }
                            else
                            {
                                $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+11) . $excelstartsfrom,$p['question_feedback']);
                            }
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+12) . $excelstartsfrom,$p['external_user_question_feedback']);
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+13) . $excelstartsfrom,$ans3);
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+14) . $excelstartsfrom,questionScore($p['v_option_value'],$p['question_type']));
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+15) . $excelstartsfrom,$p['v_question_feedback']);
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+16) . $excelstartsfrom,$ans2);
                        }
                    }
                }
            }
            
        }
        else{
            $workflowReviews=$this->User_model->check_record('contract_review',array('id_contract_review'=>pk_decrypt($data['contract_review_id'])));// echo $this->db->last_query();exit;
            foreach($data['modules'] as $k => $v){ 
                foreach($data['modules'][$k]['topics'] as $m => $n){
                    foreach($data['modules'][$k]['topics'][$m]['questions'] as $o => $p){
                        
                        $excelstartsfrom++;
                        ///answer RAG Calculation
                        $ans = $p['question_option_answer'];
                        if($p['question_option_answer']=='R') $ans = 'Red';
                        else if($p['question_option_answer']=='A') $ans = 'Amber';
                        else if($p['question_option_answer']=='G') $ans = 'Green';
                        else if($p['question_type']=='date') $ans =!empty($p['question_answer'])?date("d-m-Y",strtotime($p['question_answer'])):'';
                        else $ans = $p['question_option_answer'];
                        ///v_answer RAG Calculation
                        $ans3 = $p['v_question_option_answer'];
                        if($p['v_question_option_answer']=='R') $ans3 = 'Red';
                        else if($p['v_question_option_answer']=='A') $ans3 = 'Amber';
                        else if($p['v_question_option_answer']=='G') $ans3 = 'Green';
                        else if($p['question_type']=='date') $ans3 =!empty($p['v_question_answer'])?date("d-m-Y",strtotime($p['v_question_answer'])):'';
                        else $ans3 = $p['v_question_option_answer'];
                        if(empty($ans3)){ $ans3 ="---";}
                        // if(isset($v['validator'])&&$v['validator'] == 0)
                        // {
                        //     $ans3 ="---";
                        // }
                        ///second opinion RAG Calculation
                        $ans2 = $p['second_opinion'];
                        if($p['second_opinion']=='R') $ans2 = 'Red';
                        else if($p['second_opinion']=='A') $ans2 = 'Amber';
                        else if($p['second_opinion']=='G') $ans2 = 'Green';
                        else $ans2 = $p['second_opinion'];
                        if($p['provider_visibility'] == 1)
                        {
                            $colourCell = $this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey(16) . ($excelstartsfrom);
                            $this->excel->getActiveSheet()->getStyle($colourCell)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID)->getStartColor()->setRGB('a9d18e');
                        }
                        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin) . $excelstartsfrom,$data['contract']['provider_name_show']);
                        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+2) . $excelstartsfrom,$data['contract']['contract_name']);
                        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+1) . $excelstartsfrom,$data['contract']['contract_unique_id']);
                        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+3) . $excelstartsfrom,$data['contract']['relationship_category_name']);
                        $format = 'mmm d,YYYY';
                        $date = '';
                        $dateVal = '';
                        if(!empty($data['review_date']))
                        {
                            $date = new DateTime($data['review_date']);
                            $dateVal = PHPExcel_Shared_Date::PHPToExcel($date);
                        }
                        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+4) . $excelstartsfrom,$dateVal);
                        $this->excel->setActiveSheetIndex(0)->getStyle($this->getkey($columnBegin+4) . $excelstartsfrom)->getNumberFormat()->setFormatCode($format);
                        // $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+4) . $excelstartsfrom,date_format(date_create($data['review_date']),"M d, Y"));
                        if(isset($data['is_workflow']) && $data['is_workflow']==1){
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+5) . $excelstartsfrom,ucwords(str_replace('workflow','task',$workflowReviews[0]['contract_review_status'])));
                        }
                        else{
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+5) . $excelstartsfrom,$data['review_status']); 
                        }
                        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+6) . $excelstartsfrom,$v['module_name']);
                        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+7) . $excelstartsfrom,$n['topic_name']);
                        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+8) . $excelstartsfrom,$p['question_text']);
                        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+9) . $excelstartsfrom,$ans);
                        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+10) . $excelstartsfrom,questionScore($p['option_value'],$p['question_type']));
                        if($this->session_user_info->user_role_id == 7)
                        {
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+11) . $excelstartsfrom,'---'); 
                        }
                        else
                        {
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+11) . $excelstartsfrom,$p['question_feedback']);
                        }
                        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+12) . $excelstartsfrom,$p['external_user_question_feedback']);
                        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+13) . $excelstartsfrom,$ans3);
                        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+14) . $excelstartsfrom,questionScore($p['v_option_value'],$p['question_type']));
                        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+15) . $excelstartsfrom,$p['v_question_feedback']);
                        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin+16) . $excelstartsfrom,$ans2);
                    }
                }
            }
            
        }
       
        if(isset($data['is_workflow']) && $data['is_workflow']==1){
            $this->excel->getActiveSheet()->setTitle('WORKFLOW DASHBOARD');
        }
        else{
            $this->excel->getActiveSheet()->setTitle('REVIEW DASHBOARD');
        }
        if($data_trends['export_type']!=='' && $data_trends['export_type']=='trends'){
            $filename = preg_replace("/[^a-z0-9\_\-\.]/i", '',$data_trends['contract_name']).'_'.date("d-m-Y",strtotime($data_trends['review_date'])).'.xls'; //save our workbook as this file 
        }
        else{
            $filename = preg_replace("/[^a-z0-9\_\-\.]/i", '',$data['contract']['contract_name']).'_'.date("d-m-Y",strtotime($data['review_date'])).'.xls'; //save our workbook as this file 
        }
        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
        $file_path = FILE_SYSTEM_PATH.'downloads/' . $filename;
        $objWriter->save($file_path);
        $view_path='downloads/' . $filename;
        $file_path = REST_API_URL.$view_path;
        $file_path = str_replace('::1','localhost',$file_path);
        $insert_id = $this->Download_model->addDownload(array('path'=>$view_path,'filename'=>$filename,'user_id'=>$this->session_user_info->id_user,'access_token'=>substr($_SERVER['HTTP_AUTHORIZATION'],7),'status'=>0,'created_date_time'=>currentDate()));

        $response = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>pk_encrypt($insert_id));
        $this->response($response, REST_Controller::HTTP_OK);
    }

    public function actionItems_get(){
            // 
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($this->session_user_info->customer_id!=$data['customer_id']){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }

        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['created_by'])) {
            $data['created_by'] = pk_decrypt($data['created_by']);
            if($data['created_by']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['responsible_user_id'])) {
            $data['responsible_user_id'] = pk_decrypt($data['responsible_user_id']);
            if($data['responsible_user_id']!=$this->session_user_customer_all_users){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['delegate_id'])) {
            $data['delegate_id'] = pk_decrypt($data['delegate_id']);
            if(!in_array($data['delegate_id'],$this->session_user_delegates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_contract_review_action_item'])) {
            $data['id_contract_review_action_item'] = pk_decrypt($data['id_contract_review_action_item']);
            if(!in_array($data['id_contract_review_action_item'],$this->session_user_contract_action_items)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_id']) && strtolower($data['contract_id'])!='all') {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            if($this->session_user_info->user_role_id!=7)
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id']) && isset($data['id_user'])){
            if($data['user_role_id']==2){

            }
            else if($data['user_role_id']==3 || $data['user_role_id']==8){
                $data['business_unit_id'] = $this->User_model->check_record('business_unit_user',array('user_id'=>$this->session_user_id,'status'=>1));
                $data['business_unit_id'] = array_map(function($i){ return $i['business_unit_id']; },$data['business_unit_id']);
                $contributor_modules = $this->User_model->check_record('contract_user',array('status'=>1,'user_id'=>$this->session_user_id));
                if(count($contributor_modules) > 0)
                    $data['module_id'] = array_map(function($i){ return $i['module_id']; },$contributor_modules);
            }
            else if($data['user_role_id']==4) {
                $data['delegate_id'] = $data['id_user'];
                $contributor_modules = $this->User_model->check_record('contract_user',array('status'=>1,'user_id'=>$this->session_user_id));
                if(count($contributor_modules) > 0)
                    $data['module_id'] = array_map(function($i){ return $i['module_id']; },$contributor_modules);
            }
            else if($data['user_role_id']==6){
                $data['business_unit_id'] = $this->User_model->check_record('business_unit_user',array('user_id'=>$this->session_user_id,'status'=>1));
                $data['business_unit_id'] = array_map(function($i){ return $i['business_unit_id']; },$data['business_unit_id']);
                if($this->session_user_info->is_allow_all_bu==1){
                    $bu_ids = $this->User_model->check_record_selected('GROUP_CONCAT(id_business_unit) as bu_ids','business_unit',array('status'=>1,'customer_id'=>$this->session_user_info->customer_id));
                    $data['business_unit_id'] = explode(',',$bu_ids[0]['bu_ids']);
                }
            }
        }
        if(count($data['business_unit_id'])==0)
            unset($data['business_unit_id']);

        if(isset($data['page_type']) && isset($data['id_user']) && $data['page_type']=='dashboard'){
            if(isset($data['created_by'])){
                unset($data['created_by']);
            }
            $data['responsible_user_id'][] = $data['id_user'];
        }

        // if(isset($data['show_my_action_items']) && isset($data['id_user']) && $data['show_my_action_items']==1){
        //     if(isset($data['created_by'])){
        //         unset($data['created_by']);
        //     }
        //     $data['responsible_user_id'][] = $data['id_user'];
        // }

        $data = tableOptions($data);
        $data['item_status']=1;

        if($this->session_user_info->user_role_id == 7){
            //$data['responsible_user_id'][] = $this->session_user_info->id_user;
            $provider_colleuges = $this->User_model->check_record('user',array('provider'=>$this->session_user_info->provider));
            $provider_colleuges = array_map(function($i){ return $i['id_user']; },$provider_colleuges);
            $data['provider_colleuges'] = $provider_colleuges;
        }//echo '<pre>'.print_r($data);exit; 
        //$data['type']='action_items';  
        // print_r($data['module_id']);exit;   
        if(!empty($data['module_id'])){
            $data['module_id']=array_filter($data['module_id']);
        } 
        if(isset($data['is_advance_filter']) && $data['is_advance_filter'] == 1)
        {
            $get_filters=$this->User_model->getFilter(array('status'=>1,'user_id'=>$this->session_user_info->id_user,'module'=>'action_items','is_union_table'=>0));
            $get_union_filters=$this->User_model->getFilter(array('status'=>1,'user_id'=>$this->session_user_info->id_user,'module'=>'action_items','is_union_table'=>1));
            $data['adv_union_filters']=$get_union_filters;
            $data['adv_filters']=$get_filters;
        }
        $result = $this->Contract_model->getActionItems($data);//echo $this->db->last_query();exit;
        foreach($result['data'] as $key => $value){
            
            
            if($value['contract_id']>0){
                $get_type=$this->User_model->check_record('contract',array('id_contract'=>$value['contract_id']));
                if($get_type[0]['type']=='contract'){
                    $result['data'][$key]['type']='contract';
                }
                else{
                    $result['data'][$key]['type']='project';
                }
            }
            else{
                $result['data'][$key]['type']='project';
            }
            // print_r($result['data']);exit;
            $result['data'][$key]['comments_log'] = $this->Contract_model->contractReviewActionItemLog(array('id_contract_review_action_item' => $result['data'][$key]['id_contract_review_action_item']));//echo $this->db->last_query();exit;
            if(!empty($result['data'][$key]['original_date'])){
                if($result['data'][$key]['original_date']==$result['data'][$key]['due_date']){
                    $result['data'][$key]['original_date']='---';
                }
                else{
                    $result['data'][$key]['original_date'] = date('Y-m-d',strtotime($result['data'][$key]['original_date']));
                }
            }
            else{
                $result['data'][$key]['original_date']='---';
            }
            $result['data'][$key]['due_date'] = date('Y-m-d',strtotime($result['data'][$key]['due_date']));
            $contract_review = $this->Contract_model->getContractReview(array('id_contract_review'=>$result['data'][$key]['contract_review_id']));
            $contract_info = $this->Contract_model->getContractDetails(array('id_contract'=>$result['data'][$key]['contract_id']));
            //echo '<pre>';print_r($contract_review);print_r($contract_info);
            $result['data'][$key]['last_review'] = date('Y-m-d',strtotime($contract_review[0]['updated_date']));
            if(!empty($value['provider_id'])){
                $contract_info[0]['contract_name']='--';
                $get_provider_name=$this->User_model->check_record('provider',array('id_provider'=>$value['provider_id']));
                $contract_info[0]['provider_name_show']=$get_provider_name[0]['provider_name'];
            }
            $providerName = $contract_info[0]['provider_name_show'];
            $result['data'][$key]['provider_id']=pk_encrypt($result['data'][$key]['provider_id']);
            $result['data'][$key]['contract_name'] = $contract_info[0]['contract_name'];
            $result['data'][$key]['provider_name'] = $contract_info[0]['provider_name_show'];
                $user_info = $this->User_model->getUserInfo(array('user_id'=>$value['created_by']));
            $result['data'][$key]['created_by_name'] = $user_info->first_name.' '.$user_info->last_name;
            $result['data'][$key]['contract_id'] = pk_encrypt($result['data'][$key]['contract_id']);
            $result['data'][$key]['contract_review_id'] = pk_encrypt($result['data'][$key]['contract_review_id']);
            $result['data'][$key]['created_by'] = pk_encrypt($result['data'][$key]['created_by']);
            $result['data'][$key]['id_contract_review_action_item'] = pk_encrypt($result['data'][$key]['id_contract_review_action_item']);
            $result['data'][$key]['module_id'] = pk_encrypt($result['data'][$key]['module_id']);
            $result['data'][$key]['responsible_user_id'] = pk_encrypt($result['data'][$key]['responsible_user_id']);
            $result['data'][$key]['topic_id'] = pk_encrypt($result['data'][$key]['topic_id']);
            $result['data'][$key]['updated_by'] = pk_encrypt($result['data'][$key]['updated_by']);
            $result['data'][$key]['question_id'] = pk_encrypt($result['data'][$key]['question_id']);
            $result['data'][$key]['contract_workflow_id'] = pk_encrypt($result['data'][$key]['contract_workflow_id']);
            $result['data'][$key]['status'] = ucfirst($result['data'][$key]['status']);
            foreach($result['data'][$key]['comments_log'] as $keyC => $valueC){
                if(!empty($valueC['comments'])){
                    // print_r($valueC['comments']);exit;
                    $result['data'][$key]['comments_log'][$keyC]['contract_review_action_item_id']=pk_encrypt($result['data'][$key]['comments_log'][$keyC]['contract_review_action_item_id']);
                    $result['data'][$key]['comments_log'][$keyC]['id_contract_review_action_item_log']=pk_encrypt($result['data'][$key]['comments_log'][$keyC]['id_contract_review_action_item_log']);
                    $result['data'][$key]['comments_log'][$keyC]['updated_by']=pk_encrypt($result['data'][$key]['comments_log'][$keyC]['updated_by']);
                }
                else{
                    unset($result['data'][$key]['comments_log'][$keyC]);
                }
            }
            // print_r($result['data'][$key]);exit;
            if($result['data'][$key]['reference_type']=='project' || $result['data'][$key]['type']=='project'){
                $provider_names=$this->Project_model->getactiveprojectProvider(array('project_id'=>pk_decrypt($result['data'][$key]['contract_id'])));
                if(count($provider_names)==0 || count($provider_names)>1){
                    $result['data'][$key]['provider_name']='---';
                }
                if(count($provider_names)==1){
                    $result['data'][$key]['provider_name']=$provider_names[0]['provider_name'];
                }
                
            }
            if($result['data'][$key]['reference_type']=='provider')
            {
                $result['data'][$key]['provider_name']=$providerName;
                $result['data'][$key]['type']="provider";
            }
        }
        //echo '<pre>';print_r($result);exit;
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function actionItemDetails_get(){
        //
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('id_contract_review_action_item', array('required'=>$this->lang->line('id_contract_review_action_item_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        if(isset($data['id_contract_review_action_item'])) {
            $data['id_contract_review_action_item'] = pk_decrypt($data['id_contract_review_action_item']);
            if(!in_array($data['id_contract_review_action_item'],$this->session_user_contract_action_items)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        $result = $this->Contract_model->getActionItemDetails($data);
        foreach($result as $key => $value){
            $result[$key]['comments_log'] = $this->Contract_model->contractReviewActionItemLog(array('id_contract_review_action_item' => $result[$key]['id_contract_review_action_item']));
            $result[$key]['due_date'] = date('Y-m-d',strtotime($result[$key]['due_date']));
            foreach($result[$key]['comments_log'] as $keyC => $valueC){
                $result[$key]['comments_log'][$keyC]['contract_review_action_item_id']=pk_encrypt($result[$key]['comments_log'][$keyC]['contract_review_action_item_id']);
                $result[$key]['comments_log'][$keyC]['id_contract_review_action_item_log']=pk_encrypt($result[$key]['comments_log'][$keyC]['id_contract_review_action_item_log']);
                $result[$key]['comments_log'][$keyC]['updated_by']=pk_encrypt($result[$key]['comments_log'][$keyC]['updated_by']);
            }
        }

        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function providers_get()
    {
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $this->form_validator->add_rules('user_role_id', array('required'=>$this->lang->line('user_role_id_req')));
        $this->form_validator->add_rules('id_user', array('required'=>$this->lang->line('user_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($this->session_user_info->customer_id!=$data['customer_id']){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['created_by'])) {
            $data['created_by'] = pk_decrypt($data['created_by']);
            if($data['created_by']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['responsible_user_id'])) {
            $data['responsible_user_id'] = pk_decrypt($data['responsible_user_id']);
            if($data['responsible_user_id']!=$this->session_user_customer_all_users){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['delegate_id'])) {
            $data['delegate_id'] = pk_decrypt($data['delegate_id']);
            if(!in_array($data['delegate_id'],$this->session_user_delegates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id']) && isset($data['id_user'])){
            if($data['user_role_id']==2){

            }
            else if($data['user_role_id']==3){
                $business_unit = $this->Business_unit_model->getBusinessUnitUser(array('user_id' => $data['id_user'],'status' => '1'));
                $data['business_unit_id'] = array_map(function($i){ return $i['id_business_unit']; },$business_unit);
                $data['session_user_role']=$this->session_user_info->user_role_id;
                $data['session_user_id']=$this->session_user_id;
            }
            else if($data['user_role_id']==4) {
                $data['delegate_id'] = $data['id_user'];
                $data['session_user_role']=$this->session_user_info->user_role_id;
                $data['session_user_id']=$this->session_user_id;
            }
            else
                $data['responsible_user_id'] = $data['id_user'];
        }
        $data = tableOptions($data);
        $result = $this->Contract_model->getProvidersList($data);
        foreach($result as $k=>$v){
            $result[$k]['contract_id']=pk_encrypt($result[$k]['contract_id']);
        }

        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function getTopic_get()
    {
        $data = $this->input->get();

        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $this->form_validator->add_rules('id_topic', array('required'=>$this->lang->line('topic_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_review_id'])) {
            $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
        }
        if(isset($data['id_topic'])) {
            $data['id_topic'] = pk_decrypt($data['id_topic']);
            if(!in_array($data['id_topic'],$this->session_user_contract_review_topics)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if((int)$this->session_user_info->user_role_id == 7){
            $data['provider_visibility'] = 1;
            $result = $this->Contract_model->getTopicData($data);
        }else
            $result = $this->Contract_model->getTopicData($data);
  
        $new_result = [];
        $topicDetails = $this->User_model->check_record("topic",array("id_topic"=>$data['id_topic']));
        if(isset($data['contract_review_id']))
        {
            $validator_exists = count($this->Contract_model->getValidatormodules(array('contract_review_id'=> $data['contract_review_id'],'module_id'=> $topicDetails[0]['module_id'],'contribution_type'=>1)))>0?true:false;
            if($validator_exists  && ($this->session_user_info->user_role_id ==2 || $this->session_user_info->user_role_id == 3 || $this->session_user_info->user_role_id == 4)){
                $result['side_by_side_validation'] = true;
            }
            else{
                $result['side_by_side_validation'] = false;
            }
        }
      
        foreach($result['questions'] as $k => $v){
            //Milesone2 starts
            //echo '<pre>'.print_r($v);exit;
            $result['questions'][$k]['discussion'] = array();
            $review_discussion = "SELECT crdq.id_contract_review_discussion_question,crdq.remarks,crdq.created_on,CONCAT(u.first_name,' ',u.last_name) initiated_by FROM contract_review_discussion crd JOIN contract_review_discussion_question crdq ON crd.id_contract_review_discussion = crdq.contract_review_discussion_id JOIN user u on crdq.created_by = u.id_user WHERE crdq.question_id = ".$v['id_question']." AND crd.discussion_status = 1";
            $review_discussion = $this->User_model->custom_query($review_discussion);
            if(count($review_discussion) > 0){
                $question_discussion = "SELECT crdql.remarks,CONCAT(u.first_name,' ',u.last_name) initiated_by,crdql.created_on FROM contract_review_discussion_question_log crdql LEFT JOIN user u on crdql.created_by = u.id_user WHERE crdql.contract_review_discussion_question_id = ".$review_discussion[0]['id_contract_review_discussion_question']." ORDER BY crdql.id_contract_review_discussion_question_log DESC";
                $log_index = 0;
                $question_discussion = $this->User_model->custom_query($question_discussion);
                foreach($question_discussion as $logk => $logv){
                    $result['questions'][$k]['discussion']['log'][$log_index]['comments'] = $logv['remarks'];
                    $result['questions'][$k]['discussion']['log'][$log_index]['created_by'] = $logv['initiated_by'];
                    $result['questions'][$k]['discussion']['log'][$log_index]['created_on'] = $logv['created_on'];
                    $log_index++;
                }
                $result['questions'][$k]['discussion']['log'][$log_index]['comments'] = $review_discussion[0]['remarks'];
                $result['questions'][$k]['discussion']['log'][$log_index]['created_by'] = $review_discussion[0]['initiated_by'];
                $result['questions'][$k]['discussion']['log'][$log_index]['created_on'] = $review_discussion[0]['created_on'];
            }
            //Milesone2 ends
            $v_attachment_count = 0;
            $attachment_count = 0;
            $result['questions'][$k]['all_attachments'] = $result['questions'][$k]['attachments'];
            $result['questions'][$k]['v_attachments']=[];
            $result['questions'][$k]['attachments']=[];
            foreach($result['questions'][$k]['all_attachments'] as $key =>$val){
                if((int)$val['validator_record'])
                {
                    $v_attachment_count++;
                    $result['questions'][$k]['v_attachments'][$key] =$result['questions'][$k]['all_attachments'][$key];
                    $result['questions'][$k]['v_attachments'][$key]['document_source']=($result['questions'][$k]['all_attachments'][$key]['document_source']);
                    $result['questions'][$k]['v_attachments'][$key]['encryptedPath']=pk_encrypt($result['questions'][$k]['all_attachments'][$key]['document_source']);
                    $result['questions'][$k]['v_attachments'][$key]['id_document']=pk_encrypt($result['questions'][$k]['all_attachments'][$key]['id_document']);
                    $result['questions'][$k]['v_attachments'][$key]['module_id']=pk_encrypt($result['questions'][$k]['all_attachments'][$key]['module_id']);
                    $result['questions'][$k]['v_attachments'][$key]['reference_id']=pk_encrypt($result['questions'][$k]['all_attachments'][$key]['reference_id']);
                }
                else
                {
                    $attachment_count++;
                    $result['questions'][$k]['attachments'][$key] =$result['questions'][$k]['all_attachments'][$key];
                    $result['questions'][$k]['attachments'][$key]['document_source']=($result['questions'][$k]['all_attachments'][$key]['document_source']);
                    $result['questions'][$k]['attachments'][$key]['encryptedPath']=pk_encrypt($result['questions'][$k]['all_attachments'][$key]['document_source']);
                    $result['questions'][$k]['attachments'][$key]['id_document']=pk_encrypt($result['questions'][$k]['all_attachments'][$key]['id_document']);
                    $result['questions'][$k]['attachments'][$key]['module_id']=pk_encrypt($result['questions'][$k]['all_attachments'][$key]['module_id']);
                    $result['questions'][$k]['attachments'][$key]['reference_id']=pk_encrypt($result['questions'][$k]['all_attachments'][$key]['reference_id']);
                }
            }
            $result['questions'][$k]['v_attachments']=array_values($result['questions'][$k]['v_attachments']);
            $result['questions'][$k]['attachments']=array_values($result['questions'][$k]['attachments']);
            $result['questions'][$k]['attachment_count'] = $attachment_count++;
            $result['questions'][$k]['v_attachment_count'] = $v_attachment_count++;

            //    foreach($result['questions'][$k]['attachments'] as $key =>$val){

            //        $result['questions'][$k]['attachments'][$key]['document_source']=($result['questions'][$k]['attachments'][$key]['document_source']);
            //        $result['questions'][$k]['attachments'][$key]['id_document']=pk_encrypt($result['questions'][$k]['attachments'][$key]['id_document']);
            //        $result['questions'][$k]['attachments'][$key]['module_id']=pk_encrypt($result['questions'][$k]['attachments'][$key]['module_id']);
            //        $result['questions'][$k]['attachments'][$key]['reference_id']=pk_encrypt($result['questions'][$k]['attachments'][$key]['reference_id']);
            //    }
            $result['questions'][$k]['id_question']=pk_encrypt($result['questions'][$k]['id_question']);
            unset($result['questions'][$k]['all_attachments']);
            array_push($new_result,$result['questions'][$k]);
            //this block is for creating duplicate question in result set when side by side validation is true
            if($result['side_by_side_validation'])
            {
                //$result['questions'][$k]['validator'] =$validator;
                $result['questions'][$k]['is_validator'] =1;
                if($result['questions'][$k]['question_type']  == "date" )
                {
                    $result['questions'][$k]['ValidatorQuestionAnswer'] = !empty($result['questions'][$k]['v_question_answer'])?$result['questions'][$k]['v_question_answer']:'---';
                    if($result['questions'][$k]['ValidatorQuestionAnswer'] ==  $result['questions'][$k]['question_answer'] )
                    {
                        $result['questions'][$k]['is_green_diffference'] =1;  
                    }
                    elseif(empty($result['questions'][$k]['ValidatorQuestionAnswer'])||($result['questions'][$k]['ValidatorQuestionAnswer'] =="---") )
                    {
                        $result['questions'][$k]['is_blue_difference'] =1;  
                    }
                    else{
                        $result['questions'][$k]['is_red_difference'] =1; 
                    }
                    unset($result['questions'][$k]['ValidatorQuestionAnswer']);
                }
                elseif(($result['questions'][$k]['question_type']  == "input")||($result['questions'][$k]['question_type']  == "dropdown") ||($result['questions'][$k]['question_type']  == "radio") || ($result['questions'][$k]['question_type']  == "rag"))
                {
                    $result['questions'][$k]['ValidatorQuestionOptionAnswer'] = !empty($result['questions'][$k]['v_question_option_answer'])?$result['questions'][$k]['v_question_option_answer']:'---';
                    if(strtolower($result['questions'][$k]['ValidatorQuestionOptionAnswer']) == strtolower($result['questions'][$k]['question_option_answer']))
                    {
                        $result['questions'][$k]['is_green_diffference'] =1;  
                    }
                    elseif(empty($result['questions'][$k]['ValidatorQuestionOptionAnswer'])||($result['questions'][$k]['ValidatorQuestionOptionAnswer'] =="---") )
                    {
                        $result['questions'][$k]['is_blue_difference'] =1;  
                    }
                    else{
                        $result['questions'][$k]['is_red_difference'] =1; 
                    }
                    unset($result['questions'][$k]['ValidatorQuestionOptionAnswer']);
                }
                $result['questions'][$k]['discussion']='';
                $result['questions'][$k]['question_answer'] = $result['questions'][$k]['v_question_answer'];
                $result['questions'][$k]['question_option_answer'] = $result['questions'][$k]['v_question_option_answer'];
                $result['questions'][$k]['question_feedback'] = $result['questions'][$k]['v_question_feedback'];
                $result['questions'][$k]['attachments']=$result['questions'][$k]['v_attachments'];
                $result['questions'][$k]['attachment_count'] = $result['questions'][$k]['v_attachment_count'];
                array_push($new_result,$result['questions'][$k]);
            }
        }
        unset($result['questions']);
        $result['questions'] = $new_result;
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function contractDetails_get(){
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $this->form_validator->add_rules('user_role_id', array('required'=>$this->lang->line('user_role_id_req')));
        $this->form_validator->add_rules('id_user', array('required'=>$this->lang->line('user_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $graph_dataset = true;  //Graph dataset Visibility.
        if(isset($data['tab']))
            $graph_dataset = false;
        
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($this->session_user_info->customer_id!=$data['customer_id']){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }

        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['relationship_category_id'])) {
            $data['relationship_category_id'] = pk_decrypt($data['relationship_category_id']);
            /*if(!in_array($data['customer_user'],$this->session_user_contributors)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }*/
        }
        if(isset($data['customer_user'])) {
            $data['customer_user'] = pk_decrypt($data['customer_user']);
            /*if(!in_array($data['customer_user'],$this->session_user_contributors)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }*/ 
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['business_unit_id']) && !is_array($data['business_unit_id']) && strtolower($data['business_unit_id'])!='all') {
            $data['id_business_unit'] = pk_decrypt($data['business_unit_id']);
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            if(!in_array($data['id_business_unit'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id']) && isset($data['id_user'])){
            $coordinateVal = 50;
            $coordinateMaxVal = 100;
            $coordinateMinVal = 0;
            $coordinateAddVal = 25;

            $currency = $this->Master_model->getCurrencyList(array());
            /*if($data['user_role_id']==2){*/
            $quadrantLabelTR = $quadrantLabelTL = $quadrantLabelBL = $quadrantLabelBR = '';
            $quadrants = $this->Relationship_category_model->RelationshipCategoryList(array('customer_id' => $data['customer_id'],"can_review"=>1));
            if(isset($quadrants['data']) && count($quadrants['data']>0)){
                $quadrants = $quadrants['data'];
                foreach($quadrants as $k=>$v){
                    if($v['relationship_category_quadrant'] == 'Q1'){
                        $quadrantLabelTR = $v['relationship_category_name'];
                    }
                    if($v['relationship_category_quadrant'] == 'Q2'){
                        $quadrantLabelTL = $v['relationship_category_name'];
                    }
                    if($v['relationship_category_quadrant'] == 'Q3'){
                        $quadrantLabelBL = $v['relationship_category_name'];
                    }
                    if($v['relationship_category_quadrant'] == 'Q4'){
                        $quadrantLabelBR = $v['relationship_category_name'];
                    }
                }
            }
            

            $xaxis = $this->Relationship_category_model->getRelationshipClassification(array('customer_id' => $data['customer_id']));
            /*print_r($xaxis); die('end');*/
            if($xaxis && is_array($xaxis) && isset($xaxis[0]['classification_position'])){
                foreach($xaxis as $k=>$v){
                    if($v['classification_position'] == 'x'){
                        $xaxis = $v['is_visible'];
                    }
                    if($v['classification_position'] == 'y'){
                        $yaxis = $v['is_visible'];
                    }
                }
            }
            
            if($xaxis == '0'){
                $left = '';
                $right = '';
            } else {
                $left = $this->Relationship_category_model->getRelationshipClassification(array('customer_id' => $data['customer_id'], 'classification_position' => 'left','classification_status'=>1));
                if($left && is_array($left) && isset($left[0]['classification_name'])){
                    $left = $left[0]['classification_name'];
                }
                $right = $this->Relationship_category_model->getRelationshipClassification(array('customer_id' => $data['customer_id'], 'classification_position' => 'right','classification_status'=>1));
                if($right && is_array($right) && isset($right[0]['classification_name'])){
                    $right = $right[0]['classification_name'];
                }
            }
            
            if($yaxis == '0'){
                $high = '';
                $low = '';
            } else {
                $low = $this->Relationship_category_model->getRelationshipClassification(array('customer_id' => $data['customer_id'], 'classification_position' => 'low','classification_status'=>1,''));
                if($low && is_array($low) && isset($low[0]['classification_name'])){
                    $low = $low[0]['classification_name'];
                }
                $high = $this->Relationship_category_model->getRelationshipClassification(array('customer_id' => $data['customer_id'], 'classification_position' => 'high','classification_status'=>1));
                if($high && is_array($high) && isset($high[0]['classification_name'])){
                    $high = $high[0]['classification_name'];
                }
            }
            
            //Contract
            if(in_array($this->session_user_info->user_role_id,array(3,4))){
                $business_unit = $this->Business_unit_model->getBusinessUnitUser(array('user_id' => $data['id_user'],'status' => '1'));
                $data['business_unit_id'] = array_map(function($i){ return $i['id_business_unit']; },$business_unit);
                $data['session_user_role']=$this->session_user_info->user_role_id;
                $data['session_user_id']=$this->session_user_id;
            }
            if($this->session_user_info->user_role_id==6){
                $data['business_unit_id'] = $this->session_user_business_units;
                if(count($data['business_unit_id'])==0 && $this->session_user_info->is_allow_all_bu==0)
                {
                    $data['business_unit_id']=array(0);
                }
            }
            if($this->session_user_info->user_role_id == 7){
                $data['provider_id'] = $this->session_user_info->provider;
            }
            if(count($data['business_unit_id'])==0)
                unset($data['business_unit_id']);
            /*helper function for ordering smart table grid options*/
            $data = tableOptions($data); 
            if(strlen($data['advancedsearch_get'])>2) 
                $data['advancedsearch_get']=json_decode($data['advancedsearch_get']);
            else
                $data['advancedsearch_get']=false;
                //$data['graph_type']
            if($data['chart_type'] == 'overview'){
                $result = $this->Contract_model->getContractList($data);
                //$result=$this->Contract_model->getAllContractList($data); 
            }
            $data['reviewable_contracts']=true;
            if($data['chart_type'] == 'allcontracts'){
                $data['get_all_records'] =true;
                unset($data['reviewable_contracts']);                
                $get_filters=$this->User_model->getFilter(array('status'=>1,'user_id'=>$this->session_user_info->id_user,'module'=>'all_contracts_list','is_union_table'=>0));
                $data['adv_filters']=$get_filters;
                $get_union_filters=$this->User_model->getFilter(array('status'=>1,'user_id'=>$this->session_user_info->id_user,'module'=>'all_contracts_list','is_union_table'=>1));
                $data['adv_union_filters']=$get_union_filters;      
                $result=$this->Contract_model->getAllContractList($data);//echo $this->db->last_query();exit;
                unset($data['adv_filters']);
                unset($data['adv_union_filters']);
                unset($data['get_all_records']); 
            }
            
            if($data['chart_type'] == 'my_reviews'){

                //unset($data['business_unit_id']);
                if($this->session_user_info->user_role_id == 3){
                    $data['contract_owner_id'] = $this->session_user_id;
                }
                if($this->session_user_info->user_role_id == 4){
                    $data['delegate_id'] = $this->session_user_id;
                }//echo '<pre>'.print_r($data);exit;
                $result = $this->Contract_model->getMyReviewList($data);
                //echo '<pre>'.$this->db->last_query();exit;
            }
            if($data['chart_type'] == 'my_contributions'){
                $result = $this->Contract_model->getMyContributionList($data);
                //echo '<pre>'.$this->db->last_query();exit;
            }

            $sub_contracts = array();
            for($s=0;$s<count($result['data']);$s++)
            {
                //In chart only display reviewcontract information. for this reason skipping(unset) the workflow contract information
                if($result['data'][$s]["is_workflow"]==1){continue;}

                // print_r($result[$s]);
                $data['parent_contract_id'] = $result['data'][$s]['id_contract'];
                unset($data['pagination']);

                if($data['chart_type'] == 'overview'){
                    //sub contracts graph only for overvew graph.
                    $temp = $this->Contract_model->getContractList($data)['data'];
                   // $temp=$this->Contract_model->getAllContractList($data)['data'];
                    $sub_contracts = array_merge($sub_contracts,$temp);
                    // if(count($sub_contracts)>0)
                    //     echo $this->db->last_query();
                }
                if($data['chart_type'] == 'allcontracts'){
                    unset($data['reviewable_contracts']);
                   $temp= $this->Contract_model->getAllContractList($data)['data'];
                    $sub_contracts = array_merge($sub_contracts,$temp);
                   
                }
                // print_r($data);exit;
                // if($sub_contracts[$s]["is_workflow"]==0){

                // }
                $result['data'][$s]['review_by'] = $result['data'][$s]['last_review'] = '---';
                $last_finalized_review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $result['data'][$s]['id_contract'],'order' => 'DESC','contract_review_status'=>'finished'));
                if(!empty($last_finalized_review) && isset($last_finalized_review[0]['id_contract_review']) && $last_finalized_review[0]['id_contract_review']!='' && $last_finalized_review[0]['id_contract_review']!=0) {
                    $result['data'][$s]['review_by'] = $last_finalized_review[0]['review_by'];
                    if($last_finalized_review[0]['review_on']!='---')
                        $result['data'][$s]['last_review'] = date('Y-m-d',strtotime($last_finalized_review[0]['review_on']));
                }
                $review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $result['data'][$s]['id_contract'],'order' => 'DESC'));
                if(!empty($review) && isset($review[0]['id_contract_review']) && $review[0]['id_contract_review']!='' && $review[0]['id_contract_review']!=0) {
                    /*$result['data'][$s]['review_by'] = $review[0]['review_by'];
                        if($review[0]['review_on']!='---')
                            $result['data'][$s]['last_review'] = date('Y-m-d',strtotime($review[0]['review_on']));*/

                            /*
                        in some cases contract_review_id not getting, that is why we are checking contract_review_id and if not existed passing contrat_review_id manually to data array. 
                    */
                    $result['data'][$s]['id_contract_review'] = $review[0]['id_contract_review'] = $result['data'][$s]['id_contract_review'];
                //getting score of recent review
				if((int)$this->session_user_info->contribution_type == 3)
                    $provider_visibility = array(1);
                $module_score = $this->Contract_model->getContractReviewModuleScore(array('contract_review_id' => $review[0]['id_contract_review']));
                    if(!isset($data["contract_review_id"])){
                        $data["contract_review_id"] = $review[0]['id_contract_review'];
                    
                        //getting user individual modules
                        $user_modules = $this->Contract_model->getContractReviewModule($data);
                        
                        //this condition in for loop, if we not unset the contract_review_id, then next loop will not enter in this condition.
                        unset($data["contract_review_id"]);

                        //comparing $user_modules and $module_sore, if any modules exists in both arrays then making as new array.
                        $new_array = [];
                        foreach($module_score as $ms){
                            foreach($user_modules as $um){
                                if($um["id_module"]==$ms["module_id"]){
                                    $new_array[] = $ms;
                                }
                            }
                        }
                        //replacing $module_score with $new_array
                        $module_score = $new_array;
                    }//if condition end

                    
                    for($sr=0;$sr<count($module_score);$sr++)
                    {
                        $module_score[$sr]['score'] = getScoreByCount($module_score[$sr]);
                    }
                    $result['data'][$s]['score'] = getScore($scope = array_map(function($i){ return strtolower($i['score']); },$module_score));
                }
                else{
                    $result['data'][$s]['score'] = 0;
                }

                $result['data'][$s]['contract_start_date'] = date('Y-m-d',strtotime($result['data'][$s]['contract_start_date']));
                $result['data'][$s]['contract_end_date'] = date('Y-m-d',strtotime($result['data'][$s]['contract_end_date']));
                //getting action items of a recent review based on user role
                if(!empty($review) && isset($review[0]['id_contract_review']) && $review[0]['id_contract_review']!='' && $review[0]['id_contract_review']!=0) {
                    $action_data = array('id_contract' => $result['data'][$s]['id_contract']);
                    if (isset($data['id_user']))
                        $action_data['id_user'] = $data['id_user'];
                    if (isset($data['user_role_id']))
                        $action_data['user_role_id'] = $data['user_role_id'];
                    $action_data['item_status'] = 1;
                    $action_data['id_contract_review'] = $review[0]['id_contract_review'];
                    //getting action items count of a recent review
                    $result['data'][$s]['action_item_count'] = count($this->Contract_model->getContractReviewActionItemsList($action_data));
                }
                else{
                    $result['data'][$s]['action_item_count']=0;
                }
            }
            for($s=0;$s<count($sub_contracts);$s++)
            {
                $data['parent_contract_id'] = $sub_contracts[$s]['id_contract'];
                unset($data['pagination']);
                if($data['chart_type'] == 'overview'){
                    $temp = $this->Contract_model->getContractList($data)['data'];
                    $sub_contracts = array_merge($sub_contracts,$temp);
                }
                if($data['chart_type'] == 'allcontracts'){
                    unset($data['reviewable_contracts']);
                   $temp= $this->Contract_model->getAllContractList($data)['data'];
                    $sub_contracts = array_merge($sub_contracts,$temp);                   
                }

                $sub_contracts[$s]['review_by'] = $sub_contracts[$s]['last_review'] = '---';
                $last_finalized_review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $sub_contracts[$s]['id_contract'],'order' => 'DESC','contract_review_status'=>'finished'));
                if(!empty($last_finalized_review) && isset($last_finalized_review[0]['id_contract_review']) && $last_finalized_review[0]['id_contract_review']!='' && $last_finalized_review[0]['id_contract_review']!=0) {
                    $sub_contracts[$s]['review_by'] = $last_finalized_review[0]['review_by'];
                    if($last_finalized_review[0]['review_on']!='---')
                        $sub_contracts[$s]['last_review'] = date('Y-m-d',strtotime($last_finalized_review[0]['review_on']));
                }
                $review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $sub_contracts[$s]['id_contract'],'order' => 'DESC'));
                if(!empty($review) && isset($review[0]['id_contract_review']) && $review[0]['id_contract_review']!='' && $review[0]['id_contract_review']!=0) {
                    /*$sub_contracts[$s]['review_by'] = $review[0]['review_by'];
                    if($review[0]['review_on']!='---')
                        $sub_contracts[$s]['last_review'] = date('Y-m-d',strtotime($review[0]['review_on']));*/

                    //getting score of recent review
                    $module_score = $this->Contract_model->getContractReviewModuleScore(array('contract_review_id' => $review[0]['id_contract_review']));
                    for($sr=0;$sr<count($module_score);$sr++)
                    {
                        $module_score[$sr]['score'] = getScoreByCount($module_score[$sr]);
                    }
                    $sub_contracts[$s]['score'] = getScore($scope = array_map(function($i){ return strtolower($i['score']); },$module_score));
                }
                else{
                    $sub_contracts[$s]['score'] = 0;
                }

                $sub_contracts[$s]['contract_start_date'] = date('Y-m-d',strtotime($sub_contracts[$s]['contract_start_date']));
                $sub_contracts[$s]['contract_end_date'] = date('Y-m-d',strtotime($sub_contracts[$s]['contract_end_date']));
                //getting action items of a recent review based on user role
                if(!empty($review) && isset($review[0]['id_contract_review']) && $review[0]['id_contract_review']!='' && $review[0]['id_contract_review']!=0) {
                    $action_data = array('id_contract' => $sub_contracts[$s]['id_contract']);
                    if (isset($data['id_user']))
                        $action_data['id_user'] = $data['id_user'];
                    if (isset($data['user_role_id']))
                        $action_data['user_role_id'] = $data['user_role_id'];
                    $action_data['item_status'] = 1;
                    $action_data['id_contract_review'] = $review[0]['id_contract_review'];
                    //getting action items count of a recent review
                    $sub_contracts[$s]['action_item_count'] = count($this->Contract_model->getContractReviewActionItemsList($action_data));
                }
                else{
                    $sub_contracts[$s]['action_item_count']=0;
                }
            } 

            $contract = array_merge($result['data'],$sub_contracts);

            $quadrantMaxVal = 0;
            $firstQuadrant = $secondQuadrant = $thirdQuadrant = $fourthQuadrant = [];
            $data = array();
            $color = array('red' => '#ff0000','amber' =>  '#ff9900','green' =>  '#5bb166','blue' =>  '#0c7cd5','n/a'=>'#ccc');
            $currentcyLabel = '&euro;';
            $mail_currecy=$this->User_model->check_record('currency',array('customer_id'=>$data['customer_id'],'is_maincurrency'=>1));
            foreach($contract as $k=>$v){
                $Projected_value=0;
                    $contract_info = $this->User_model->check_record_selected('id_contract,contract_name,currency_id,contract_value,contract_value_period,po_number,additional_recurring_fees,additional_recurring_fees_period,additonal_one_off_fees,contract_start_date,contract_end_date,TIMESTAMPDIFF(MONTH,contract_start_date,contract_end_date) months','contract',array('id_contract'=>$v['id_contract']));
                    $graph = $this->spent_mngment_graph('spent_line','Actual Spent',$contract_info[0]);
                    $get_exg_rate=$this->User_model->getCurrencyDetails(array('contract_id'=>$contract_info[0]['id_contract']));
                    // echo $this->db->last_query();exit;
                    $exhange_value=1;
                    $exhange_value=str_replace(',','.',$get_exg_rate[0]['euro_equivalent_value']);
                    if($exhange_value == 0 || $get_exg_rate[0]['currency_name']==$mail_currecy[0]['currency_name']){
                        $exhange_value=1;
                    }
                    $v['contract_value'] = ($exhange_value) *(array_sum(array_map(function($i){ return (int)$i->data[0]->value;},$graph->dataset)));

                if($v["is_workflow"]==0 && $v["can_review"]==1 && $v['Projected_value']>0){
                    if($v['relationship_category_name'] == $quadrantLabelTR){
                        $firstQuadrant[$k] = $v;
                    }
                    if($v['relationship_category_name'] == $quadrantLabelTL){
                        $secondQuadrant[$k] = $v;
                    }
                    if($v['relationship_category_name'] == $quadrantLabelBL){
                        $thirdQuadrant[$k] = $v;
                    }
                    if($v['relationship_category_name'] == $quadrantLabelBR){
                        $fourthQuadrant[$k] = $v;
                    }
                    $quadrantMaxVal += $v['contract_value'];
                }
            }

            $firstIndx = $secondIndx = $thirdIndx = $fourthIndx = 1;
            $firstQuadrantCount = $secondQuadrantCount = $thirdQuadrantCount = $fourthQuadrantCount = 1;
            $firstQuadrantCount=$firstQuadrantCount+count($firstQuadrant);
            $secondQuadrantCount=$secondQuadrantCount+count($secondQuadrant);
            $thirdQuadrantCount=$thirdQuadrantCount+count($thirdQuadrant);
            $fourthQuadrantCount=$fourthQuadrantCount+count($fourthQuadrant);
            // print_r($contract);
            foreach($contract as $k=>$v){
                if($v["is_workflow"]==0 && $v["can_review"]==1 && $v['Projected_value']>0){
                    $Projected_value=0;
                    $contract_info = $this->User_model->check_record_selected('id_contract,contract_name,currency_id,contract_value,contract_value_period,po_number,additional_recurring_fees,additional_recurring_fees_period,additonal_one_off_fees,contract_start_date,contract_end_date,TIMESTAMPDIFF(MONTH,contract_start_date,contract_end_date) months','contract',array('id_contract'=>$v['id_contract']));
                    $graph = $this->spent_mngment_graph('spent_line','Actual Spent',$contract_info[0]);
                    $get_exg_rate=$this->User_model->getCurrencyDetails(array('contract_id'=>$contract_info[0]['id_contract']));
                    $exhange_value=1;
                    $exhange_value=str_replace(',','.',$get_exg_rate[0]['euro_equivalent_value']);
                    if($exhange_value == 0 || $get_exg_rate[0]['currency_name']==$mail_currecy[0]['currency_name']){
                        $exhange_value=1;
                    }
                    $v['contract_value'] = ($exhange_value) *(array_sum(array_map(function($i){ return (int)$i->data[0]->value;},$graph->dataset)));


                    //due to union query we wear getting error with same column name. that's why we are managing one column without changing old code.
                    $v['provider_name'] = $v['providerName'];
                    unset($v['providerName']);
                    
                    if($v['relationship_category_name'] == $quadrantLabelTR){
                        $x = $coordinateVal+(($coordinateVal/$firstQuadrantCount)*$firstIndx);
                        $y = $coordinateVal+(($coordinateVal/$firstQuadrantCount)*$firstIndx);
                        if($firstIndx%3==0) {
                            //$y = $y + 10;//random
                        }
                        else if($firstIndx%3==1) {
                            $y = $y + 5;//random
                        }
                        else {
                            $x = $x + 5;//random
                        }
                        /*$x=rand($coordinateVal+5,$coordinateMaxVal-5);
                        $y=rand($coordinateVal+5,$coordinateMaxVal-5);*/
                        $z = ($v['contract_value']/$quadrantMaxVal)*100;

                        $coordinate = 1;
                        $firstIndx++;
                    }
                    if($v['relationship_category_name'] == $quadrantLabelTL){
                        $x = $coordinateVal-(($coordinateVal/$secondQuadrantCount)*$secondIndx);
                        $y = $coordinateVal+(($coordinateVal/$secondQuadrantCount)*$secondIndx);
                        if($secondIndx%3==0) {
                            //$y = $y + 10;//random
                        }
                        else if($secondIndx%3==1) {
                            $y = $y + 5;//random
                        }
                        else {
                            $x = $x - 5;//random
                        }
                        $z = ($v['contract_value']/$quadrantMaxVal)*100;
                        /*$x=rand($coordinateMinVal+5,$coordinateVal-5);
                        $y=rand($coordinateVal+5,$coordinateMaxVal-5);*/
                        $coordinate = 2;
                        $secondIndx++;
                    }
                    if($v['relationship_category_name'] == $quadrantLabelBL){
                        $x = $coordinateVal-(($coordinateVal/$thirdQuadrantCount)*$thirdIndx);
                        $y = $coordinateVal-(($coordinateVal/$thirdQuadrantCount)*$thirdIndx);
                        if($thirdIndx%3==0) {
                            //$y = $y - 10;//random
                        }
                        else if($thirdIndx%3==1) {
                            $y = $y - 5;//random
                        }
                        else {
                            $x = $x - 5;//random
                        }
                        /*$x=rand($coordinateMinVal+5,$coordinateVal-5);
                        $y=rand($coordinateMinVal+5,$coordinateVal-5);*/
                        $z = ($v['contract_value']/$quadrantMaxVal)*100;
                        $coordinate = 3;
                        $thirdIndx++;
                    }
                    if($v['relationship_category_name'] == $quadrantLabelBR){
                        $x = $coordinateVal+(($coordinateVal/$fourthQuadrantCount)*$fourthIndx);
                        $y = $coordinateVal-(($coordinateVal/$fourthQuadrantCount)*$fourthIndx);
                        if($fourthIndx%3==0) {
                            //$y = $y - 10;//random
                        }
                        else if($fourthIndx%3==1) {
                            $y = $y - 5;//random
                        }
                        else {
                        $x = $x + 5;//random
                        }
                        /*$x=rand($coordinateVal+5,$coordinateMaxVal-5);
                        $y=rand($coordinateMinVal+5,$coordinateVal-5);*/
                        $z = ($v['contract_value']/$quadrantMaxVal)*100;
                        $coordinate = 4;
                        $fourthIndx++;
                    }

                    if($z<1){
                        $z = 1;
                    }
                    foreach($currency as $k1=>$v1){
                        if($v['currency_id'] == $v1['id_currency']){
                            $z = $z*$v1['euro_equivalent_value']>0?$v1['euro_equivalent_value']:1;
                            $currencyName = $v1['currency_name'];
                        }
                    }
                    $v['contract_value'] = $this->a_number_format($v['contract_value'], 2, '.',",",3);

                    $status = '';
                    $score = "<tr><td class='labelDiv' align='right'>Score</td><td class=''> </td><td class='allpadding'><span class='status-widget font-weight-bold' >";
                    if($v['contract_status']=='new' || $v['score']=='0'){
                        $score .= "<span class=''></span><span class=''></span><span class=''></span>";
                        $scoreText = '';
                    } else {
                        $scoreText = strtolower($v['score']);
                        if($scoreText == 'red')
                            $score .= "<span class='".strtolower($scoreText)."-active'></span><span class=''></span><span class=''></span>";
                        else if($scoreText == 'amber')
                            $score .= "<span class=''></span><span class='".strtolower($scoreText)."-active'></span><span class=''></span>";
                        else if($scoreText == 'green')
                            $score .= "<span class=''></span><span class=''></span><span class='".strtolower($scoreText)."-active'></span>";
                        else
                            $score .= "<span class=''></span><span class=''></span><span class=''></span>";
                    }
                    $score .= "</span></td></tr>";

                    if($v['contract_status']=='new' || $scoreText == ''){
                        $bubble_color=$color['blue'];
                    }
                    else{
                        $bubble_color=$color[$scoreText];
                    }

                    if(isset($v['contract_status'])){
                        $status = "<tr><td class='labelDiv' align='right'>Status</td><td class=''> </td><td class='allpadding'>".ucfirst($v['contract_status'])."</td></tr>";
                    }

                    $last_review = "<tr><td class='labelDiv' align='right'>Last Review</td><td class=''> </td><td class='allpadding'>";
                    if($v['last_review'] != '---'){
                        $last_review .= date('M d,Y',strtotime($v['last_review']));
                    }else{
                        $last_review .= " -- ";
                    }
                    $last_review .= "</td></tr>";

                    $created_on = date('M d,Y',strtotime($v['created_on']));
                    $contract_value=currencyFormat($v['contract_value'],'EUR');
                    $currentcyLabel=!empty(CurrencySymbol($v['currency_name']))?CurrencySymbol($v['currency_name']):'';
                    // $data[] = array(
                    //     'x' => $x,
                    //     'y' => $y,
                    //     'z' => $z,
                    //     'name' => $v['contract_name'],
                    //     'color' => $bubble_color,
                    //     'tooltext' => "<div class='color_change'><table width='220'><tr><td class='labelDiv' align='right'>Provider</td><td class=''> </td><td class='allpadding'>{$v['provider_name']}</td></tr><tr><td class='labelDiv' align='right'>Contract Name</td><td class=''> </td><td class='allpadding'>{$v['contract_name']}</td></tr><tr><td class='labelDiv' align='right'>Business Unit</td><td class=''> </td><td class='allpadding'>{$v['bu_name']}</td></tr><tr><td class='labelDiv' align='right'>Contract Value</td><td class=''> </td><td class='allpadding'>{$contract_value} {$currentcyLabel}</td></tr><tr><td class='labelDiv' align='right'>Created Date</td><td class=''> </td><td class='allpadding'>{$created_on}</td></tr>{$status}{$last_review}{$score}</table></div>",
                    //     'coordinate' => $coordinate,
                    //     'review' => $v['last_review'],
                    //     'score' => $scoreText
                    // );
                    $data[] = array(
                        'x' => $x,
                        'y' => $y,
                        'z' => $z,
                        'name' => $v['contract_name'],
                        'color' => $bubble_color,
                        'tooltext' => "<div class='color_change'><table width='220'><tr><td class='labelDiv' align='right'>Provider</td><td class=''> </td><td class='allpadding'>{$v['provider_name']}</td></tr><tr><td class='labelDiv' align='right'>Contract Name</td><td class=''> </td><td class='allpadding'>{$v['contract_name']}</td></tr><tr><td class='labelDiv' align='right'>Business Unit</td><td class=''> </td><td class='allpadding'>{$v['bu_name']}</td></tr><td class='labelDiv' align='right'>Created Date</td><td class=''> </td><td class='allpadding'>{$created_on}</td></tr>{$status}{$last_review}{$score}</table></div>",
                        'coordinate' => $coordinate,
                        'review' => $v['last_review'],
                        'score' => $scoreText
                    );
                    //////////for back up purpose we are commented to remove the contract_value//////////
                }//is workflow if condition end 
            }//contract foreach end

            $result = array(
                'chart' =>  array(
                    "xAxisMinValue" =>  "0",
                    "xAxisMaxValue" =>  ($coordinateVal*2),
                    "yAxisMinValue" =>  0,
                    "yAxisMaxValue" =>  ($coordinateVal*2),
                    "plotFillAlpha" => 60,
                    "showYAxisvalue" => "0",
                    "numDivlines" =>  "0",
                    "showValues" => "0",
                    "showTrendlineLabels" =>  "0",
                    "quadrantLabelTL" =>  $quadrantLabelTL,
                    "quadrantLabelTR" =>  $quadrantLabelTR,
                    "quadrantLabelBL" =>  $quadrantLabelBL,
                    "quadrantLabelBR" =>  $quadrantLabelBR,
                    "quadrantLabelFontBold" => "1",
                    "quadrantLabelFontSize" => "11",
                    "quadrantLabelFont" => "verdana",
                    "toolTipBgColor" =>  "#ECECEC",
                    "toolTipBorderColor" =>  "#000",
                    "drawQuadrant"  =>  "1",
                    "quadrantXVal" =>  "50",
                    "quadrantYVal" =>  "50",
                    "quadrantLineAlpha"  =>  "50",
                    "quadrantLineThickness"  =>  "1",
                    "theme" =>  "fint",
                    "showHoverEffect" => '0',
                    'maxLabelWidthPercent ' => '70',
                    'use3DLighting ' => '1',
                    "numVDivLines"=> "0",
                    "numDivLines"=> "0",
                    "quadrantLabelFontAlpha"=> "100",
                    "showXAxisValues"=> "0"
                    /*"yAxisName" => "test&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test2",
                    "rotateYAxisName" => "1"*/
                ),
                "categories" => array(
                    "category" => array(
                        array(
                            "label" =>  ' ',
                            "x" =>  "0"
                        ),
                        array(
                            "label" =>  ' ',
                            "x" =>  "100"
                        )
                    )
                ),
                "dataset" => array(
                    array(
                        "color" => "#00aee4",
                        "data" =>  $graph_dataset?$data:[]
                    )
                ),
                "classficationRelation" => array(
                        'left' => $left,
                        'right' => $right,
                        'low' => $low,
                        'high' => $high,
                )
                //, "trendlines" => json_decode('[ { "line": [ { "startvalue": "20000", "endvalue": "30000", "istrendzone": "1", "color": "#aaaaaa", "alpha": "14" }, { "startvalue": "10000", "endvalue": "20000", "istrendzone": "1", "color": "#aaaaaa", "alpha": "7" } ] } ]')
                
            );

            $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
            $this->response($result, REST_Controller::HTTP_OK);
        }
    }

    private function a_number_format($number_in_iso_format, $no_of_decimals=3, $decimals_separator='.', $thousands_separator='', $digits_grouping=3){
        // Check input variables
        if (!is_numeric($number_in_iso_format)){
            error_log("Warning! Wrong parameter type supplied in my_number_format() function. Parameter \$number_in_iso_format is not a number.");
            return false;
        }
        if (!is_numeric($no_of_decimals)){
            error_log("Warning! Wrong parameter type supplied in my_number_format() function. Parameter \$no_of_decimals is not a number.");
            return false;
        }
        if (!is_numeric($digits_grouping)){
            error_log("Warning! Wrong parameter type supplied in my_number_format() function. Parameter \$digits_grouping is not a number.");
            return false;
        }


        // Prepare variables
        $no_of_decimals = $no_of_decimals * 1;


        // Explode the string received after DOT sign (this is the ISO separator of decimals)
        $aux = explode(".", $number_in_iso_format);
        // Extract decimal and integer parts
        $integer_part = $aux[0];
        $decimal_part = isset($aux[1]) ? $aux[1] : '';

        // Adjust decimal part (increase it, or minimize it)
        if ($no_of_decimals > 0){
            // Check actual size of decimal_part
            // If its length is smaller than number of decimals, add trailing zeros, otherwise round it
            if (strlen($decimal_part) < $no_of_decimals){
                $decimal_part = str_pad($decimal_part, $no_of_decimals, "0");
            } else {
                $decimal_part = substr($decimal_part, 0, $no_of_decimals);
            }
        } else {
            // Completely eliminate the decimals, if there $no_of_decimals is a negative number
            $decimals_separator = '';
            $decimal_part       = '';
        }

        // Format the integer part (digits grouping)
        if ($digits_grouping > 0){
            $aux = strrev($integer_part);
            $integer_part = '';
            for ($i=strlen($aux)-1; $i >= 0 ; $i--){
                if ( $i % $digits_grouping == 0 && $i != 0){
                    $integer_part .= "{$aux[$i]}{$thousands_separator}";
                } else {
                    $integer_part .= $aux[$i];
                }
            }
        }

        $processed_number = "{$integer_part}{$decimals_separator}{$decimal_part}";
        return $processed_number;
    }

    public function contract_log_get(){
        $data = $this->input->get();
        if (empty($data)) {
            $result = array('status' => FALSE, 'error' => $this->lang->line('invalid_data'), 'data' => '');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            if($this->session_user_info->user_role_id!=7)
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_log_id'])) $data['contract_log_id']=pk_decrypt($data['contract_log_id']);
        $current_cotract_detailis=array();
        $contract_log_options=array();
        if(isset($data['contract_id'])){
            $current_cotract_detailis = $this->Contract_model->getContractCurrentDetails($data);//echo $this->db->last_query();exit;
            $current_cotract_detailis[0]['contract_tags'] = [];
            $tag_data = $this->Tag_model->getContractTags(array('contract_id'=>$data['contract_id'],'status'=>1,'name'=>true));
            
            // echo '<pre>'.$this->db->last_query();exit;
            // echo '<pre>'.print_r($tag_data);exit;
            // Adding Contract Tag Data to Contract info
            if(count($tag_data)>0)
                foreach($tag_data as $k => $v){
                    if($v['tag_type'] == 'selected' && !empty($v['tag_option']) && $v['tag_option']!=0)
                    {
                        $modeldata = array(
                            'module' => $v['selected_field'],
                            'ids' => explode(",",$v['tag_option'])
                        );
                        $tagOptionValue = $this->Tag_model->getNames($modeldata);
                        $v['tag_option_value'] =  !empty($tagOptionValue) ? $tagOptionValue[0]['tag_option_value'] : '';
                    }

                    if($v['tag_option'] == 0 || $v['tag_option'] == '0'){
                        $current_cotract_detailis[0]['contract_tags'][$k]['tag_text'] = $v['tag_text'];
                        // $current_cotract_detailis[0]['contract_tags'][$k]['tag_value'] = is_null($current_cotract_detailis[0]['contract_tags'][$k]['tag_value']) ? '' : $current_cotract_detailis[0]['contract_tags'][$k]['tag_value'];
                        $current_cotract_detailis[0]['contract_tags'][$k]['tag_value'] = !empty($v['tag_option_value'])?$v['tag_option_value']:null;
                        $current_cotract_detailis[0]['contract_tags'][$k]['tag_id'] = pk_encrypt($v['id_tag']);
                    }
                    else{
                        $current_cotract_detailis[0]['contract_tags'][$k]['tag_text'] = $v['tag_text'];
                        $current_cotract_detailis[0]['contract_tags'][$k]['tag_value'] = !empty($v['tag_option_value'])?$v['tag_option_value']:null;
                        $current_cotract_detailis[0]['contract_tags'][$k]['tag_id'] = pk_encrypt($v['id_tag']);
                    }
                    $current_cotract_detailis[0]['contract_tags'][$k]['tag_comments'] = !empty($v['comments'])?$v['comments']:null;
                    $current_cotract_detailis[0]['contract_tags'][$k]['tag_type'] = $v['tag_type'];
                }
            else{
                $tag_data = $this->Tag_model->TagList(array('customer_id'=>$this->session_user_info->customer_id,'status'=>1));
                //echo '<pre>'.print_r($this->session_user_info);exit;
                foreach($tag_data as $k => $v){
                    if($v['tag_option'] == 0 || $v['tag_option'] == '0'){
                        $current_cotract_detailis[0]['contract_tags'][$k]['tag_text'] = $v['tag_text'];
                        $current_cotract_detailis[0]['contract_tags'][$k]['tag_value'] = !empty($v['tag_option_value'])?$v['tag_option_value']:null;;
                        $current_cotract_detailis[0]['contract_tags'][$k]['tag_id'] = pk_encrypt($v['id_tag']);
                    }
                    else{
                        $current_cotract_detailis[0]['contract_tags'][$k]['tag_text'] = $v['tag_text'];
                        $current_cotract_detailis[0]['contract_tags'][$k]['tag_value'] = !empty($v['tag_option_value'])?$v['tag_option_value']:null;;
                        $current_cotract_detailis[0]['contract_tags'][$k]['tag_id'] = pk_encrypt($v['id_tag']);
                    }
                    $current_cotract_detailis[0]['contract_tags'][$k]['tag_comments'] = !empty($v['comments'])?$v['comments']:null; 
                    $current_cotract_detailis[0]['contract_tags'][$k]['tag_type'] = $v['tag_type'];
                }
            }
            //echo '<pre>'.print_r($current_cotract_detailis);exit;
            $contract_log_options = $this->Contract_model->getContractLogId($data);

            /*foreach($contract_log_options as $k => $v){
                $contract_log_options[$k]['log_option'] = $v['created_on'].' by '.$v['created_by'];
            }*/
        }
        $contract_log_details=array();
        if(isset($data['contract_log_id'])){
            $contract_log_details = $this->Contract_model->getContractLogDetails($data);
            if(isset($contract_log_details[0]))
            {
                $tagDetails = json_decode($contract_log_details[0]['tag_data']);
                foreach($tagDetails as $k=>$v)
                {
                    $tagDetails[$k]->tag_comments = !empty($tagDetails[$k]->tag_comments)?$tagDetails[$k]->tag_comments:null;
                    $tagDetails[$k]->tag_value = !empty($tagDetails[$k]->tag_value)?$tagDetails[$k]->tag_value:null;
                }
                $contract_log_details[0]['contract_tags'] = $tagDetails;
            }       
        }
        foreach($contract_log_options as $k=>$v){
            $contract_log_options[$k]['id_contract_log']=pk_encrypt($contract_log_options[$k]['id_contract_log']);
        }
        foreach($current_cotract_detailis as $k=>$v){
            if((int)$current_cotract_detailis[$k]['provider_contract_sponsor']>0){
                $user_info = $this->User_model->check_record('user',array('id_user'=>$current_cotract_detailis[$k]['provider_contract_sponsor']));
                $current_cotract_detailis[$k]['provider_contract_sponsor'] = $user_info[0]['first_name'].' '.$user_info[0]['last_name'];
            }
            if((int)$current_cotract_detailis[$k]['provider_contract_responsible']>0){
                $user_info = $this->User_model->check_record('user',array('id_user'=>$current_cotract_detailis[$k]['provider_contract_responsible']));
                $current_cotract_detailis[$k]['provider_contract_responsible'] = $user_info[0]['first_name'].' '.$user_info[0]['last_name'];
            }
            if((int)$current_cotract_detailis[$k]['internal_contract_sponsor']>0){
                $user_info = $this->User_model->check_record('user',array('id_user'=>$current_cotract_detailis[$k]['internal_contract_sponsor']));
                $current_cotract_detailis[$k]['internal_contract_sponsor'] = $user_info[0]['first_name'].' '.$user_info[0]['last_name'];
            }
            if((int)$current_cotract_detailis[$k]['internal_partner_relationship_manager']>0){
                $user_info = $this->User_model->check_record('user',array('id_user'=>$current_cotract_detailis[$k]['internal_partner_relationship_manager']));
                $current_cotract_detailis[$k]['internal_partner_relationship_manager'] = $user_info[0]['first_name'].' '.$user_info[0]['last_name'];
            }
            if((int)$current_cotract_detailis[$k]['provider_partner_relationship_manager']>0){
                $user_info = $this->User_model->check_record('user',array('id_user'=>$current_cotract_detailis[$k]['provider_partner_relationship_manager']));
                $current_cotract_detailis[$k]['provider_partner_relationship_manager'] = $user_info[0]['first_name'].' '.$user_info[0]['last_name'];
            }
            if((int)$current_cotract_detailis[$k]['internal_contract_responsible']>0){
                $user_info = $this->User_model->check_record('user',array('id_user'=>$current_cotract_detailis[$k]['internal_contract_responsible']));
                $current_cotract_detailis[$k]['internal_contract_responsible'] = $user_info[0]['first_name'].' '.$user_info[0]['last_name'];
            }

            $current_cotract_detailis[$k]['business_unit_id']=pk_encrypt($current_cotract_detailis[$k]['business_unit_id']);
            $current_cotract_detailis[$k]['classification_id']=pk_encrypt($current_cotract_detailis[$k]['classification_id']);
            $current_cotract_detailis[$k]['contract_owner_id']=pk_encrypt($current_cotract_detailis[$k]['contract_owner_id']);
            $current_cotract_detailis[$k]['currency_id']=pk_encrypt($current_cotract_detailis[$k]['currency_id']);
            $current_cotract_detailis[$k]['delegate_id']=pk_encrypt($current_cotract_detailis[$k]['delegate_id']);
            $current_cotract_detailis[$k]['id_contract']=pk_encrypt($current_cotract_detailis[$k]['id_contract']);
            $current_cotract_detailis[$k]['relationship_category_id']=pk_encrypt($current_cotract_detailis[$k]['relationship_category_id']);
            $current_cotract_detailis[$k]['updated_by']=pk_encrypt($current_cotract_detailis[$k]['updated_by']);
        }
        foreach($contract_log_details as $k=>$v){
            if((int)$contract_log_details[$k]['provider_contract_sponsor']>0){
                $user_info = $this->User_model->check_record('user',array('id_user'=>$contract_log_details[$k]['provider_contract_sponsor']));
                $contract_log_details[$k]['provider_contract_sponsor'] = $user_info[0]['first_name'].' '.$user_info[0]['last_name'];
            }
            if((int)$contract_log_details[$k]['provider_contract_responsible']>0){
                $user_info = $this->User_model->check_record('user',array('id_user'=>$contract_log_details[$k]['provider_contract_responsible']));
                $contract_log_details[$k]['provider_contract_responsible'] = $user_info[0]['first_name'].' '.$user_info[0]['last_name'];
            }
            if((int)$contract_log_details[$k]['internal_contract_sponsor']>0){
                $user_info = $this->User_model->check_record('user',array('id_user'=>$contract_log_details[$k]['internal_contract_sponsor']));
                $contract_log_details[$k]['internal_contract_sponsor'] = $user_info[0]['first_name'].' '.$user_info[0]['last_name'];
            }
            if((int)$contract_log_details[$k]['internal_partner_relationship_manager']>0){
                $user_info = $this->User_model->check_record('user',array('id_user'=>$contract_log_details[$k]['internal_partner_relationship_manager']));
                $contract_log_details[$k]['internal_partner_relationship_manager'] = $user_info[0]['first_name'].' '.$user_info[0]['last_name'];
            }
            if((int)$contract_log_details[$k]['provider_partner_relationship_manager']>0){
                $user_info = $this->User_model->check_record('user',array('id_user'=>$contract_log_details[$k]['provider_partner_relationship_manager']));
                $contract_log_details[$k]['provider_partner_relationship_manager'] = $user_info[0]['first_name'].' '.$user_info[0]['last_name'];
            }
            if((int)$contract_log_details[$k]['internal_contract_responsible']>0){
                $user_info = $this->User_model->check_record('user',array('id_user'=>$contract_log_details[$k]['internal_contract_responsible']));
                $contract_log_details[$k]['internal_contract_responsible'] = $user_info[0]['first_name'].' '.$user_info[0]['last_name'];
            }

            $contract_log_details[$k]['business_unit_id']=pk_encrypt($contract_log_details[$k]['business_unit_id']);
            $contract_log_details[$k]['classification_id']=pk_encrypt($contract_log_details[$k]['classification_id']);
            $contract_log_details[$k]['contract_id']=pk_encrypt($contract_log_details[$k]['contract_id']);
            $contract_log_details[$k]['contract_owner_id']=pk_encrypt($contract_log_details[$k]['contract_owner_id']);
            $contract_log_details[$k]['currency_id']=pk_encrypt($contract_log_details[$k]['currency_id']);
            $contract_log_details[$k]['delegate_id']=pk_encrypt($contract_log_details[$k]['delegate_id']);
            $contract_log_details[$k]['id_contract_log']=pk_encrypt($contract_log_details[$k]['id_contract_log']);
            $contract_log_details[$k]['relationship_category_id']=pk_encrypt($contract_log_details[$k]['relationship_category_id']);
        }
        $result =array('current_cotract_detailis'=>$current_cotract_detailis,'contract_log_options'=>$contract_log_options,'contract_log_details'=>$contract_log_details);
        //echo '<pre>';print_r($contract_log_options);exit;
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);

    }


    public function getDownloadedFile_get(){
        $data = $this->input->get();
        if (empty($data)) {
            $result = array('status' => FALSE, 'error' => $this->lang->line('invalid_data'), 'data' => '');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        // if($this->session_user_info->customer_id==4){
        //     $result = array('status'=>FALSE, 'error' =>$this->lang->line('unable_download_file'), 'data'=>'');
        //     $this->response($result, REST_Controller::HTTP_OK);
        // }
        if(isset($data['id_document'])) {
            if(is_numeric($data['id_document'])){
            }
            else{
                $data['id_document'] = pk_decrypt($data['id_document']);
            }

            // if(!in_array($data['id_document'],$this->session_user_contract_documents)){
            //     $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
            //     $this->response($result, REST_Controller::HTTP_OK);
            // }
        }
        if(isset($data['id_document'])) {
            $result = $this->Contract_model->getDownloadedFile($data);//echo $this->db->last_query();exit;
            /* checking the document access for owner,delegate,readonly-user,external-user */
            $this->validateDocumentDownload($result);
            $file_path_data=FILE_SYSTEM_PATH.'uploads/' . $result[0]['document_source'];
            if(!is_file($file_path_data)){
                $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'),'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }

            if (count($result) > 0) {
                $res = array('url' => REST_API_URL . 'uploads/' . $result[0]['document_source'],
                    'file' => $result[0]['document_name']);
                $insert_id = $this->Download_model->addDownload(array('document_id'=>$data['id_document'],'path'=>'uploads/' . $result[0]['document_source'],'filename'=>$result[0]['document_name'],'user_id'=>$this->session_user_id,'access_token'=>substr($_SERVER['HTTP_AUTHORIZATION'],7),'status'=>0,'created_date_time'=>currentDate()));
                $result = array('status' => TRUE, 'message' => $this->lang->line('success'), 'data' => pk_encrypt($insert_id));
                $this->response($result, REST_Controller::HTTP_OK);
            } else {
                $result = array('status' => false, 'message' => $this->lang->line('error'), 'data' => '');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        } else {
            $result = array('status' => false, 'message' => $this->lang->line('error'), 'data' => '');
            $this->response($result, REST_Controller::HTTP_OK);
        }
    }
    public function contractReviewChangelog_get()
    {
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        //$this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));
        $this->form_validator->add_rules('contract_review_id', array('required'=>$this->lang->line('contract_review_id_req')));
        //$this->form_validator->add_rules('module_id', array('required'=>$this->lang->line('module_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_review_id'])) {
            $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
            if(!in_array($data['contract_review_id'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_contract_review'])) {
            $data['id_contract_review'] = pk_decrypt($data['id_contract_review']);
            if(!in_array($data['id_contract_review'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_module']) && $data['id_module']!='all') {
            $data['id_module'] = pk_decrypt($data['id_module']);
            if(!in_array($data['id_module'],$this->session_user_contract_review_modules)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_topic']) && $data['id_topic']!='all') {
            $data['id_topic'] = pk_decrypt($data['id_topic']);
            if(!in_array($data['id_topic'],$this->session_user_contract_review_topics)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_question']) && $data['id_question']!='all') {
            $data['id_question'] = pk_decrypt($data['id_question']);
            if(!in_array($data['id_question'],$this->session_user_contract_review_questions)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_contract'])) {
            $data['id_contract'] = pk_decrypt($data['id_contract']);
            if(!in_array($data['id_contract'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user']) && isset($data['user_role_id']) && $data['user_role_id']==5){
            $data['contract_user'] = $data['id_user'];
            if(!in_array($data['contract_user'],$this->session_user_contributors)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }

        if(isset($data['id_user']) && isset($data['id_contract_review'])){
            $idaadi=$this->Contract_model->checkContributorForContractReview(array('contract_review_id'=>$data['id_contract_review'],'id_user'=>$data['id_user']));
            if($idaadi===true)
            $data['contract_user'] = $data['id_user'];
        }
        if(isset($data['id_user']) && isset($data['contract_review_id'])){
            $idaadi=$this->Contract_model->checkContributorForContractReview(array('contract_review_id'=>$data['contract_review_id'],'id_user'=>$data['id_user']));
            if($idaadi===true)
                $data['contract_user'] = $data['id_user'];
        }


        $result = $this->Contract_model->getContractReviewChangeLog($data);
        //echo "<pre>";print_r($result);echo "</pre>";
        $result_parsed=array();
        foreach($result['questions'] as $k=>$v){
            $result_parsed[$v['id_question']]['id_module']=$v['id_module'];
            $result_parsed[$v['id_question']]['id_topic']=$v['id_topic'];
            $result_parsed[$v['id_question']]['id_question']=$v['id_question'];
            $result_parsed[$v['id_question']]['question_text']=$v['question_text'];
            $result_parsed[$v['id_question']]['question_type']=$v['question_type'];
            $result_parsed[$v['id_question']]['topic_name']=$v['topic_name'];
            $result_parsed[$v['id_question']]['module_name']=$v['module_name'];
            $result_parsed[$v['id_question']]['change_log'][]=$v;
        }
        $result['questions']=array_values($result_parsed);
        foreach($result['questions'] as $k=>$v){
            $result['questions'][$k]['change_log']=array_reverse($v['change_log']);
        }
        $reviews = $this->Contract_model->getContractReview(array('id_contract_review'=>$data['contract_review_id']));
        for($s=0;$s<count($reviews);$s++)
        {

            $result['review_information'] = array(
                'review_date' => ($reviews[$s]['updated_date']!='')?date('Y-m-d',strtotime($reviews[$s]['updated_date'])):'',
                'review_status' => ($reviews[$s]['contract_review_status']=='finished')?'finalized':$reviews[$s]['contract_review_status'],
                'ideedi' => (count($this->Contract_model->getContractReviewDiscussionModuleCount(array('id_contract_review'=>$data['contract_review_id'],'discussion_status'=>1)))>0)?"itako":'annus'
            );

        }
        if((int)$this->session_user_info->user_role_id == 7)
            $module_data =  $this->Contract_model->getContractDashboard(array('contract_review_id' => $data['contract_review_id'],'provider_visibility'=>array(1)));
        else
            $module_data =  $this->Contract_model->getContractDashboard(array('contract_review_id' => $data['contract_review_id'],'provider_visibility'=>array(1,0)));
        $result_array['modules'] = array();
        for($s=0;$s<count($module_data);$s++)
        {
            $result_array['modules'][$module_data[$s]['module_id']]['module_id'] = $module_data[$s]['module_id'];
            $result_array['modules'][$module_data[$s]['module_id']]['module_name'] = $module_data[$s]['module_name'];
            $result_array['modules'][$module_data[$s]['module_id']]['topics'][] = array(
                'topic_id' => $module_data[$s]['topic_id'],
                'topic_name' => $module_data[$s]['topic_name'],
                'topic_score' => $module_data[$s]['topic_score'],
            );
        }

        $result_array['modules'] = array_values($result_array['modules']);

        for($s=0;$s<count($result_array['modules']);$s++) //getting score for module by topics score // getScore is a helper function
        {
            $result_array['modules'][$s]['module_score'] = getScore($score = array_map(function($i){ return strtolower($i['topic_score']); },$result_array['modules'][$s]['topics']));
        }

        $result['review_information']['review_score'] = getScore($score = array_map(function($i){ return strtolower($i['module_score']); },$result_array['modules']));
        for($s=0;$s<count($result['modules']);$s++) //getting score for module by topics score // getScore is a helper function
        {
            $result['modules'][$s]['id_module'] = pk_encrypt($result['modules'][$s]['id_module']);
        }
        for($s=0;$s<count($result['topics']);$s++) //getting score for module by topics score // getScore is a helper function
        {
            $result['topics'][$s]['id_module'] = pk_encrypt($result['topics'][$s]['id_module']);
            $result['topics'][$s]['id_topic'] = pk_encrypt($result['topics'][$s]['id_topic']);
        }
        for($s=0;$s<count($result['questions']);$s++)
        {
            $result['questions'][$s]['id_module'] = pk_encrypt($result['questions'][$s]['id_module']);
            $result['questions'][$s]['id_topic'] = pk_encrypt($result['questions'][$s]['id_topic']);
            $result['questions'][$s]['id_question'] = pk_encrypt($result['questions'][$s]['id_question']);
            foreach($result['questions'][$s]['change_log'] as $kc=>$vc){
                $result['questions'][$s]['change_log'][$kc]['id_module']=pk_encrypt($result['questions'][$s]['change_log'][$kc]['id_module']);
                $result['questions'][$s]['change_log'][$kc]['id_question']=pk_encrypt($result['questions'][$s]['change_log'][$kc]['id_question']);
                $result['questions'][$s]['change_log'][$kc]['id_topic']=pk_encrypt($result['questions'][$s]['change_log'][$kc]['id_topic']);
            }
        }
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function info_export($data){
        //this is exporting contract information result to export service4
        $result = $this->Contract_model->getContractDetails($data);
        // echo '<pre>'.print_r($data);exit;
        // echo $this->db->last_query(); exit;
        for($s=0;$s<count($result);$s++)
        {
            $result[$s]['contract_start_date'] = date('M d, Y',strtotime($result[$s]['contract_start_date']));
            $result[$s]['contract_end_date'] = date('M d, Y',strtotime($result[$s]['contract_end_date']));
            $result[$s]['contract_sponsor'] = array('internal'=>$result[$s]['internal_contract_sponsor'],'provider'=>$result[$s]['provider_contract_sponsor']);
            $result[$s]['partner_relationship_manager'] = array('internal'=>$result[$s]['internal_partner_relationship_manager'],'provider'=>$result[$s]['provider_partner_relationship_manager']);
            $result[$s]['contract_responsible'] = array('internal'=>$result[$s]['internal_contract_responsible'],'provider'=>$result[$s]['provider_contract_responsible']);
            $result[$s]['score'] = 0;
            $result[$s]['review_by'] = $result[$s]['last_review'] = '---';
            $review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $result[$s]['id_contract']));
            if(!empty($review)) {
                $result[$s]['review_by'] = $review[0]['review_by'];
                if($review[0]['review_on']!='---')
                    $result[$s]['last_review'] = date('M d, Y',strtotime($review[0]['review_on']));
            }
            if(isset($data['is_workflow']) && $data['is_workflow'] == 1){
                $contract_workflow_query = 'SELECT *,cr.updated_by as last_review FROM contract_workflow cw LEFT JOIN contract_review cr on cr.contract_workflow_id = cw.id_contract_workflow LEFT JOIN template t on cw.workflow_id = t.id_template WHERE cw.id_contract_workflow = '.$data['contract_workflow_id'].' ORDER BY cr.id_contract_review DESC';
                $contract_workflow_query = $this->User_model->custom_query($contract_workflow_query);
                // echo '<pre>'.print_r($contract_workflow_query);exit;
                $result[$s]['template_name'] = $contract_workflow_query[0]['template_name'];
            }
        }
        return $result;
    }

    public function dashboard_export($data){
        //this is exporting dashboard result to export service4

        $result_array = array();
        $contributor_modules=array();
        $contribution_type = array('expert','validator','provider');

        if(isset($data['id_user']) && isset($data['user_role_id']) && $data['user_role_id']==5){
            $data['contract_user'] = $data['id_user'];
            $contributor_modules=$this->Contract_model->getContractContributors(array('user_id'=>$data['contract_user']));
            //echo "<pre>";print_r($contributor_modules);echo "</pre>";
            $contributor_modules_array = array();
            foreach($contribution_type as $v){
                //echo '<pre>'.print_r($v);exit;
                $contributor_modules_array = array_merge($contributor_modules_array,array_map(function($i){ return ($i['module_id']); },$contributor_modules[$v]['data']));
            }
            $contributor_modules = $contributor_modules_array; 
        }
        else{
            $contributor_modules=$this->Contract_model->getContractContributors(array('user_id'=>$data['id_user']));
            //echo "<pre>";print_r($contributor_modules);echo "</pre>";
            $contributor_modules_array = array();
            foreach($contribution_type as $v){
                //echo '<pre>'.print_r($v);exit;
                $contributor_modules_array = array_merge($contributor_modules_array,array_map(function($i){ return ($i['module_id']); },$contributor_modules[$v]['data']));
            }
            $contributor_modules = $contributor_modules_array; 
        }
        $reviews = $this->Contract_model->getContractReview(array('contract_id'=>$data['id_contract'],'id_contract_review'=>$data['contract_review_id']));
        
        if(isset($data['contract_review_id'])){
            $contributor_modules=$this->Contract_model->getContractContributors(array('user_id'=>$data['id_user'],'contract_review_id' => $data['contract_review_id']));
            $contributor_modules_array = array();
            foreach($contribution_type as $v){
                //echo '<pre>'.print_r($v);exit;
                $contributor_modules_array = array_merge($contributor_modules_array,array_map(function($i){ return ($i['module_id']); },$contributor_modules[$v]['data']));
            }
            $contributor_modules = $contributor_modules_array; 
            for($s=0;$s<count($reviews);$s++)
            {
                if($reviews[$s]['id_contract_review']==$data['contract_review_id']){
                    $result_array['data'] = array(
                        'review_date' => ($reviews[$s]['updated_date']!='')?date('M d, Y',strtotime($reviews[$s]['updated_date'])):'',
                        'review_created_date' => ($reviews[$s]['created_on']!='')?date('M d, Y',strtotime($reviews[$s]['created_on'])):'',
                        'review_status' => $reviews[$s]['contract_review_status']
                    );
                }
            }
            if((int)$this->session_user_info->user_role_id == 7)
                $module_data =  $this->Contract_model->getContractDashboard(array('contract_review_id' => $data['contract_review_id'],'provider_visibility'=>array(1)));
            else
                $module_data =  $this->Contract_model->getContractDashboard(array('contract_review_id' => $data['contract_review_id'],'provider_visibility'=>array(1,0)));
        }
        $result_array['modules'] = array();
        // echo '<pre>'.print_r($module_data);exit;
        for($s=0;$s<count($module_data);$s++)
        {
            if(count($contributor_modules)==0 || (count($contributor_modules)>0 && in_array($module_data[$s]['module_id'],$contributor_modules))) {
                $result_array['modules'][$module_data[$s]['module_id']]['module_id'] = $module_data[$s]['module_id'];
                $result_array['modules'][$module_data[$s]['module_id']]['module_name'] = $module_data[$s]['module_name'];
                $result_array['modules'][$module_data[$s]['module_id']]['module_status'] = $module_data[$s]['module_status'];
                $result_array['modules'][$module_data[$s]['module_id']]['static'] = $module_data[$s]['static'];
                $result_array['modules'][$module_data[$s]['module_id']]['is_workflow'] = $module_data[$s]['is_workflow'];
                $result_array['modules'][$module_data[$s]['module_id']]['topics'][] = array(
                    'topic_id' => $module_data[$s]['topic_id'],
                    'topic_name' => $module_data[$s]['topic_name'],
                    'topic_score' => $module_data[$s]['topic_score'],
                    'topic_progress' => $module_data[$s]['total_topic_progress']
                );
            }
        }

        $result_array['modules'] = array_values($result_array['modules']);

        for($s=0;$s<count($result_array['modules']);$s++) //getting score for module by topics score // getScore is a helper function
        {
            $result_array['modules'][$s]['module_score'] = getScore($score = array_map(function($i){ return strtolower($i['topic_score']); },$result_array['modules'][$s]['topics']));
        }

        $result_array['review_score'] = getScore($score = array_map(function($i){ return strtolower($i['module_score']); },$result_array['modules']));
        return $result_array;

    }

    public function reviewActionItems_export($data)
    {//this is exporting reviewActionItems to export service4

        /*helper function for ordering smart table grid options*/
        $data = tableOptions($data);
        $data['item_status']=1;
        unset($data['contract_review_id']);
        // echo '<pre>'.print_r($data);exit;
        $result = $this->Contract_model->getContractReviewActionItems($data);
        // echo '<pre>'.$this->db->last_query();exit;
        for($s=0;$s<count($result['data']);$s++)
        {
            $result['data'][$s]['due_date'] = date('M d, Y',strtotime($result['data'][$s]['due_date']));
            $contract_review = $this->Contract_model->getContractReview(array('id_contract_review'=>$result['data'][$s]['contract_review_id']));
            $result['data'][$s]['last_review'] = $contract_review[0]['updated_date'];
        }
        return $result;
    }

    public function export_get(){
        //this function exports the dashboard data in excel format :
        ////////////////Geting data
        $data = $this->input->get();
        // if($this->session_user_info->customer_id==4){
        //     $result = array('status'=>FALSE, 'error' =>$this->lang->line('unable_download_file'), 'data'=>'');
        //     $this->response($result, REST_Controller::HTTP_OK);
        // }
        if(isset($data['id_contract'])) {
            $data['id_contract'] = pk_decrypt($data['id_contract']);
            if($this->session_user_info->user_role_id!=7)
            if(!in_array($data['id_contract'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            if($this->session_user_info->user_role_id!=7)
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_review_id'])) {
            $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
            if(!in_array($data['contract_review_id'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['module_id'])) {
            $data['module_id'] = pk_decrypt($data['module_id']);
            if(!in_array($data['module_id'],$this->session_user_contract_review_modules)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['topic_id'])) {
            $data['topic_id'] = pk_decrypt($data['topic_id']);
            if(!in_array($data['topic_id'],$this->session_user_contract_review_topics)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_contract_review'])) {
            $data['id_contract_review'] = pk_decrypt($data['id_contract_review']);
            if(!in_array($data['id_contract_review'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_contract_review_action_item'])) {
            $data['id_contract_review_action_item'] = pk_decrypt($data['id_contract_review_action_item']);
            if(!in_array($data['id_contract_review_action_item'],$this->session_user_contract_action_items)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_user'])) {
            $data['contract_user'] = pk_decrypt($data['contract_user']);
            if($data['contract_user']!=$this->session_user_customer_all_users){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['business_unit_id'])) {
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            if(!in_array($data['business_unit_id'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_workflow_id'])) {
            $data['contract_workflow_id'] = pk_decrypt($data['contract_workflow_id']);
        }
        if($data['user_role_id']==7){
            $provider_colleuges = $this->User_model->check_record('user',array('provider'=>$this->session_user_info->provider));
            $provider_colleuges = array_map(function($i){ return $i['id_user']; },$provider_colleuges);
            $data['provider_colleuges'] = $provider_colleuges;
        }

        $data['contract_id']=$data['id_contract'];
        if(isset($data['is_workflow']) && $data['is_workflow'] == 1 && isset($data['contract_workflow_id']) && $data['contract_workflow_id'] > 0)
            $reviews = $this->Contract_model->getContractReview(array('contract_id'=>$data['contract_id'],'is_workflow' => $data['is_workflow'],'contract_workflow_id' => $data['contract_workflow_id'],'order'=>'DESC'));
        else
            $reviews = $this->Contract_model->getContractReview(array('contract_id'=>$data['contract_id'],'order'=>'DESC'));
        $data['contract_review_id']=(isset($data['contract_review_id']) && $data['contract_review_id']>0)?$data['contract_review_id']:(isset($reviews[0]['id_contract_review'])?$reviews[0]['id_contract_review']:0);
        //$result_array = array();
        if(empty($data['contract_review_id']) || $data['contract_review_id']=='' || $data['contract_review_id']==0){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('no_reviews_found'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        /*checking the review acces for user start  */
        if(in_array($this->session_user_info->user_role_id,array(4))){
            /* checking contract attachments access for delegate */
            $delegate_access=0;
            $check_delegate_access=$this->User_model->check_record('contract_user',array('contract_id'=>$data['contract_id'],'user_id'=>$this->session_user_info->id_user,'contract_review_id'=>$data['contract_review_id'],'status'=>1));
            if(!empty($check_delegate_access)){
                $delegate_access=1;
            }  
            $check_contract_delgate_access=$this->User_model->check_record('contract',array('id_contract'=>$data['contract_id'],'delegate_id'=>$this->session_user_info->id_user,'is_deleted'=>0));
            if(!empty($check_contract_delgate_access)){
                    $delegate_access=1;
            }
            if($delegate_access==0){
                    $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'),'data'=>'10');
                    echo json_encode($result);exit;
            }
        }
        if(in_array($this->session_user_info->user_role_id,array(3))){
            /* checking contract attachments access for owner */
                $owner_access=0;
                $check_contract_owner_access=$this->User_model->check_record('contract',array('id_contract'=>$data['contract_id'],'contract_owner_id'=>$this->session_user_info->id_user,'is_deleted'=>0));
                if(!empty($check_contract_owner_access)){
                    $owner_access=1;
                }
                $check_owner_access=$this->User_model->check_record('contract_user',array('contract_id'=>$data['contract_id'],'user_id'=>$this->session_user_info->id_user,'contract_review_id'=>$data['contract_review_id'],'status'=>1));
                if(!empty($check_owner_access)){
                    $owner_access=1;
                }
                if($owner_access==0){
                    $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'),'data'=>'11');
                    echo json_encode($result);exit;
                }  
        }
        if(in_array($this->session_user_info->user_role_id,array(6))){
            /* checking contract attachments access for read-only user */
                $contract_id=$data['contract_id'];
                $relation=$this->checkBuwithContract($data['contract_id'], $this->session_user_info->id_user);              
                if(!$relation){
                    $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'),'data'=>'12');
                    echo json_encode($result);exit;
                }
        }
        if(in_array($this->session_user_info->user_role_id,array(7))){
            /* checking contract attachments access for external user */
                $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'),'data'=>'13');
                echo json_encode($result);exit;
        }   
        /*checking the review acces for user end  */
        $export_type = '';
        if(isset($data['export_type']) && $data['export_type'] == 'trends'){
            $export_type = 'trends';
            $trends_data = array(
                'contract_id' => pk_encrypt($data['contract_id']),
                'contract_review_id' => pk_encrypt($data['contract_review_id']),
                'id_user' => pk_encrypt($data['id_user']),
                'user_role_id' => pk_encrypt($data['user_role_id']),
                'trend_type' => $data['trend_type']
            );
            if($data['trend_type'] == 'prev')
                $trends_data['offset'] = isset($data['offset'])?$data['offset']-5:0;
            if($data['trend_type'] == 'next')
                $trends_data['offset'] = isset($data['offset'])?$data['offset']+5:0;
            $result_array = $this->trends_get($trends_data);
            $review_dates = $result_array['dates'];
            $res = $result_array['modules'];
            $review_created_date = $result_array['review_date'];
        }else{
            $export_type = 'dashboard';
            $result_array = $this->dashboard_export($data);
            $res = $result_array['modules'];
            $review_created_date = $result_array['data']['review_created_date'];
        }
        // $result_array = $this->dashboard_export($data);
        // $res = $result_array['modules'];
        // echo $export_type,$review_dates;
        // echo '<pre>'.print_r($result_array);exit;
        $action_items =$this->reviewActionItems_export($data);
        //echo '<pre>'.print_r($action_items);exit;

        $action_items = $action_items['data'];
        unset($data['contract_review_id']);
        $info = $this->info_export($data);
        //echo '<pre>'.print_r($info);exit;
        $business_unit = $this->Business_unit_model->getBusinessUnitDetails(array('id_business_unit'=>$info[0]['business_unit_id']));
        $customer_info = $this->Customer_model->getCustomer(array('id_customer'=>$business_unit[0]['customer_id']));
        $logo = $customer_info[0]['company_logo'];
        $info = $info[0];
        //echo 'cust_data'.'<pre>';print_r($customer_info);
        //echo 'data'.'<pre>';print_r($data);
        //echo 'dashboard'.'<pre>';print_r($result_array);exit;
        //echo 'action'.'<pre>';print_r($action_items);
        //echo 'info_exoport'.'<pre>';print_r($info);
        //echo 'bu_info'.'<pre>';print_r($business_unit);exit;
        //print_r($action_items);die;
        ///////////////////////

        $this->load->library('excel');
        //activate worksheet number 1
        $excelRowstartsfrom=2;
        $excelColumnstartsFrom=1;
        $columnBegin =$excelColumnstartsFrom;
        $excelstartsfrom=$excelRowstartsfrom;
        $merge0 = $this->getkey($excelColumnstartsFrom).$excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom).($excelstartsfrom+2);
        $this->excel->setActiveSheetIndex(0)->mergeCells($merge0);


        $file_img = './uploads/'.$logo;
        if($logo=='')
            $file_img = './images/company-logo.png';
        if (file_exists($file_img)) {
            $objDrawing = new PHPExcel_Worksheet_Drawing();
            $objDrawing->setName('Customer Signature');
            $objDrawing->setDescription('Customer Signature');
            //Path to signature .jpg file
            $signature = $file_img;
            $objDrawing->setPath($signature);
            $objDrawing->setOffsetX(50);                     //setOffsetX works properly
            $objDrawing->setCoordinates($this->getkey($excelColumnstartsFrom).$excelstartsfrom);             //set image to cell E38
            $objDrawing->setHeight(61);                     //signature height
            $objDrawing->setWorksheet($this->excel->getActiveSheet());  //save
        }


        $excelRowstartsfrom=$excelRowstartsfrom+4;
        $excelColumnstartsFrom=1;
        $columnBegin =$excelColumnstartsFrom;
        $excelstartsfrom=$excelRowstartsfrom;
        $merge1 = $this->getkey($excelColumnstartsFrom).$excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1).($excelstartsfrom+1);
        $merge2 = $this->getkey($excelColumnstartsFrom+2).$excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+2).($excelstartsfrom+1);
        ///wrapping text

        //Action Items Date set width
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom+2))->setWidth(12);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom+1))->setWidth(25);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom+5))->setWidth(25);

        ///

        /////contract info starts
        $this->excel->setActiveSheetIndex(0)->mergeCells($merge1);
        // var_dump($data);
        // echo '<pre>'.print_r($data);exit;
        if(isset($data['is_workflow']) && $data['is_workflow'] == '1')
            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'EXECUTION DATE:');
        else
            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'REVIEW DATE:');
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom))->setWidth(31);
        $this->excel->getActiveSheet()->getStyle($merge1)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($merge2)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $this->excel->getActiveSheet()->getStyle($merge1)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
        $this->excel->getActiveSheet()->getStyle($merge1)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        $this->excel->setActiveSheetIndex(0)->mergeCells($merge2);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$info['last_review']==''?'N/A':$info['last_review']);

        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom+2))->setWidth('20');
        $excelstartsfrom+=2;
        //
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'Owner');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$info['responsible_user_name']);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $excelstartsfrom++;
        //
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'Delegate');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$info['delegate_user_name']);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $excelstartsfrom++;
        //
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'Relation');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$info['provider_name_show']);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $excelstartsfrom++;
        //
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'Business Unit');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$business_unit[0]['bu_name']);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $excelstartsfrom++;
        //
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'Contract Start-date');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$info['contract_start_date']);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $excelstartsfrom++;
        //
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'Contract End-date');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$info['contract_end_date']);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $excelstartsfrom++;
        //
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        //$this->excel->setActiveSheetIndex()->getRowDimension($excelstartsfrom)->setRowHeight(30);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'Short Scope Description');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        //$this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+6) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$info['description']);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+5) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        //$excelstartsfrom++;
        //
        $excelColumnstartsFrom=5;
        $excelstartsfrom = $excelRowstartsfrom;

        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'Contract ID');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$info['contract_unique_id']);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $excelstartsfrom++;
        //
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'Contract Name');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$info['contract_name']);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $excelstartsfrom++;
        //
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'Classification');
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom))->setWidth(30);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$info['classification_name']==''?'N/A':$info['classification_name']);
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom+2))->setWidth('20');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $excelstartsfrom++;
        //
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'Relationship type');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$info['relationship_category_name']);
        //$this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom+1))->setAutoSize(true);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));        
        $excelstartsfrom++;
        //
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'PO Number');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$info['po_number']==''?'N/A':' '.$info['po_number']);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $excelstartsfrom++;
        //
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'Projected Value');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        // $number = $info['contract_value'];
        // $currency = number_format($number, 2, '.', ',');


        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->getNumberFormat()->setFormatCode("##,##,###.##");
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$info['contract_value']);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->getNumberFormat()
            ->setFormatCode('_("€"* #,##0.00_);_("€"* \(#,##0.00\);_("€"* "-"??_);_(@_)');
        if($info['contract_value_period'] == 'year')$info['contract_value_period']='yearly';
        if($info['contract_value_period'] == 'total')$info['contract_value_period']='total';
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2+1) . $excelstartsfrom,$info['contract_value_period']==''?'-':ucwords($info['contract_value_period']));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2+1) . $excelstartsfrom)->getAlignment()->setHorizontal(
                PHPExcel_Style_Alignment::HORIZONTAL_CENTER
            );
        $excelstartsfrom++;
        //
        
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'Additional Recurring fees');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        // $number = $info['additional_recurring_fees'];
        // $recuring_fee = number_format($number, 2, '.', ',');

        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$info['additional_recurring_fees']);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->getNumberFormat()
            ->setFormatCode('_("€"* #,##0.00_);_("€"* \(#,##0.00\);_("€"* "-"??_);_(@_)');
        if($info['additional_recurring_fees_period']=='year')$info['additional_recurring_fees_period']='yearly';
        if($info['additional_recurring_fees_period']=='month')$info['additional_recurring_fees_period']='monthly';
        if($info['additional_recurring_fees_period']=='quarter')$info['additional_recurring_fees_period']='quarterly';
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2+1) . $excelstartsfrom,$info['additional_recurring_fees_period']==''?'-':ucwords($info['additional_recurring_fees_period']));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2+1) . $excelstartsfrom)->getAlignment()->setHorizontal(
                PHPExcel_Style_Alignment::HORIZONTAL_CENTER
            );
        $excelstartsfrom++;
        
        //
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'Additional One-off fees');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        // $number = $info['additonal_one_off_fees'];
        // $oneoff_fee = number_format($number, 2, '.', ',');
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$info['additonal_one_off_fees']);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->getNumberFormat()
            ->setFormatCode('_("€"* #,##0.00_);_("€"* \(#,##0.00\);_("€"* "-"??_);_(@_)');
        $excelstartsfrom++;
        //
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$info['relationship_category_name_na']==''?'':$info['internal_contract_sponsor']);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        //$data['is_workflow'] = 1;
        if(isset($data['is_workflow']) && $data['is_workflow'] ==1)
            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'Task Name');
        else
            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'Template Name');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
                    array('borders' => array(
                    'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                    )
                ),'font' => array('bold' => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,$info['template_name']);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
                array('borders' => array(
                'allborders' => array(
                'style' => PHPExcel_Style_Border::BORDER_THIN
                )
        )));
        $excelstartsfrom++;
        //$this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+1))->getAlignment()->setWrapText(true);

        //$excelstartsfrom++;
        //
        /*$this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'OOC Reporting periodicity');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        //$this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->setWrapText(true);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom,'---');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $excelstartsfrom++;
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'NBB Reporting');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom,'---');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $excelstartsfrom++;
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,'CLIENT Group Reporting');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4E8F3FF');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom,'---');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            )));
        $excelstartsfrom++;*/
        //
        //finalising contract info
        $excelstartsfrom=$excelRowstartsfrom;
        $excelColumnstartsFrom=1;
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom).$excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+6).($excelstartsfrom+8))->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ))
        );

        //
        //$export_type,$review_dates
        //
        /////contract info ends
        $excelColumnstartsFrom=1;
        if($export_type == 'trends')
            $img_start=$excelstartsfrom=$excelRowstartsfrom+11;
        else
            $img_start=$excelstartsfrom=$excelRowstartsfrom+10;
        $exceleven = $excelstartsfrom;
        $excelodd = $exceleven;

        if($export_type == 'trends'){
            //appending Dates to Reviews
            $date_col_index = $excelColumnstartsFrom+2;
            $date_row_index = $excelstartsfrom-1;
            // echo '<pre>'.print_r($review_dates);exit;
            foreach($review_dates as $v){
                // echo '<br>'.$this->getkey($date_col_index) . $date_row_index;
                $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($date_col_index) . $date_row_index, $v['date']);
                $this->excel->getActiveSheet()->getStyle($this->getkey($date_col_index) . $date_row_index)->applyFromArray(
                    array(
                    // 'borders' => array(
                    //     'allborders' => array(
                    //         'style' => PHPExcel_Style_Border::BORDER_THIN
                    //     )
                    // ),
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                        )
                    )
                );
                $date_col_index++;
            }
            //This if script is for Trends (New logic)
            foreach($res as $i =>$v) {
                if(!(int)$res[$i]['module_status'])
                    $res[$i]['module_name'] = $res[$i]['module_name'].' (Stored)';
                $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
                // echo '<br>'.$this->getkey($excelColumnstartsFrom) . $excelstartsfrom, $res[$i]['module_name'];
                $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom, $v['module_name']);
                //$this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom))->setAutosize(true);
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
                    array('borders' => array(
                        'outline' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    ),
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                        'font'  => array(
                            'bold'  => true
                        )
                    )
                );
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
    
                // echo '<pre>'.print_r($v);
                //Scores by Trends
                $date_col_index = $excelColumnstartsFrom+2;
                foreach($v['module_scores'] as $vms){
                    $score = $vms;
                    if(in_array(trim(strtolower($score)),array('red','amber','green'))){
                        if(strtolower($score) == 'red')
                            $color = 'FF0000';
                        if(strtolower($score) == 'amber')
                            $color = 'ff9900';
                        if(strtolower($score) == 'green')
                        $color = '5bb166';

                        $this->excel->setActiveSheetIndex(0)
                        ->setCellValue($this->getkey($date_col_index) . $excelstartsfrom,'•');
                        $this->excel->getActiveSheet()->getStyle($this->getkey($date_col_index) . $excelstartsfrom)->applyFromArray(
                        array('alignment' => array(
                                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
                                ),'borders' => array(
                                    'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                ),'font'  => array(
                                    'bold'  => true,
                                    'color' => array('rgb' => $color),
                                    'size'  => 15,
                                    'name'  => 'Verdana'
                                )));
                    }
                    else{
                        $this->excel->setActiveSheetIndex(0)
                            ->setCellValue($this->getkey($date_col_index) . $excelstartsfrom, $score);
                        $this->excel->getActiveSheet()->getStyle($this->getkey($date_col_index) . $excelstartsfrom)->getAlignment()->setHorizontal(
                            PHPExcel_Style_Alignment::HORIZONTAL_CENTER
                        );
        
                    }
                    $headersel = $this->getkey($excelColumnstartsFrom) . $excelstartsfrom . ':' . $this->getkey($date_col_index) . $excelstartsfrom;
                    $this->excel->getActiveSheet()->getStyle($headersel)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);//EA965A
                    $this->excel->getActiveSheet()->getStyle($headersel)->getFill()->getStartColor()->setARGB('D4E8F3FF');
                    $date_col_index++;
                }
    
                if((int)$res[$i]['static']){
                    $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom-1) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4F8CBAD');
                    if($res[$i]['is_workflow']){
                        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom-1) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4A0DEA0');
                    }
                    $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($excelColumnstartsFrom-1) . $excelstartsfrom, 'Stored');
                    $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom-1) . $excelstartsfrom)->applyFromArray(
                        array('font'  => array(
                            'bold'  => true,
                            'color' => array('rgb' => 'FFFFFF'),
                            'size'  => 11,
                            'name'  => 'Verdana'
                        )));
                }
                $this->excel->getActiveSheet()->getStyle($headersel)->applyFromArray(
                    array('borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )));
                //$rowsStratsFrom = $head_starts_from + 1;*/
                $excelstartsfrom++;
    
                foreach($v['topics'] as $j => $v1){
                    //echo $res[$i]['module_name'];
                    if(strtolower($v['module_name'])=='contract completeness'){
                        $this->excel->setActiveSheetIndex(0)
                            ->setCellValue($this->getkey($excelColumnstartsFrom) .$excelstartsfrom , $v['topics'][$j]['topic_name']);
                        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
                            array('borders' => array(
                                'outline' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            )));
    
                        $this->excel->setActiveSheetIndex(0)
                            ->setCellValue($this->getkey($excelColumnstartsFrom+1) .$excelstartsfrom , ' '.(($v['topics'][$j]['topic_progress']==NULL)?0:round($v['topics'][$j]['topic_progress'],2)).' %');
                        $this->excel->getActiveSheet(0)->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
                            array('borders' => array(
                                'allboarders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            )));    
                    }else{
                        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
                        // echo '<br>'.$this->getkey($excelColumnstartsFrom) .$excelstartsfrom , $res[$i]['topics'][$j]['topic_name'];
                        $this->excel->setActiveSheetIndex(0)
                            ->setCellValue($this->getkey($excelColumnstartsFrom) .$excelstartsfrom , $v['topics'][$j]['topic_name']);
                        //$this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom))->setAutosize(true);
                        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
                            array('borders' => array(
                                'outline' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            )));
                    }
    
                    //$this->excel->setActiveSheetIndex()->getRowDimension($excelstartsfrom)->setRowHeight(15);
                    $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
    
                    $column_score_index = $excelColumnstartsFrom+2;
                    foreach($v['topics'][$j]['topic_scores'] as $vts){
                        $score = $vts;
                        if(in_array(trim(strtolower($score)),array('red','amber','green'))){
                            if(strtolower($score) == 'red')
                                $color = 'FF0000';
                            if(strtolower($score) == 'amber')
                                $color = 'ff9900';
                            if(strtolower($score) == 'green')
                                $color = '5bb166';
        
                            //if((int)$res[$i]['module_status']>0)//If the module is stored we are not showing the score of it's topics module status becomes 0 otherwise it will be >0
                                $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($column_score_index) . $excelstartsfrom,'•');
        
                            $this->excel->getActiveSheet()->getStyle($this->getkey($column_score_index) . $excelstartsfrom)->applyFromArray(
                            array('alignment' => array(
                                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                                                ),
                                'borders' => array(
                                            'allborders' => array(
                                                            'style' => PHPExcel_Style_Border::BORDER_THIN
                                                            )
                                                ),
                                'font'  => array(
                                            'bold'  => true,
                                            'color' => array('rgb' => $color),
                                            'size'  => 15,
                                            'name'  => 'Verdana'
                                        )));
                        }
                        else{
                            $this->excel->setActiveSheetIndex(0)
                                ->setCellValue($this->getkey($column_score_index) . $excelstartsfrom, $score);
                            $this->excel->getActiveSheet()->getStyle($this->getkey($column_score_index) . $excelstartsfrom)->getAlignment()->setHorizontal(
                                PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                        }
                        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->applyFromArray(
                            array('borders' => array(
                                'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            )));
                        $this->excel->getActiveSheet()->getStyle($this->getkey($column_score_index) . $excelstartsfrom)->applyFromArray(
                            array('borders' => array(
                                'allborders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            )));    
                        $column_score_index++;
                    }
                    $excelstartsfrom++;                    
                }
                $this->excel->setActiveSheetIndex(0)
                    ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom, '');
                $this->excel->setActiveSheetIndex(0)
                    ->setCellValue($this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom, '');
                $excelstartsfrom++;    
            }
        }else{
            //This else script is for Dashboard (Previous logic)
            foreach($res as $i =>$v) {
                if($i%2!=0) {
                    $excelColumnstartsFrom += 4;
                    $excelstartsfrom = $excelodd;
                }
                else {
                    $excelColumnstartsFrom = 1;
                    $excelstartsfrom = $exceleven;
                }
    
                if($i%2!=0)
                    $excelstartsfrom--;
                if(!(int)$res[$i]['module_status'])
                    $res[$i]['module_name'] = $res[$i]['module_name'].' (Stored)';
                $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
                $this->excel->setActiveSheetIndex(0)
                    ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom, $res[$i]['module_name']);
                //$this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom))->setAutosize(true);
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
                    array('borders' => array(
                        'outline' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    ),
                        'alignment' => array(
                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT,
                        ),
                        'font'  => array(
                            'bold'  => true
                        )
                    )
                );
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
    
                //echo '<pre>'.print_r($res[$i]);exit;
                $score = $res[$i]['module_score'];
               /* $file_img_path = './images/'.$score.'.png';
                if (file_exists($file_img_path)) {
                    $objDrawing = new PHPExcel_Worksheet_Drawing();
                    $objDrawing->setName('Customer Signature');
                    $objDrawing->setDescription('Customer Signature');
                    //Path to signature .jpg file
                    $signature = $file_img_path;
                    $objDrawing->setPath($signature);
                    $objDrawing->setOffsetX(65);                     //setOffsetX works properly
                    $objDrawing->setCoordinates($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom);             //set image to cell E38
                    $objDrawing->setHeight(15);                     //signature height
                    $objDrawing->setWorksheet($this->excel->getActiveSheet());  //save
                }*/
                if(in_array(trim(strtolower($score)),array('red','amber','green'))){
                    if(strtolower($score) == 'red')
                        $color = 'FF0000';
                    if(strtolower($score) == 'amber')
                        $color = 'ff9900';
                    if(strtolower($score) == 'green')
                        $color = '5bb166';
    
                    $this->excel->setActiveSheetIndex(0)
                    ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,'•');
                    $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
                    array('alignment' => array(
                                'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER
                            ),'borders' => array(
                                'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            ),'font'  => array(
                                'bold'  => true,
                                'color' => array('rgb' => $color),
                                'size'  => 15,
                                'name'  => 'Verdana'
                            )));
                }
                else{
                    $this->excel->setActiveSheetIndex(0)
                        ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom, $score);
                    $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->getAlignment()->setHorizontal(
                        PHPExcel_Style_Alignment::HORIZONTAL_CENTER
                    );
    
                }
    
                $headersel = $this->getkey($excelColumnstartsFrom) . $excelstartsfrom . ':' . $this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom;
                $this->excel->getActiveSheet()->getStyle($headersel)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);//EA965A
                $this->excel->getActiveSheet()->getStyle($headersel)->getFill()->getStartColor()->setARGB('D4E8F3FF');
                if((int)$res[$i]['static']){
                    $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom-1) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4F8CBAD');
                    if($res[$i]['is_workflow']){
                        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom-1) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('D4A0DEA0');
                    }
                    $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($excelColumnstartsFrom-1) . $excelstartsfrom, 'Stored');
                    $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom-1) . $excelstartsfrom)->applyFromArray(
                        array('font'  => array(
                            'bold'  => true,
                            'color' => array('rgb' => 'FFFFFF'),
                            'size'  => 11,
                            'name'  => 'Verdana'
                        )));
                }
                $this->excel->getActiveSheet()->getStyle($headersel)->applyFromArray(
                    array('borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )));
                //$rowsStratsFrom = $head_starts_from + 1;*/
                $excelstartsfrom++;
    
                foreach($res[$i]['topics'] as $j => $v1){
                    //echo $res[$i]['module_name'];
                    if(strtolower($res[$i]['module_name'])=='contract completeness'){
                        $this->excel->setActiveSheetIndex(0)
                            ->setCellValue($this->getkey($excelColumnstartsFrom) .$excelstartsfrom , $res[$i]['topics'][$j]['topic_name']);
                        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
                            array('borders' => array(
                                'outline' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            )));
    
                        $this->excel->setActiveSheetIndex(0)
                            ->setCellValue($this->getkey($excelColumnstartsFrom+1) .$excelstartsfrom , ' '.(($res[$i]['topics'][$j]['topic_progress']==NULL)?0:round($res[$i]['topics'][$j]['topic_progress'],2)).' %');
                        $this->excel->getActiveSheet(0)->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
                            array('borders' => array(
                                'allboarders' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            )));
    
    
                    }else{
                        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
    
                        $this->excel->setActiveSheetIndex(0)
                            ->setCellValue($this->getkey($excelColumnstartsFrom) .$excelstartsfrom , $res[$i]['topics'][$j]['topic_name']);
                        //$this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom))->setAutosize(true);
                        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
                            array('borders' => array(
                                'outline' => array(
                                    'style' => PHPExcel_Style_Border::BORDER_THIN
                                )
                            )));
                    }
    
                    //$this->excel->setActiveSheetIndex()->getRowDimension($excelstartsfrom)->setRowHeight(15);
                    $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);
    
                    $score = $res[$i]['topics'][$j]['topic_score'];
                    //echo $score.' topic';
                    /*$file_img_path = './images/'.$score.'.png';
                    if (file_exists($file_img_path)) {
                        $objDrawing = new PHPExcel_Worksheet_Drawing();
                        $objDrawing->setName('Customer Signature');
                        $objDrawing->setDescription('Customer Signature');
                        //Path to signature .jpg file
                        $signature = $file_img_path;
                        $objDrawing->setPath($signature);
                        $objDrawing->setOffsetX(65);                     //setOffsetX works properly
                        $objDrawing->setCoordinates($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom);             //set image to cell E38
                        $objDrawing->setHeight(15);                     //signature height
                        $objDrawing->setWorksheet($this->excel->getActiveSheet());  //save
                    }*/
                    if(in_array(trim(strtolower($score)),array('red','amber','green'))){
                        if(strtolower($score) == 'red')
                            $color = 'FF0000';
                        if(strtolower($score) == 'amber')
                            $color = 'ff9900';
                        if(strtolower($score) == 'green')
                            $color = '5bb166';
    
                        //if((int)$res[$i]['module_status']>0)//If the module is stored we are not showing the score of it's topics module status becomes 0 otherwise it will be >0
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom,'•');
    
                        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
                        array('alignment' => array(
                                            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                                            ),
                            'borders' => array(
                                        'allborders' => array(
                                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                                        )
                                            ),
                            'font'  => array(
                                        'bold'  => true,
                                        'color' => array('rgb' => $color),
                                        'size'  => 15,
                                        'name'  => 'Verdana'
                                    )));
                    }
                    else{
                        $this->excel->setActiveSheetIndex(0)
                            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom, $score);
                        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->getAlignment()->setHorizontal(
                            PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
                    }
                    $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->applyFromArray(
                        array('borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )));
                    $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
                        array('borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        )));
    
                    $excelstartsfrom++;
                    if($i%2==0){
                        $exceleven++;
                    }else{
                        $excelodd++;
                    }
                }
                $this->excel->setActiveSheetIndex(0)
                    ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom, '');
                $this->excel->setActiveSheetIndex(0)
                    ->setCellValue($this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom, '');
                $excelstartsfrom++;
                $exceleven++;
                $excelodd++;
    
            }
        }
        
        $excelstartsfrom++;
        $excelColumnstartsFrom=1;
        $merge = $this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+6) . $excelstartsfrom;
        $this->excel->setActiveSheetIndex(0)->mergeCells($merge);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom, 'Action and remediation items');
        $this->excel->getActiveSheet()->getStyle($merge)->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                ),
                'font'  => array(
                    'bold'  => true
                )
            )
        );
        $excelstartsfrom++;
        $action_items_row_starts= $excelstartsfrom;
        $this->excel->getActiveSheet()->getStyle($merge)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
        $this->excel->getActiveSheet()->getStyle($merge)->getFill()->getStartColor()->setARGB('D1D1D1d1');
        //
        //$this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom, 'Action');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom, 'Action Owner');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom, 'Target Date');
        //
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+3) . $excelstartsfrom, 'Status');

        //The Following Widths are adjusted based on the (Slide 10 of Test Sprint 6 - 22-11-2019.pptx)
        $this->excel->getActiveSheet()->getColumnDimension('B')->setWidth(23);
        $this->excel->getActiveSheet()->getColumnDimension('C')->setWidth(23);
        $this->excel->getActiveSheet()->getColumnDimension('D')->setWidth(23);
        $this->excel->getActiveSheet()->getColumnDimension('E')->setWidth(23);
        $this->excel->getActiveSheet()->getColumnDimension('F')->setWidth(23);
        $this->excel->getActiveSheet()->getColumnDimension('G')->setWidth(23);
        $this->excel->getActiveSheet()->getColumnDimension('H')->setWidth(23);
        $this->excel->getActiveSheet()->getColumnDimension('I')->setWidth(23);
        $this->excel->getActiveSheet()->getColumnDimension('J')->setWidth(23);
        //
        $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom+4) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+6) . $excelstartsfrom);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+4) . $excelstartsfrom, 'Comments');

        $merge = $this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+6) . $excelstartsfrom;
        $this->excel->getActiveSheet()->getStyle($merge)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
        $this->excel->getActiveSheet()->getStyle($merge)->getFill()->getStartColor()->setARGB('D1D1D1d1');
        $this->excel->getActiveSheet()->getStyle($merge)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),
                'alignment' => array(
                    'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                )
            )
        );
        //$this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom+2))->setAutoSize(true);
        $excelstartsfrom++;
        // echo '<pre>'.print_r($action_items);exit;//user_name
        foreach($action_items as $i => $v)
        {
            //Circussing due to displaying of action item details even there is no comments
            if(count($v['comments_log'])>0)
                $comments_count = count($v['comments_log']);
            else
                $comments_count = 100;
                
            for($c = 0; $c <= $comments_count; $c++)
            {
                //Circussing due to displaying of action item details even there is no comments
                if(count($v['comments_log']) > 0)
                    $l = $v['comments_log'][$c];
                else{
                    if($c == 0){
                        $comments_count = count($v['comments_log']);                    
                    }
                }
                
                    if($c > 0)
                    {
                        unset($action_items[$i]['action_item']); 
                        unset($action_items[$i]['user_name']); 
                        unset($action_items[$i]['due_date']); 
                        unset($action_items[$i]['status']); 
                    }
                //print_r($action_items);die;
                //$this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom);
                if($action_items[$i]['action_item'] == '' && !isset($l['comments']))
                    continue;

                $this->excel->setActiveSheetIndex(0)
                    ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom, $action_items[$i]['action_item']);
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->applyFromArray(
                    array('borders' => array(
                        'outline' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )));
                //
                $this->excel->setActiveSheetIndex(0)
                    ->setCellValue($this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom, $action_items[$i]['user_name']);
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+1) . $excelstartsfrom)->applyFromArray(
                    array('borders' => array(
                        'outline' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )));
                //
                $this->excel->setActiveSheetIndex(0)
                    ->setCellValue($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom, $action_items[$i]['due_date']);
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . $excelstartsfrom)->applyFromArray(
                    array('borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )));
                //
                $this->excel->setActiveSheetIndex(0)
                    ->setCellValue($this->getkey($excelColumnstartsFrom+3) . $excelstartsfrom, $action_items[$i]['status']);
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+3) . $excelstartsfrom)->applyFromArray(
                    array('borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )));
                //
                $this->excel->setActiveSheetIndex(0)->mergeCells($this->getkey($excelColumnstartsFrom+4) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+6) . $excelstartsfrom);
                $this->excel->setActiveSheetIndex(0)
                        ->setCellValue($this->getkey($excelColumnstartsFrom+4) . $excelstartsfrom, isset($l['comments'])?$l['comments']:'');
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+4) . $excelstartsfrom.':'.$this->getkey($excelColumnstartsFrom+6) . $excelstartsfrom)->applyFromArray(
                    array('borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    )));
                    //if(count($v['comments_log']) > 0)
                $excelstartsfrom++;
            }
        }
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom).$excelRowstartsfrom.':'.$this->getkey($excelColumnstartsFrom+6).$excelstartsfrom)
            ->getAlignment()->setWrapText(true);
        /*$this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom).$action_items_row_starts.':'.$this->getkey($excelColumnstartsFrom+4).$excelstartsfrom)
            ->getAlignment()->setWrapText(true);*/

        $this->excel->getActiveSheet()->setSelectedCells('A0');
        //activate worksheet number 1
        $this->excel->setActiveSheetIndex(0);
        if(isset($data['is_workflow']) && $data['is_workflow'] ==1)
            $this->excel->getActiveSheet()->setTitle('WORKFLOW DASHBOARD');
        else
            $this->excel->getActiveSheet()->setTitle('REVIEW DASHBOARD');
        $filename = $info['contract_name'].'_'.date("d-m-Y",strtotime($review_created_date)).'.xls'; //save our workbook as this file name
        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
        $file_path = FILE_SYSTEM_PATH.'downloads/' . $filename;
        $objWriter->save($file_path);
        $view_path='downloads/' . $filename;
        $file_path = REST_API_URL.$view_path;
        $file_path = str_replace('::1','localhost',$file_path);

        $insert_id = $this->Download_model->addDownload(array('path'=>$view_path,'filename'=>$filename,'user_id'=>$this->session_user_info->id_user,'access_token'=>substr($_SERVER['HTTP_AUTHORIZATION'],7),'status'=>0,'created_date_time'=>currentDate()));

        $response = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>pk_encrypt($insert_id));
        $this->response($response, REST_Controller::HTTP_OK);


    }

    public function report_get(){
        //this function generates a report in excel.

        $data = $this->input->get();
        $header = array('last_review'=>'yes',
            'modules'=>array('selection_process'=>'Selection process','performance_plan'=>'Performance plan','contract_completeness'=>'contract completeness'),
            'rag'=>'yes','action_items'=>'yes','comments'=>'yes');
        $data = array();
        $data[0]=array(
            'business_unit'=>1,
            'supplier_contract'=>'abcd',
            'selection_process'=>'red',
            'amber_cnt'=>3,
            'red_cnt'=>4,
            'green_cnt'=>5,
            'action_items'=>8,
            'decision_required'=>'yes',
            'comments'=>'asfaf',
            'last_review_date'=>'21-04-2017',
            'performance_plan'=>'amber',
            'contract_completeness'=>'green',
            'classification'=>'abc'
        );
        $data[1]=array(
            'business_unit'=>2,
            'supplier_contract'=>'efgh',
            'selection_process'=>'red',
            'amber_cnt'=>3,
            'red_cnt'=>4,
            'green_cnt'=>5,
            'action_items'=>8,
            'decision_required'=>'ye1s',
            'comments'=>'asfaf',
            'last_review_date'=>'28-05-2017',
            'performance_plan'=>'green',
            'contract_completeness'=>'amber',
            'classification'=>'abc'
        );
        $report_data = array('report_name'=>'report1','customer_name'=>'Valued Customer','data'=>$data);

        $this->load->library('excel');
        //activate worksheet number 1
        $excelRowstartsfrom=3;
        $excelColumnstartsFrom=1;
        $columnBegin =$excelColumnstartsFrom;
        $excelstartsfrom=$excelRowstartsfrom;

        $count =$excelColumnstartsFrom+3;
        if(isset($header['last_review']) && $header['last_review']=='yes')
            $count++;
        if(isset($header['modules']))
            $count = $count + count($header['modules']);
        if(isset($header['rag']) && $header['rag']=='yes')
            $count = $count+3;
        if(isset($header['action_items']) && $header['action_items']=='yes')
            $count++;
        if(isset($header['comments']) && $header['comments']=='yes')
            $count++;

        $merge1 = $this->getkey($excelColumnstartsFrom).$excelstartsfrom.':'.$this->getkey($count).($excelstartsfrom);
               $this->excel->setActiveSheetIndex(0)->mergeCells($merge1);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . $excelstartsfrom,$report_data['customer_name']);
        $this->excel->getActiveSheet()->getStyle($merge1)->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'alignment' => array('vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT),'font'  => array('bold'  => true,'size' =>36)));
        $this->excel->getActiveSheet()->getStyle($merge1)->getFont()->getColor()->setRGB('FFFFFF');

        $file_img_path1 = './images/report_img_3.png';
        if (file_exists($file_img_path1)) {
            $objDrawing = new PHPExcel_Worksheet_Drawing();
            $objDrawing->setName('Customer Signature');
            $objDrawing->setDescription('Customer Signature');
            //Path to signature .jpg file
            $signature = $file_img_path1;
            $objDrawing->setPath($signature);
            $objDrawing->setOffsetX(5);
            $objDrawing->setOffsetY(25);//setOffsetX works properly
            $objDrawing->setCoordinates($this->getkey($count-4) . $excelstartsfrom);             //set image to cell E38
            $objDrawing->setHeight(110);                     //signature height
            $objDrawing->setWorksheet($this->excel->getActiveSheet());  //save
        }
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . $excelstartsfrom)->getFill()->getStartColor()->setARGB('d4b8cce4');

        $this->excel->getActiveSheet()->getRowDimension($excelstartsfrom)->setRowHeight(105);

        $this->excel->getActiveSheet()->getRowDimension($excelstartsfrom+1)->setRowHeight(115);
        $this->excel->getActiveSheet()->getRowDimension($excelstartsfrom+2)->setRowHeight(10);
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1),'LOB / Function');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom+1) . ($excelstartsfrom+2))->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom+1) . ($excelstartsfrom+2))->getFill()->getStartColor()->setARGB('d4376091');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom+1) . ($excelstartsfrom+2))->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom))->setWidth(15);


        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+1) . ($excelstartsfrom+1),'SUPPLIER / CONTRACT');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+1) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom+1) . ($excelstartsfrom+2))->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom+1))->setWidth(20);


        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom+2) . ($excelstartsfrom+1),'Classification');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom+2) . ($excelstartsfrom+2))->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER),'font'  => array('bold'  => true)));
        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom+2))->setWidth(5);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . ($excelstartsfrom+1))->getAlignment()->setTextRotation(45);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom+2) . ($excelstartsfrom+2))->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom+2) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom+2) . ($excelstartsfrom+2))->getFill()->getStartColor()->setARGB('d4D8D8D8');

        $excelColumnstartsFrom+=3;
        if(isset($header['last_review']) && $header['last_review']=='yes'){
            $this->excel->setActiveSheetIndex(0)
                ->setCellValue($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1),'Latest review date');
            $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->applyFromArray(
                array('borders' => array(
                    'outline' => array(
                        'style' => PHPExcel_Style_Border::BORDER_THIN
                    )
                ),'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER),'font'  => array('bold'  => true)));
            $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1))->getAlignment()->setTextRotation(45);
            $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
            $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->getFill()->getStartColor()->setARGB('d4D8D8D8');
            $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom))->setWidth(10);

            $excelColumnstartsFrom++;
        }

        if(isset($header['modules'])){
            foreach($header['modules'] as $k=>$v){
                $this->excel->setActiveSheetIndex(0)
                    ->setCellValue($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1),$v);
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->applyFromArray(
                    array('borders' => array(
                        'outline' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    ),'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER),'font'  => array('bold'  => true)));
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1))->getAlignment()->setTextRotation(45);
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->getFill()->getStartColor()->setARGB('d4b8cce4');
                $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom))->setWidth(5);

                $excelColumnstartsFrom++;

            }
        }
        if(isset($header['rag']) && $header['rag']=='yes'){
            $color = array('Red (#)','Amber (#)','Green (#)');
            $hash = array('d4FF0000','d4FFC000','d492D050');
            for($i=0;$i<3;$i++){
                $this->excel->setActiveSheetIndex(0)
                    ->setCellValue($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1),$color[$i]);
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->applyFromArray(
                    array('borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    ),'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER),'font'  => array('bold'  => true)));
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1))->getAlignment()->setTextRotation(45);
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1))->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1))->getFill()->getStartColor()->setARGB('d4dbe5f1');
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->getFill()->getStartColor()->setARGB($hash[$i]);
                $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom))->setWidth(5);


                $excelColumnstartsFrom++;
            }
        }
        $this->excel->setActiveSheetIndex(0)
            ->setCellValue($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1),'Decision required');
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->applyFromArray(
            array('borders' => array(
                'outline' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER),'font'  => array('bold'  => true)));
        if(isset($header['action_items']) && $header['action_items']=='yes') {
            $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1))->getAlignment()->setTextRotation(45);
            $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom))->setWidth(5);
        }else if( isset($header['comments']) && $header['comments']=='yes'){
            $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1))->getAlignment()->setTextRotation(45);
            $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom))->setWidth(5);
        }else{
            $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom))->setWidth(35);
        }


        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->getFill()->getStartColor()->setARGB('d4CCC0DA');

        $excelColumnstartsFrom++;

        if(isset($header['action_items']) && $header['action_items']=='yes'){
            $this->excel->setActiveSheetIndex(0)
                ->setCellValue($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1),'Action items');
            $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->applyFromArray(
                array('borders' => array(
                    'outline' => array(
                        'style' => PHPExcel_Style_Border::BORDER_THIN
                    )
                ),'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER),'font'  => array('bold'  => true)));
            if(isset($header['comments']) && $header['comments']=='yes')
            {
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1))->getAlignment()->setTextRotation(45);
                $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom))->setWidth(5);

            }else{
                $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom))->setWidth(35);
            }
            $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
            $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->getFill()->getStartColor()->setARGB('d4CCC0DA');

            $excelColumnstartsFrom++;

        }
        if(isset($header['comments']) && $header['comments']=='yes'){
            $this->excel->setActiveSheetIndex(0)
                ->setCellValue($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1),'Comments');
            $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->applyFromArray(
                array('borders' => array(
                    'outline' => array(
                        'style' => PHPExcel_Style_Border::BORDER_THIN
                    )
                ),'alignment' => array('horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER),'font'  => array('bold'  => true)));
            $this->excel->getActiveSheet()->getColumnDimension($this->getkey($excelColumnstartsFrom))->setWidth(40);
            $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
            $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+1).':'.$this->getkey($excelColumnstartsFrom) . ($excelstartsfrom+2))->getFill()->getStartColor()->setARGB('d4b8cce4');

            $excelColumnstartsFrom++;
        }

        $excelstartsfrom+=3;
        $dataRow=$excelstartsfrom;


        foreach($report_data['data'] as $k=>$v){
            $excelColumnstartsFrom = $columnBegin;
            $this->excel->setActiveSheetIndex(0)
                ->setCellValue($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom),$v['business_unit']);
            $excelColumnstartsFrom++;
            $this->excel->setActiveSheetIndex(0)
                ->setCellValue($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom),$v['supplier_contract']);
            $excelColumnstartsFrom++;
            $this->excel->setActiveSheetIndex(0)
                ->setCellValue($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom),$v['classification']);
            $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom))->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
            $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom))->getFill()->getStartColor()->setARGB('d4D8D8D8');

            $excelColumnstartsFrom++;
            if(isset($header['last_review']) && $header['last_review']=='yes')
                if(isset($v['last_review_date'])) {
                $this->excel->setActiveSheetIndex(0)
                    ->setCellValue($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom), $v['last_review_date']);
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom))->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
                $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom))->getFill()->getStartColor()->setARGB('d4D8D8D8');

                    $excelColumnstartsFrom++;
                }
            foreach($header['modules'] as $mk=>$vk){
                if(isset($v[$mk])){
                    $file_img_path = './images/'.$v[$mk].'.png';
                    if (file_exists($file_img_path)) {
                        $objDrawing = new PHPExcel_Worksheet_Drawing();
                        $objDrawing->setName('Customer Signature');
                        $objDrawing->setDescription('Customer Signature');
                        //Path to signature .jpg file
                        $signature = $file_img_path;
                        $objDrawing->setPath($signature);
                        $objDrawing->setOffsetX(12);                     //setOffsetX works properly
                        $objDrawing->setCoordinates($this->getkey($excelColumnstartsFrom) . $excelstartsfrom);             //set image to cell E38
                        $objDrawing->setHeight(15);                     //signature height
                        $objDrawing->setWorksheet($this->excel->getActiveSheet());  //save
                    }
                }
                $excelColumnstartsFrom++;
            }


            if(isset($header['rag']) && $header['rag']=='yes') {
                if (isset($v['red_cnt'])) {
                    $this->excel->setActiveSheetIndex(0)
                        ->setCellValue($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom), $v['red_cnt']);
                    $excelColumnstartsFrom++;
                }
                if (isset($v['amber_cnt'])) {
                    $this->excel->setActiveSheetIndex(0)
                        ->setCellValue($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom), $v['amber_cnt']);
                    $excelColumnstartsFrom++;
                }
                if (isset($v['green_cnt'])) {
                    $this->excel->setActiveSheetIndex(0)
                        ->setCellValue($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom), $v['green_cnt']);
                    $excelColumnstartsFrom++;
                }
            }
            if($v['decision_required']=='yes')
                $file = 'flag.png';
            else
                $file = '123';
            $file_img_path = './images/'.$file;
            if (file_exists($file_img_path)) {
                $objDrawing = new PHPExcel_Worksheet_Drawing();
                $objDrawing->setName('Customer Signature');
                $objDrawing->setDescription('Customer Signature');
                //Path to signature .jpg file
                $signature = $file_img_path;
                $objDrawing->setPath($signature);
                $objDrawing->setOffsetX(10);
                $objDrawing->setOffsetY(3);//setOffsetX works properly
                $objDrawing->setCoordinates($this->getkey($excelColumnstartsFrom) . $excelstartsfrom);             //set image to cell E38
                $objDrawing->setHeight(15);                     //signature height
                $objDrawing->setWorksheet($this->excel->getActiveSheet());  //save

            }
            $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom))->getFill()->setFillType(PHPExcel_Style_Fill::FILL_SOLID);
            $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom))->getFill()->getStartColor()->setARGB('d4CCC0DA');

            $excelColumnstartsFrom++;


            if(isset($header['action_items']) && $header['action_items']=='yes')
                if(isset($v['action_items'])){
                    $this->excel->setActiveSheetIndex(0)
                        ->setCellValue($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom), $v['action_items']);
                    $excelColumnstartsFrom++;
                }
            if(isset($header['comments']) && $header['comments']=='yes')
                if(isset($v['comments'])){
                $this->excel->setActiveSheetIndex(0)
                    ->setCellValue($this->getkey($excelColumnstartsFrom) . ($excelstartsfrom), $v['comments']);
                $excelColumnstartsFrom++;
                }
            $columnEnd=$excelColumnstartsFrom-1;
         $excelstartsfrom++;
        }
        $this->excel->getActiveSheet()->getStyle($this->getkey($columnBegin).($dataRow).':'.$this->getkey($columnEnd).($excelstartsfrom-1))->applyFromArray(
            array('borders' => array(
                'allborders' => array(
                    'style' => PHPExcel_Style_Border::BORDER_THIN
                )
            ),'alignment' => array('vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT)));







        $this->excel->getActiveSheet()->setSelectedCells('A0');
        //activate worksheet number 1
        $this->excel->setActiveSheetIndex(0);
        $this->excel->getActiveSheet()->setTitle('REPORT');
        $filename = $report_data['report_name'].'_'.date("d-m-Y",strtotime(currentDate())).'.xls';
       // echo $filename;exit;//save our workbook as this file name
        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
        $file_path = FILE_SYSTEM_PATH.'downloads/' . $filename;
        $objWriter->save($file_path);
        $file_path = REST_API_URL.'downloads/' . $filename;
        $file_path = str_replace('::1','localhost',$file_path);
        $response = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>array("file_path" => $file_path,"file_name"=>$filename));
        $this->response($response, REST_Controller::HTTP_OK);


    }

    public function contractListExport_get(){
        //this function generates a report in excel.
        $data = $this->input->get();
        // if($this->session_user_info->customer_id==4){
        //     $result = array('status'=>FALSE, 'error' =>$this->lang->line('unable_download_file'), 'data'=>'');
        //     $this->response($result, REST_Controller::HTTP_OK);
        // }
        // $data['export_type'] = 'All_Activities';
        // $data['export_type'] = 'all_contracts';
        //$this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $this->form_validator->add_rules('export_type', array('required'=>$this->lang->line('export_type_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        // if(isset($data['customer_id'])) {
        //     $data['customer_id'] = pk_decrypt($data['customer_id']);
        //     if($this->session_user_info->customer_id!=$data['customer_id']){
        //         $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
        //         $this->response($result, REST_Controller::HTTP_OK);
        //     }

        // }
        // if(isset($data['user_role_id'])) {
        //     $data['user_role_id'] = pk_decrypt($data['user_role_id']);
        //     if($data['user_role_id']!=$this->session_user_info->user_role_id){
        //         $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
        //         $this->response($result, REST_Controller::HTTP_OK);
        //     }
        // }
        // if(isset($data['id_user'])) {
        //     $data['id_user'] = pk_decrypt($data['id_user']);
        //     if($data['id_user']!=$this->session_user_id){
        //         $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
        //         $this->response($result, REST_Controller::HTTP_OK);
        //     }
        // }

        $data['customer_id'] = $this->session_user_info->customer_id;
        $data['user_role_id'] = $this->session_user_info->user_role_id;
        $data['id_user'] = $this->session_user_id;

        if(isset($data['business_unit_id']) && strtolower($data['business_unit_id'])!='all') {
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            if(!in_array($data['business_unit_id'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['delegate_id'])) {
            $data['delegate_id'] = pk_decrypt($data['delegate_id']);
            if(!in_array($data['delegate_id'],$this->session_user_delegates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_owner_id'])) {
            $data['contract_owner_id'] = pk_decrypt($data['contract_owner_id']);
            if($data['contract_owner_id']!=$this->session_user_customer_all_users){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['customer_user'])) {
            $data['customer_user'] = pk_decrypt($data['customer_user']);
            if($data['customer_user']!=$this->session_user_customer_all_users){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if($this->session_user_info->user_role_id == 3){
            $business_unit = $this->Business_unit_model->getBusinessUnitUser(array('user_id' => $data['id_user'],'status' => '1'));
            $data['business_unit_id'] = array_map(function($i){ return $i['id_business_unit']; },$business_unit);
            $data['contract_owner_id'] = $this->session_user_id;
            $data['business_unit_id'] = $this->session_user_business_units;
        }
        if($this->session_user_info->user_role_id == 4){
            $data['delegate_id'] = $this->session_user_id;
            $business_unit = $this->Business_unit_model->getBusinessUnitUser(array('user_id' => $data['id_user'],'status' => '1'));
            $data['business_unit_id'] = array_map(function($i){ return $i['id_business_unit']; },$business_unit);
        }
        if($this->session_user_info->user_role_id == 6){
            $data['business_unit_id'] = $this->session_user_business_units;
            $data['is_read_only'] =true; 
        }
        if($this->session_user_info->user_role_id == 7){
            $data['provider_id'] = $this->session_user_info->provider;
        } 
        
        if(strtolower($data['export_type']) == 'all_contracts'){
            $data['type_of'] = "contract";
                    /////////////////// advanced filters start//////////////////
        $get_filters=$this->User_model->getFilter(array('status'=>1,'user_id'=>$this->session_user_info->id_user,'module'=>'all_contracts_list','is_union_table'=>0));
        $data['adv_filters']=$get_filters;
        $get_union_filters=$this->User_model->getFilter(array('status'=>1,'user_id'=>$this->session_user_info->id_user,'module'=>'all_contracts_list','is_union_table'=>1));
        $data['adv_union_filters']=$get_union_filters;
        $data['get_all_records']='1';
        /////////////////// advanced filters end//////////////////
            // $result = $this->Contract_model->exportList($data);///to applying advaced filters same as all contract list,commenting the old model and consider same as all contract list service
            $result = $this->Contract_model->getAllContractList($data);//echo $this->db->last_query();exit;

            unset($data['type_of']);
        }else{
            $data["can_access"] = 1;
            $data['get_all_records'] = true;
            $data['can_review']=1;
            $get_filters=$this->User_model->getFilter(array('status'=>1,'user_id'=>$this->session_user_info->id_user,'module'=>'all_activities','is_union_table'=>0));
            $data['adv_filters']=$get_filters;
            $get_union_filters=$this->User_model->getFilter(array('status'=>1,'user_id'=>$this->session_user_info->id_user,'module'=>'all_activities','is_union_table'=>1));
            $data['adv_union_filters']=$get_union_filters;
            //modifed for advanced filters validation filter
            $key = array_search('validation_status', array_column($get_filters, 'database_field'));  
            if (!empty($key) || $key === 0) {  
                $data['validation_filter_status'] =[];
                foreach(explode(',',$get_filters[$key]['value']) as $validationStatus){
                    if($validationStatus=='Validation in preparation'){
                        array_push($data['validation_filter_status'],0,1);
                    }
                    elseif($validationStatus=='Validation ongoing'){
                        array_push($data['validation_filter_status'],2);
                    }
                    elseif($validationStatus=='Validation finalized'){
                        array_push($data['validation_filter_status'],3);
                    }
                }
                $data['validation_filter_contribution_type']=1; 
            } 
            $result = $this->Contract_model->getContractList($data);//echo $this->db->last_query();exit;
        }
        // echo '<pre>'.$this->db->last_query();exit;
        for($s=0;$s<count($result['data']);$s++)
        {
            // echo '<br> is_workflow'.$result['data'][$s]["is_workflow"];
            // echo '<pre>'.print_r($result['data'][$s]);exit;
            //if($result['data'][$s]["is_workflow"] == 0){
                //    unset($result['data'][$s]); 
                //    continue;
                
                if(strlen($result['data'][$s]['relationship_category_name'])>2){
                    preg_match_all('/[A-Z]/', ucwords(strtolower($result['data'][$s]['relationship_category_name'])), $matches);
                    $result['data'][$s]['relationship_category_short_name'] = implode('',$matches[0]);
                }else{
                    $result['data'][$s]['relationship_category_short_name'] = $result['data'][$s]['relationship_category_name'];
                }
                // preg_match_all('/[A-Z]/', ucwords(strtolower($result['data'][$s]['relationship_category_name'])), $matches);
                // $result['data'][$s]['relationship_category_short_name'] = implode('',$matches[0]);
                $result['data'][$s]['review_by'] = '---';$result['data'][$s]['last_review']=NULL;
                $last_finalized_review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $result['data'][$s]['id_contract'],'contract_workflow_id'=>$result['data'][$s]['id_contract_workflow'],'order' => 'DESC','contract_review_status'=>'finished'));
                
                if(!empty($last_finalized_review) && isset($last_finalized_review[0]['id_contract_review']) && $last_finalized_review[0]['id_contract_review']!='' && $last_finalized_review[0]['id_contract_review']!=0) {
                    $result['data'][$s]['review_by'] = $last_finalized_review[0]['review_by'];
                    if($last_finalized_review[0]['review_on']!='---')
                        $result['data'][$s]['last_review'] = date('Y-m-d',strtotime($last_finalized_review[0]['review_on']));
                }
                $review = $this->Contract_model->getLastReviewByContractId(array('contract_id' => $result['data'][$s]['id_contract'],'is_workflow'=>$result['data'][$s]['is_workflow'],'order' => 'DESC'));
                // echo '<pre>'.$this->db->last_query();
                if(!empty($review) && isset($review[0]['id_contract_review']) && $review[0]['id_contract_review']!='' && $review[0]['id_contract_review']!=0) {
                    //getting score of recent review
                    // $result['data'][$s]['id_contract_review'] = $review[0]['id_contract_review'];
                    // $module_score = $this->Contract_model->getContractReviewModuleScore(array('contract_review_id' => $review[0]['id_contract_review']));
                    // for($sr=0;$sr<count($module_score);$sr++)
                    // {
                    //     $module_score[$sr]['score'] = getScoreByCount($module_score[$sr]);
                    // }
                    // $result['data'][$s]['score'] = getScore($scope = array_map(function($i){ return strtolower($i['score']); },$module_score));
                    if($review[0]['contract_review_status'] == 'pending review')
                        $result['data'][$s]['contract_status'] = 'Review to Initiate';
                    else
                        $result['data'][$s]['contract_status'] = $review[0]['contract_review_status'];
                }
                if((int)$result['data'][$s]['is_workflow']){
                    // echo '<pre>'.print_r($result['data'][$s]);
                    $c_wflow = $this->User_model->check_record('contract_workflow',array('id_contract_workflow' => $result['data'][$s]['id_contract_workflow']));
                    if($c_wflow[0]['workflow_status'] == 'pending workflow')
                        $result['data'][$s]['contract_status'] = 'Task to Initiate';
                    else
                        $result['data'][$s]['contract_status'] = str_replace('workflow','task',$c_wflow[0]['workflow_status']);
                        
                    $result['data'][$s]['template_name'] = $this->User_model->check_record('template',array('id_template'=>$result['data'][$s]['id_template']))[0]['template_name'];
                    // $result['data'][$s]['last_review'] = '';
                    // echo '<pre>'.$this->db->last_query();
                }
                //Dead line
                $reminder_days = array();
                if($result['data'][$s]['can_review'] == 1){
                    //Getting reminder days of a contract category
                    $reminder_days = $this->User_model->check_record('relationship_category_remainder',array('relationship_category_id'=>$result['data'][$s]['relationship_category_id']));
                }else{
                    $reminder_days[0]['days'] = 0;
                }
                if($result['data'][$s]['is_workflow'] == 0){
                    //$result['data'][$s]['deadline'] = ($this->Contract_model->getContractDeadline(array('relationship_category_id'=>$result['data'][$s]['relationship_category_id'],'id_contract'=>$result['data'][$s]['id_contract'])));
                    $contract_id = $result['data'][$s]['id_contract'];
                    // $check_contract_in_calender_sql = "SELECT * FROM calender WHERE status = 1 AND (LEFT(contract_id,".strlen($contract_id).") = ".$contract_id." OR RIGHT(contract_id,".strlen($contract_id).") = ".$contract_id." OR contract_id LIKE '%,".$contract_id.",%');";
                    // $check_contract_in_calender_sql = $this->User_model->custom_query($check_contract_in_calender_sql);
    
                    $reminder_days = array();
                    if($result['data'][$s]['can_review'] == 1){
                        //Getting reminder days of a contract category
                        $reminder_days = $this->User_model->check_record('relationship_category_remainder',array('relationship_category_id'=>$result['data'][$s]['relationship_category_id']));
                    }
                    if(count($reminder_days) == 0){
                        $reminder_days[0]['days'] = 0;
                    }
                    $check_contract_in_calender_sql = $this->Contract_model->check_contract_in_calender(
                                                                            array(
                                                                                'contract_id' => $result['data'][$s]['id_contract'],
                                                                                'business_unit_id' => $result['data'][$s]['business_unit_id'],
                                                                                'relationship_category_id' => $result['data'][$s]['relationship_category_id'],
                                                                                'provider_id' => $result['data'][$s]['provider_id'],
                                                                                'only_one_contract' => true,
                                                                                'is_workflow' => 0
                                                                            ));
                    if(count($check_contract_in_calender_sql)>0){
                        //Meanse there are contracts planned by selecting them
                        $result['data'][$s]['deadline'] = $check_contract_in_calender_sql[0]['date'];
                        $result['data'][$s]['review_name'] = $check_contract_in_calender_sql[0]['workflow_name'];
                    }else{
                        //Meanse ther is not plan available 
                        $result['data'][$s]['deadline'] = null;
                        $result['data'][$s]['review_name'] = null;
                    }
                }else{
                    //$result['data'][$s]['deadline'] = ($this->Contract_model->getContractDeadline(array('relationship_category_id'=>$result['data'][$s]['relationship_category_id'],'id_contract'=>$result['data'][$s]['id_contract'])));
                    if($result['data'][$s]['id_contract_workflow'] > 0){
                        $check_contract_in_calender_sql = $this->User_model->check_record('contract_workflow',array('id_contract_workflow'=>$result['data'][$s]['id_contract_workflow'],'status'=>1));
                        $result['data'][$s]['deadline'] = $check_contract_in_calender_sql[0]['Execute_by'];
                        $result['data'][$s]['review_name'] = $check_contract_in_calender_sql[0]['workflow_name'];
                    }else{
                        //Meanse ther is not plan available 
                        $result['data'][$s]['deadline'] = null;
                        $result['data'][$s]['review_name'] = null;
                    }
                }
                $check_review_schedule = $this->Contract_model->check_contract_in_calender(
                    array(
                        'contract_id' => $result['data'][$s]['id_contract'],
                        'business_unit_id' => $result['data'][$s]['business_unit_id'],
                        'relationship_category_id' => $result['data'][$s]['relationship_category_id'],
                        'provider_id' => $result['data'][$s]['provider_name'],
                        'is_workflow' => 0
                    ));
                if(isset($result['data'][$s]['is_workflow']) && $result['data'][$s]['is_workflow']==1 && isset($result['data'][$s]['id_contract_workflow']) && $result['data'][$s]['id_contract_workflow'] > 0){
                    $contract_workflow_data = $this->User_model->check_record('contract_workflow',array('id_contract_workflow' => $result['data'][$s]['id_contract_workflow']));
                    $review_or_workflow['review_name'] = $contract_workflow_data[0]['workflow_name'];
                    $id_contract_workflow = array($result['data'][$s]['id_contract_workflow']);
                    $review_or_workflow['review_data'][] = array('is_workflow'=>0,'id_contract'=>$result['data'][$s]['id_contract'],'id_contract_review'=>count($currentReviewId)>0?$currentReviewId[0]['id_contract_review']:0,'id_contract_workflow'=>0,'review_name'=>isset($check_review_schedule[0])?$check_review_schedule[0]['workflow_name']:'---');
                }else{
                    if(count($check_review_schedule) > 0)
                        $review_or_workflow['review_name'] = $check_review_schedule[0]['workflow_name'];
                    else
                        $review_or_workflow['review_name'] = null;
                }
                //echo '<pre>'.print_r($result['data'][$s]);exit;
                $result['data'][$s]['contract_start_date'] = date('Y-m-d',strtotime($result['data'][$s]['contract_start_date']));
                $result['data'][$s]['contract_end_date'] = !empty($result['data'][$s]['contract_end_date'])?date('Y-m-d',strtotime($result['data'][$s]['contract_end_date'])):'';
                //getting action items of a recent review based on user role
            //}
        }
        //preparing headers
        if(strtolower($data['export_type']) == 'all_contracts'){
            //Geting Active tags
            $active_tags = $this->Tag_model->TagList(array('customer_id'=>$data['customer_id'],'status'=>1,'tag_type'=>'contract_tags'));
            //echo '<pre>'.print_r($active_tags);exit;
            $tags = array();
            // foreach($active_tags as $k=>$v){
            //     $tags[$k]['text']=$v['tag_text'];
            //     $tags[$k]['field_type']=$v['field_type'];
            //     $tags[$k]['id']=$v['id_tag'];
            // }
            for($i=0; $i<NO_OF_TAGS ;$i++){
                $tags[$i]['text']=isset($active_tags[$i])?$active_tags[$i]['tag_text']:'';
                $tags[$i]['field_type']=isset($active_tags[$i])?$active_tags[$i]['field_type']:'';
                $tags[$i]['id']=isset($active_tags[$i])?$active_tags[$i]['id_tag']:'';
            }
            // $spentlines = array(array('id'=>'','text'=>'Spend Lines','field_type'=>''));
            
            // $spentcount=$this->Contract_model->spentcount(array('status'=>1));  
             $spentcount=$this->Project_model->getspent(array('customer_id'=>$data['customer_id']));  
            //echo $this->db->last_query();exit;
            // print_r($spentcount);exit;
            // $spent=$spentcount->count;
            $spent=$spentcount[0]['count'];
            $spentlines=array();
            for($i=0; $i<$spent ;$i++){            
                $spentlines[$i]['id']=$spentcount1[$i]['id'];
                $spentlines[$i]['text']='Invoice '.($i+1);
                $spentlines[$i]['field_type']='currency';
            }

            $headers=array('Relation','Contract ID','Contract Name','Category','Business Unit','Owner','Delegate','Contract Start Date','Contract End Date','Automatic Prolongation',$tags,'Reference Number (PO)','Projected Value','Additional Recurring Value','Additional One-off Value','Total Spend',$spentlines,'Contract Description');
        }else{
            $headers=array('Relation','Contract ID','Contract Name','Category','Business Unit','Status','Owner','Delegate','Type','Template name','Name','Review By','Last Review','Completion','Actual Score');
        }
        if(isset($result['data']))
            $result = $result['data'];

        $this->load->library('excel');
        //activate worksheet number 1
        $excelRowstartsfrom=1;
        $excelColumnstartsFrom=0;
        $columnBegin =$excelColumnstartsFrom;
        $excelstartsfrom=$excelRowstartsfrom;
        //echo '<pre>'.print_r($headers);exit;
        //writing headers
        foreach($headers as $k=>$v){
            if(is_array($v)){ 
                foreach($v as $k1 => $v1){
                    $this->excel->setActiveSheetIndex(0)
                    ->setCellValue($this->getkey($columnBegin) . $excelstartsfrom,$v1['text']);
                    
                    if($v1['field_type'] == 'currency')
                        $this->excel->getActiveSheet()->getStyle($this->getkey($columnBegin) . ($excelstartsfrom+1).':'.$this->getkey($columnBegin) . ($excelstartsfrom+1000))->getNumberFormat()->setFormatCode('_("€"* #,##0.00_);_("€"* \(#,##0.00\);_("€"* "-"??_);_(@_)');
                    // if($v1['field_type'] == 'number')
                    //     $this->excel->getActiveSheet()->getStyle($this->getkey($columnBegin) . ($excelstartsfrom+1).':'.$this->getkey($columnBegin) . ($excelstartsfrom+1000))->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
                    $this->excel->getActiveSheet()->getStyle($this->getkey($columnBegin) . $excelstartsfrom)->applyFromArray(
                        array('borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),'alignment' => array('vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT),'font'  => array('bold'  => true,'size'=>12)));
                    $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin))->setAutoSize(true);
                    $columnBegin++;
                }                
            }else{
                $this->excel->setActiveSheetIndex(0)
                    ->setCellValue($this->getkey($columnBegin) . $excelstartsfrom,$v);
                if($v == 'Projected Value' || $v == 'Additional Recurring Value' || $v == 'Additional One-off Value' || $v == 'Total Spend'){
                    $this->excel->getActiveSheet()->getStyle('V2:V1000')->getNumberFormat()->setFormatCode('_("€"* #,##0.00_);_("€"* \(#,##0.00\);_("€"* "-"??_);_(@_)');
                    $this->excel->getActiveSheet()->getStyle('W2:W1000')->getNumberFormat()->setFormatCode('_("€"* #,##0.00_);_("€"* \(#,##0.00\);_("€"* "-"??_);_(@_)');
                    $this->excel->getActiveSheet()->getStyle('X2:X1000')->getNumberFormat()->setFormatCode('_("€"* #,##0.00_);_("€"* \(#,##0.00\);_("€"* "-"??_);_(@_)');
                    $this->excel->getActiveSheet()->getStyle('Y2:Y1000')->getNumberFormat()->setFormatCode('_("€"* #,##0.00_);_("€"* \(#,##0.00\);_("€"* "-"??_);_(@_)');
                }
                $this->excel->getActiveSheet()->getStyle($this->getkey($columnBegin) . $excelstartsfrom)->applyFromArray(
                    array('borders' => array(
                        'allborders' => array(
                            'style' => PHPExcel_Style_Border::BORDER_THIN
                        )
                    ),'alignment' => array('vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT),'font'  => array('bold'  => true,'size'=>12)));

                $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin))->setAutoSize(true);
                $columnBegin++;
            }
        }
        $excelstartsfrom++;

        $excel_data=array();
        //arranging data in required format
        $masterTags = $tags;
        foreach($result as $k => $v){ 
            if(strtolower($data['export_type']) == 'all_contracts'){
                //continue;
                $contract_tags = $this->Tag_model->getContractTags(array('contract_id'=>$v['id_contract'],'status'=>1,'orderBy'=>'export'));
                // echo $this->db->last_query();exit;
                $tags =array();
                for($t=0;$t<NO_OF_TAGS;$t++)
                {
                    $tags[] = array('id'=>'','value'=>'');
                }
                // $tags = array(array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''),array('id'=>'','value'=>''));
                // foreach($contract_tags as $k1 => $v1){
                //     $tags[$k1]['id'] = $v1['id_tag'];
                //     $tags[$k1]['field_type'] = $v1['field_type'];
                //     // if($v1['field_type']=='currency'){
                //     //     $currency = number_format($v1['tag_option_value'], 2, '.', ',');
                //     //     $tags[$k1]['value']=$v['currency_name'].' '.currencyFormat($currency,$v['currency_name']);
                //     // }else if($v1['field_type']=='number'){
                //     //     $tags[$k1]['value'] = number_format($v1['tag_option_value']);
                //     // }else{                    
                //     //     $tags[$k1]['value'] = $v1['tag_option_value'];
                //     // }
                //     $tags[$k1]['value'] = $v1['tag_option_value'];
                //     if($v1['tag_type']=='date' && !empty($v1['tag_option_value'])){
                //         $tags[$k1]['value']=date_format(date_create($v1['tag_option_value']),"M d,Y");
                //     }
                // }
                foreach($masterTags as $mk=>$mv)
                {
                    $arrayIndex = array_search($mv['id'], array_column($contract_tags, 'tag_id'));
                    if(gettype($arrayIndex)!="boolean")
                    {
                        $tags[$mk]['id'] = $contract_tags[$arrayIndex]['id_tag'];
                        $tags[$mk]['field_type'] = $contract_tags[$arrayIndex]['field_type'];

                        if($contract_tags[$arrayIndex]['tag_type'] == "input" ||$contract_tags[$arrayIndex]['tag_type'] == "rag" || $contract_tags[$arrayIndex]['tag_type'] == "radio" || ($contract_tags[$arrayIndex]['tag_type'] == "dropdown" && $contract_tags[$arrayIndex]['multi_select'] == 0)){

                            $tags[$mk]['value'] = $contract_tags[$arrayIndex]['tag_option_value'];
                        }
                        elseif($contract_tags[$arrayIndex]['tag_type'] == "date" && !empty($contract_tags[$arrayIndex]['tag_option_value'])){
                            $tags[$mk]['value']=date_format(date_create($contract_tags[$arrayIndex]['tag_option_value']),"M d,Y");
                            $tags[$mk]['field_type'] = 'date';
                        }
                        elseif($contract_tags[$arrayIndex]['tag_type'] == "dropdown" && $contract_tags[$arrayIndex]['multi_select'] == 1)
                        {
                            $explodedData = [];
                            if(!empty($contract_tags[$arrayIndex]['tag_option']))
                            {
                                $explodedData = explode(",",$contract_tags[$arrayIndex]['tag_option']);
                                $tagAnswers = $this->Contract_model->TagAnswer(array('id_contract_tag' => $contract_tags[$arrayIndex]['id_contract_tag'] , 'explodedData' => $explodedData));
                                $tags[$mk]['value'] = !empty($tagAnswers) ? $tagAnswers[0]['tag_option_values'] : '';
                            }
                            else
                            {
                                $tags[$mk]['value'] = '';
                            }
                        }
                        elseif($contract_tags[$arrayIndex]['tag_type'] == "selected")
                        {
                            $tagAnswers = explode(",",$contract_tags[$arrayIndex]['tag_option']);
                            $modalData = [
                                'module' => $contract_tags[$arrayIndex]['selected_field'],
                                'ids' => $tagAnswers
                            ];
                            $tagOptionValue = $this->Tag_model->getNames($modalData);
                            $tags[$mk]['value'] = !empty($tagOptionValue) ? $tagOptionValue[0]['tag_option_value'] : '';
                        }
                    }
                    else
                    {
                        $tags[$mk]['id'] = '';
                        $tags[$mk]['field_type'] = '';
                        $tags[$mk]['value'] = '';
                    }
                }
                //$spentlines = array(array('id'=>'','value'=>'spent1'),array('id'=>'','value'=>'spent2'));
                $spentlines = $this->User_model->check_record_selected('spent_amount','spent_lines',array('contract_id'=>$v['id_contract'],'status'=>1));
                $total_spend = 0;
                foreach($spentlines as $v1)
                    $total_spend += $v1['spent_amount'];

                $spentcount1=$this->Contract_model->spentcount1(array('contract_id'=>$v['id_contract'],'status'=>1));
                $spentlines = array();
                for($i=0; $i<$spent ;$i++){
                    $spentlines[$i]['value']=isset($spentcount1[$i])?$spentcount1[$i]->spent_amount:0;
                    $spentlines[$i]['field_type']='currency';
                    $spentlines[$i]['id']='';
                }
            }
            //$spentlines = implode(' ; ',array_map(function($i){ return '€ '.currencyFormat(number_format($i['spent_amount'], 2),$v['currency_name']); },$spentlines));
            if(strtolower($data['export_type']) == 'all_contracts')
                $excel_data[$k]['provider_name']=!empty($v['providerName'])?$v['providerName']:$v['provider_name'];
            else
                $excel_data[$k]['provider_name']=$v['providerName'];
            $excel_data[$k]['contract_unique_id']=$v['contract_unique_id'];
            $excel_data[$k]['contract_name']=$v['contract_name'];
            // if(strtolower($data['export_type']) == 'all_activities')
            $excel_data[$k]['relationship_category_name']=$v['relationship_category_name'];
            $excel_data[$k]['bu_name']=$v['bu_name'];
            if(strtolower($data['export_type']) == 'all_activities'){
                if(strtolower($v['contract_status']) == 'pending review')
                    $excel_data[$k]['contract_status']='Review to Initiate';
                else if(strtolower($v['contract_status']) == 'pending workflow')
                    $excel_data[$k]['contract_status']='Task to Initiate';
                else if(strtolower($v['contract_status']) == 'finished')
                    $excel_data[$k]['contract_status']='Review Finalized';
                else
                    $excel_data[$k]['contract_status']=ucwords($v['contract_status']);
            }
            $excel_data[$k]['bu_owner']=$v['bu_owner'];
            $excel_data[$k]['currency_name']=$v['currency_name'];
            //$excel_data[$k]['id_contract']=$v['id_contract'];
            $excel_data[$k]['bu_delegate']=$v['bu_delegate'];
            if(strtolower($data['export_type']) == 'all_activities'){
                $excel_data[$k]['review_type']=((int)$v['is_workflow'])?'Task':'Review';
                $excel_data[$k]['template_name']=$v['template_name'];
                $excel_data[$k]['review_name']=$v['review_name'];
                $excel_data[$k]['review_by']=$v['deadline'];
                $excel_data[$k]['last_review']=$v['last_review'];
                $contract_progress_score=$this->calculateScoreAndProgress(array('id_contract_review'=>$v['id_contract_review'],'user_id'=>$this->session_user_id));//new funcion for calculating  the score and contract progress
                $excel_data[$k]['progress']= $contract_progress_score['contract_progress'];
                $excel_data[$k]['score']=$contract_progress_score['score']; 
            }
            if(strtolower($data['export_type']) == 'all_contracts'){
                $excel_data[$k]['contract_start_date']=date_format(date_create($v['contract_start_date']),"Y-m-d");
                $excel_data[$k]['contract_end_date']= (!empty($v['contract_end_date']))?date_format(date_create($v['contract_end_date']),"Y-m-d"):'';
                $excel_data[$k]['auto_renewal']=$v['auto_renewal']==1?'Yes':'No';
                // $excel_data[$k]['classification_name']=$v['classification_name'];//removed
                $excel_data[$k]['tags']=$tags;
                $excel_data[$k]['po_number']=$v['po_number'];
                // $currency = number_format($v['contract_value'], 2, '.', ',');
                // $excel_data[$k]['contract_value']=$v['currency_name'].' '.currencyFormat($currency,$v['currency_name']);
                $excel_data[$k]['contract_value']=$v['contract_value'];
                $excel_data[$k]['additional_recuring_fees']=$v['additional_recurring_fees'];
                $excel_data[$k]['additonal_one_off_fees']=$v['additonal_one_off_fees'];
                $excel_data[$k]['total_spend']=$total_spend;
                $excel_data[$k]['spentlines']=$spentlines;
                // print_r($spentlines);exit;
                $excel_data[$k]['description']=$v['description'];
            }
            //echo '<pre>'.print_r($excel_data);exit;
            
        }
        ///writing data row by row
        // echo '<pre>'.print_r($excel_data);exit;
        foreach($excel_data as $k => $v){
            $columnBegin =$excelColumnstartsFrom;
           $contractCurrencyCode = "";
           $contractCurrencyCode =  $v['currency_name'];
           unset($v['currency_name']);
            foreach($v as $key => $v1){ 
                if(is_array($v1)){
                    
                    foreach($v1 as $v2){    
                        if($v2['field_type'] == 'number'){
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin) . $excelstartsfrom,number_format($v2['value'],0));
                            $this->excel->getActiveSheet()->getStyle($this->getkey($columnBegin) . $excelstartsfrom)->applyFromArray(
                                array('borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                ),'alignment' => array('vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_RIGHT),'font'  => array('size'=>12)));
                        }
                        elseif($v2['field_type'] == 'date'){
                            $format = 'mmm d,YYYY';

                            if(!empty($v2['value']))
                            {
                                $date = new DateTime($v2['value']);
                                $dateVal = PHPExcel_Shared_Date::PHPToExcel($date);
                            }
                            else{
                                $date = '';
                                $dateVal = '';
                            }
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin) . $excelstartsfrom,$dateVal);
                            $this->excel->setActiveSheetIndex(0)->getStyle($this->getkey($columnBegin) . $excelstartsfrom)->getNumberFormat()->setFormatCode($format);
                         }
                        elseif($v2['field_type'] == 'currency'){
                           $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin) . $excelstartsfrom,$v2['value']);
                           $symbol =CurrencySymbol($contractCurrencyCode);
                           $this->excel->setActiveSheetIndex(0)->getStyle($this->getkey($columnBegin) . $excelstartsfrom)->getNumberFormat()->setFormatCode('_("'.$contractCurrencyCode.' '.'"* #,##0.00_);_("'.$contractCurrencyCode.' '.'"* (#,##0.00);_("'.$contractCurrencyCode.' '.'"* "-"??_);_(@_)');
                            $this->excel->getActiveSheet()->getStyle($this->getkey($columnBegin) . $excelstartsfrom)->applyFromArray(
                                array('borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                ),'alignment' => array('vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT),'font'  => array('size'=>12)));
                        }else{
                            $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin) . $excelstartsfrom,str_replace(",",";",$v2['value']));
                            $this->excel->getActiveSheet()->getStyle($this->getkey($columnBegin) . $excelstartsfrom)->applyFromArray(
                                array('borders' => array(
                                    'allborders' => array(
                                        'style' => PHPExcel_Style_Border::BORDER_THIN
                                    )
                                ),'alignment' => array('vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT),'font'  => array('size'=>12)));
                        }
                        $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin))->setAutoSize(true);
                        $columnBegin++;
                    }
                }else{
                    if($key == "contract_start_date"||$key  == "contract_end_date" || $key  == "last_review" || $key  == "review_by")
                    { 
                        //$format = 'dd-mm-yyyy';
                        $format = 'mmm d,YYYY';

                        if(!empty($v1))
                        {
                            $date = new DateTime($v1);
                            $dateVal = PHPExcel_Shared_Date::PHPToExcel($date);
                        }
                        else{
                            $date = '';
                            $dateVal = '';
                        }
                        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin) . $excelstartsfrom,$dateVal);
                        $this->excel->setActiveSheetIndex(0)->getStyle($this->getkey($columnBegin) . $excelstartsfrom)->getNumberFormat()->setFormatCode($format);
                        // $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin) . $excelstartsfrom,PHPExcel_Shared_Date::PHPToExcel($v1));
                        // $this->excel->setActiveSheetIndex(0)->getStyle($this->getkey($columnBegin) . $excelstartsfrom)->getNumberFormat()->setFormatCode(PHPExcel_Style_NumberFormat::FORMAT_DATE_DMYMINUS);
                    }
                    elseif($key == "contract_value" ||$key == "additional_recuring_fees" ||$key == "additonal_one_off_fees" ||$key == "total_spend")  
                    {
                        // $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin) . $excelstartsfrom,number_format($v1,2,",","."));
                        // ->setFormatCode('$ #,##0.00');
                        $this->excel->setActiveSheetIndex(0)->setCellValue($this->getkey($columnBegin) . $excelstartsfrom,$v1);
                        $symbol =CurrencySymbol($contractCurrencyCode);
                        $this->excel->setActiveSheetIndex(0)->getStyle($this->getkey($columnBegin) . $excelstartsfrom)->getNumberFormat()->setFormatCode('_("'.$contractCurrencyCode.' '.'"* #,##0.00_);_("'.$contractCurrencyCode.' '.'"* (#,##0.00);_("'.$contractCurrencyCode.' '.'"* "-"??_);_(@_)');
                  
                    }
                    else{
                        $this->excel->setActiveSheetIndex(0)
                        ->setCellValue($this->getkey($columnBegin) . $excelstartsfrom,$v1);
                    }
                    $this->excel->getActiveSheet()->getStyle($this->getkey($columnBegin) . $excelstartsfrom)->applyFromArray(
                        array('borders' => array(
                            'allborders' => array(
                                'style' => PHPExcel_Style_Border::BORDER_THIN
                            )
                        ),'alignment' => array('vertical' => PHPExcel_Style_Alignment::VERTICAL_CENTER,'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_LEFT),'font'  => array('size'=>12)));
                    $this->excel->getActiveSheet()->getColumnDimension($this->getkey($columnBegin))->setAutoSize(true);
                    $columnBegin++;
                }
            } 
            $excelstartsfrom++;
        }
        $this->excel->getActiveSheet()->getStyle($this->getkey($excelColumnstartsFrom).$excelRowstartsfrom.':'.$this->getkey($columnBegin).$excelstartsfrom)
            ->getAlignment()->setWrapText(true);



        $this->excel->getActiveSheet()->setSelectedCells('A0');
        //activate worksheet number 1
        $this->excel->setActiveSheetIndex(0);
        $this->excel->getActiveSheet()->setTitle('All contract List');
        $filename = $data['export_type'].'_'.date("d-m-Y",strtotime(currentDate())).'.xls';
        // echo $filename;exit;//save our workbook as this file name
        $objWriter = PHPExcel_IOFactory::createWriter($this->excel, 'Excel5');
        $file_path = FILE_SYSTEM_PATH.'downloads/' . $filename;
        $objWriter->save($file_path);
        $view_path='downloads/' . $filename;
        $file_path = REST_API_URL.$view_path;
        $file_path = str_replace('::1','localhost',$file_path);

        $insert_id = $this->Download_model->addDownload(array('path'=>$view_path,'filename'=>$filename,'user_id'=>$this->session_user_info->id_user,'access_token'=>substr($_SERVER['HTTP_AUTHORIZATION'],7),'status'=>0,'created_date_time'=>currentDate()));

        $response = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>pk_encrypt($insert_id));
        $this->response($response, REST_Controller::HTTP_OK);

    }

    function getkey($pos){
        //this function used to return ascii value based on position used int export_get function
        $numeric = $pos % 26;
        $letter = chr(65 + $numeric);
        $num2 = intval($pos / 26);
        if ($num2 > 0) {
            return $this->getkey($num2 - 1) . $letter;
        } else {
            return $letter;
        }
    }
    
   
    public function reviewdiscussionclose_post(){
       // updateContractReviewDiscussion
        $data = $this->input->post();
        $this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));
        $this->form_validator->add_rules('module_id', array('required'=>$this->lang->line('module_id_req')));
        $this->form_validator->add_rules('contract_review_id', array('required'=>$this->lang->line('contract_review_id_req')));
        $this->form_validator->add_rules('contract_review_discussion_id', array('required'=>$this->lang->line('contract_review_discussion_id_req')));
        $this->form_validator->add_rules('created_by', array('required'=>$this->lang->line('created_by_req')));
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['module_id'])) {
            $data['module_id'] = pk_decrypt($data['module_id']);
            if(!in_array($data['module_id'],$this->session_user_contract_review_modules)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_review_id'])) {
            $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
            if(!in_array($data['contract_review_id'],$this->session_user_contract_reviews)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['created_by'])) {
            $data['created_by'] = pk_decrypt($data['created_by']);
            if($data['created_by']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        //
        $send['contract_review_id'] = $data['contract_review_id'];
        $module_id = $send['module_id'] = $data['module_id'];
        $module_progress = $this->Contract_model->progress($send);
        
        //Checking the validtors on the module
        $q = 'SELECT * from contract_user cu JOIN user u on u.id_user = cu.user_id WHERE cu.module_id ='.$module_id.' AND u.contribution_type = 1 AND cu.status = 1';
        $validators_on_module = $this->User_model->custom_query($q);
        $module_info = $this->Module_model->getModuleName(array('language_id'=>1,'module_id'=>$module_id));
        if($module_progress == 100 && count($validators_on_module) > 0 && (int)$module_info[0]['module_status'] == 1){
            //update module to ready for validation if module progress is 100 %
            $this->User_model->update_data('module',array('module_status'=>2),array('id_module'=>$module_id));
            // $this->sendmailtovc($send); // sending email to validation contributors
        }

        $modules=explode(',',$data['contract_review_discussion_id']);
        foreach ($modules as $k=>$v) {
            $v=pk_decrypt($v);
            if($v!=''){
                if(!in_array($v,$this->session_user_contract_review_discussions)){
                    $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                    $this->response($result, REST_Controller::HTTP_OK);
                }
                $this->Contract_model->updateContractReviewDiscussion(array('id_contract_review_discussion'=>$v,'updated_by'=>$data['created_by'],'updated_on'=>currentDate(),'discussion_status'=>2));
                $discussion_initiated_user_info = $this->User_model->getUserInfo(array('user_id' => $data['created_by']));
                $module_info = $this->Module_model->getModuleName(array('language_id'=>1,'module_id'=>$data['module_id']));
                if($module_info[0]['is_workflow'] == 1){
                    $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $discussion_initiated_user_info->customer_id,'module_key'=>'CONTRACT_WORKFLOW_DISCUSSION_CLOSE'));
                }else{
                    $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $discussion_initiated_user_info->customer_id,'module_key'=>'CONTRACT_REVIEW_DISCUSSION_CLOSE'));
                }
                if($template_configurations_parent['total_records']>0){
                    $contract_info = $this->Contract_model->getContractDetails(array('id_contract' => $data['contract_id']));
                    $bu_owner_info = $this->User_model->getUserInfo(array('user_id' => $contract_info[0]['contract_owner_id'],'user_status'=>1));
                    $customer_details = $this->Customer_model->getCustomer(array('id_customer' => $discussion_initiated_user_info->customer_id));
                    if(isset($contract_info[0]['delegate_id']) && $contract_info[0]['delegate_id']!=NULL && $contract_info[0]['delegate_id']>0){
                        $delegate_info = $this->User_model->getUserInfo(array('user_id' => $contract_info[0]['delegate_id'],'user_status'=>1));
                    }
                    /*$cust_admin = $this->Customer_model->getCustomerAdminList(array('customer_id' => $customer_details[0]['id_customer']));
                    $cust_admin = $cust_admin['data'][0];*/
                    $customer_admin_list=$this->Customer_model->getCustomerAdminList(array('customer_id'=>$discussion_initiated_user_info->customer_id,'user_status'=>1));
                    if($customer_details[0]['company_logo']=='') {
                        $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'company');
                    }
                    else{
                        $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'profile', SMALL_IMAGE);

                    }
                    if(!empty($customer_details)){ $customer_name = $customer_details[0]['company_name']; }

                    //mail to customer admins
                    foreach($customer_admin_list['data'] as $kd=>$vd){
                        $template_configurations=$template_configurations_parent['data'][0];
                        $wildcards=$template_configurations['wildcards'];
                        $wildcards_replaces=array();
                        $wildcards_replaces['first_name']=$vd['first_name'];
                        $wildcards_replaces['last_name']=$vd['last_name'];
                        $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
                        $wildcards_replaces['discussion_closed_user_name']=$discussion_initiated_user_info->first_name.' '.$discussion_initiated_user_info->last_name.' ('.$discussion_initiated_user_info->user_role_name.')';
                        $wildcards_replaces['discussion_closed_date']=dateFormat(currentDate());
                        // $wildcards_replaces['contract_review_module_name']=$module_info[0]['module_name'];
                        if($module_info[0]['is_workflow'] == 1){
                            $wildcards_replaces['contract_workflow_module_name']=$module_info[0]['module_name'];
                        }
                        else{
                            $wildcards_replaces['contract_review_module_name']=$module_info[0]['module_name'];
                        }
                        $wildcards_replaces['logo']=$customer_logo;
                        $wildcards_replaces['year'] = date("Y");
                        $wildcards_replaces['url']=WEB_BASE_URL.'html';
                        $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                        $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                        $from_name=$template_configurations['email_from_name'];
                        $from=$template_configurations['email_from'];
                        $to=$vd['email'];
                        $to_name=$vd['first_name'].' '.$vd['last_name'];
                        $mailer_data['mail_from_name']=$from_name;
                        $mailer_data['mail_to_name']=$to_name;
                        $mailer_data['mail_to_user_id']=$vd['id_user'];
                        $mailer_data['mail_from']=$from;
                        $mailer_data['mail_to']=$to;
                        $mailer_data['mail_subject']=$subject;
                        $mailer_data['mail_message']=$body;
                        $mailer_data['status']=0;
                        $mailer_data['send_date']=currentDate();
                        $mailer_data['is_cron']=0;
                        $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                        //print_r($mailer_data);
                        $mailer_id=$this->Customer_model->addMailer($mailer_data);
                        //sending mail to bu owner
                        if($mailer_data['is_cron']==0) {
                            //$mail_sent_status=sendmail($to, $subject, $body, $from);
                            $this->load->library('sendgridlibrary');
                            $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                            if($mail_sent_status==1)
                                $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                        }
                    }
                    //mail to bu owner
                    if(isset($bu_owner_info->first_name)){
                        $template_configurations=$template_configurations_parent['data'][0];
                        $wildcards=$template_configurations['wildcards'];
                        $wildcards_replaces=array();
                        $wildcards_replaces['first_name']=$bu_owner_info->first_name;
                        $wildcards_replaces['last_name']=$bu_owner_info->last_name;
                        $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
                        $wildcards_replaces['discussion_closed_user_name']=$discussion_initiated_user_info->first_name.' '.$discussion_initiated_user_info->last_name.' ('.$discussion_initiated_user_info->user_role_name.')';
                        $wildcards_replaces['discussion_closed_date']=dateFormat(currentDate());
                        // $wildcards_replaces['contract_review_module_name']=$module_info[0]['module_name'];
                        if($module_info[0]['is_workflow'] == 1){
                            $wildcards_replaces['contract_workflow_module_name']=$module_info[0]['module_name'];
                        }
                        else{
                            $wildcards_replaces['contract_review_module_name']=$module_info[0]['module_name'];
                        }
                        $wildcards_replaces['logo']=$customer_logo;
                        $wildcards_replaces['year'] = date("Y");
                        $wildcards_replaces['url']=WEB_BASE_URL.'html';
                        $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                        $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                        $from_name=$template_configurations['email_from_name'];
                        $from=$template_configurations['email_from'];
                        $to=$bu_owner_info->email;
                        $to_name=$bu_owner_info->first_name.' '.$bu_owner_info->last_name;
                        $mailer_data['mail_from_name']=$from_name;
                        $mailer_data['mail_to_name']=$to_name;
                        $mailer_data['mail_to_user_id']=$bu_owner_info->id_user;
                        $mailer_data['mail_from']=$from;
                        $mailer_data['mail_to']=$to;
                        $mailer_data['mail_subject']=$subject;
                        $mailer_data['mail_message']=$body;
                        $mailer_data['status']=0;
                        $mailer_data['send_date']=currentDate();
                        $mailer_data['is_cron']=0;
                        $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                        //print_r($mailer_data);
                        $mailer_id=$this->Customer_model->addMailer($mailer_data);
                        //sending mail to bu owner
                        if($mailer_data['is_cron']==0) {
                            //$mail_sent_status=sendmail($to, $subject, $body, $from);
                            $this->load->library('sendgridlibrary');
                            $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                            if($mail_sent_status==1)
                                $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                        }
                    }
                    //mail to delegate
                    if(isset($delegate_info) && isset($delegate_info->first_name)){
                        $template_configurations=$template_configurations_parent['data'][0];
                        $wildcards=$template_configurations['wildcards'];
                        $wildcards_replaces=array();
                        $wildcards_replaces['first_name']=$delegate_info->first_name;
                        $wildcards_replaces['last_name']=$delegate_info->last_name;
                        $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
                        $wildcards_replaces['discussion_closed_user_name']=$discussion_initiated_user_info->first_name.' '.$discussion_initiated_user_info->last_name.' ('.$discussion_initiated_user_info->user_role_name.')';
                        $wildcards_replaces['discussion_closed_date']=dateFormat(currentDate());
                        // $wildcards_replaces['contract_review_module_name']=$module_info[0]['module_name'];
                        if($module_info[0]['is_workflow'] == 1){
                            $wildcards_replaces['contract_workflow_module_name']=$module_info[0]['module_name'];
                        }
                        else{
                            $wildcards_replaces['contract_review_module_name']=$module_info[0]['module_name'];
                        }
                        $wildcards_replaces['logo']=$customer_logo;
                        $wildcards_replaces['year'] = date("Y");
                        $wildcards_replaces['url']=WEB_BASE_URL.'html';
                        $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                        $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                        /*$from_name=SEND_GRID_FROM_NAME;
                        $from=SEND_GRID_FROM_EMAIL;
                        $from_name=$cust_admin['name'];
                        $from=$cust_admin['email'];*/
                        $from_name=$template_configurations['email_from_name'];
                        $from=$template_configurations['email_from'];
                        $to=$delegate_info->email;
                        $to_name=$delegate_info->first_name.' '.$delegate_info->last_name;
                        $mailer_data['mail_from_name']=$from_name;
                        $mailer_data['mail_to_name']=$to_name;
                        $mailer_data['mail_to_user_id']=$delegate_info->id_user;
                        $mailer_data['mail_from']=$from;
                        $mailer_data['mail_to']=$to;
                        $mailer_data['mail_subject']=$subject;
                        $mailer_data['mail_message']=$body;
                        $mailer_data['status']=0;
                        $mailer_data['send_date']=currentDate();
                        $mailer_data['is_cron']=0;
                        $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                        //print_r($mailer_data);
                        $mailer_id=$this->Customer_model->addMailer($mailer_data);
                        //sending mail to bu owner
                        if($mailer_data['is_cron']==0) {
                            //$mail_sent_status=sendmail($to, $subject, $body, $from);
                            $this->load->library('sendgridlibrary');
                            $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                            if($mail_sent_status==1)
                                $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                        }
                    }
                }
            }
        }
        $result = array('status'=>TRUE, 'message' => $this->lang->line('review_discussion_close_success'), 'data'=>array('recent_module_id'=>pk_encrypt($data['module_id'])));
        $this->response($result, REST_Controller::HTTP_OK);
    }
    protected function closereviewdiscussion($data){
        if($data['id_contract_review_discussion']!=''){
            $this->Contract_model->updateContractReviewDiscussion(array('id_contract_review_discussion'=>$data['id_contract_review_discussion'],'updated_by'=>$data['created_by'],'updated_on'=>currentDate(),'discussion_status'=>2,'is_auto_close'=>1));
            $discussion_initiated_user_info = $this->User_model->getUserInfo(array('user_id' => $data['created_by']));
            $module_info = $this->Module_model->getModuleName(array('language_id'=>1,'module_id'=>$data['module_id']));
            if($module_info[0]['is_workflow'] == 1){
                $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $discussion_initiated_user_info->customer_id,'module_key'=>'CONTRACT_WORKFLOW_DISCUSSION_CLOSE'));
            }else{
                $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $discussion_initiated_user_info->customer_id,'module_key'=>'CONTRACT_REVIEW_DISCUSSION_CLOSE'));
            }
            if($template_configurations_parent['total_records']>0){
                $contract_info = $this->Contract_model->getContractDetails(array('id_contract' => $data['contract_id']));
                $bu_owner_info = $this->User_model->getUserInfo(array('user_id' => $contract_info[0]['contract_owner_id'],'user_status'=>1));
                $customer_details = $this->Customer_model->getCustomer(array('id_customer' => $discussion_initiated_user_info->customer_id));
                if(isset($contract_info[0]['delegate_id']) && $contract_info[0]['delegate_id']!=NULL && $contract_info[0]['delegate_id']>0){
                    $delegate_info = $this->User_model->getUserInfo(array('user_id' => $contract_info[0]['delegate_id'],'user_status'=>1));
                }
                /*$cust_admin = $this->Customer_model->getCustomerAdminList(array('customer_id' => $customer_details[0]['id_customer']));
                $cust_admin = $cust_admin['data'][0];*/
                $customer_admin_list=$this->Customer_model->getCustomerAdminList(array('customer_id'=>$discussion_initiated_user_info->customer_id,'user_status'=>1));
                if($customer_details[0]['company_logo']=='') {
                    $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'company');
                }
                else{
                    $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'profile', SMALL_IMAGE);

                }
                if(!empty($customer_details)){ $customer_name = $customer_details[0]['company_name']; }

                //mail to customer admins
                foreach($customer_admin_list['data'] as $kd=>$vd){
                    $template_configurations=$template_configurations_parent['data'][0];
                    $wildcards=$template_configurations['wildcards'];
                    $wildcards_replaces=array();
                    $wildcards_replaces['first_name']=$vd['first_name'];
                    $wildcards_replaces['last_name']=$vd['last_name'];
                    $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
                    $wildcards_replaces['discussion_closed_user_name']=$discussion_initiated_user_info->first_name.' '.$discussion_initiated_user_info->last_name.' ('.$discussion_initiated_user_info->user_role_name.')';
                    $wildcards_replaces['discussion_closed_date']=dateFormat(currentDate());
                    $wildcards_replaces['contract_review_module_name']=$module_info[0]['module_name'];
                    $wildcards_replaces['logo']=$customer_logo;
                    $wildcards_replaces['year'] = date("Y");
                    $wildcards_replaces['url']=WEB_BASE_URL.'html';
                    $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                    $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                    /*$from_name=SEND_GRID_FROM_NAME;
                    $from=SEND_GRID_FROM_EMAIL;
                    $from_name=$cust_admin['name'];
                    $from=$cust_admin['email'];*/
                    $from_name=$template_configurations['email_from_name'];
                    $from=$template_configurations['email_from'];
                    $to=$vd['email'];
                    $to_name=$vd['first_name'].' '.$vd['last_name'];
                    $mailer_data['mail_from_name']=$from_name;
                    $mailer_data['mail_to_name']=$to_name;
                    $mailer_data['mail_to_user_id']=$vd['id_user'];
                    $mailer_data['mail_from']=$from;
                    $mailer_data['mail_to']=$to;
                    $mailer_data['mail_subject']=$subject;
                    $mailer_data['mail_message']=$body;
                    $mailer_data['status']=0;
                    $mailer_data['send_date']=currentDate();
                    $mailer_data['is_cron']=0;
                    $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                    //print_r($mailer_data);
                    $mailer_id=$this->Customer_model->addMailer($mailer_data);
                    //sending mail to bu owner
                    if($mailer_data['is_cron']==0) {
                        //$mail_sent_status=sendmail($to, $subject, $body, $from);
                        $this->load->library('sendgridlibrary');
                        $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                        if($mail_sent_status==1)
                            $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                    }
                }
                //mail to bu owner
                if(isset($bu_owner_info->first_name)){
                    $template_configurations=$template_configurations_parent['data'][0];
                    $wildcards=$template_configurations['wildcards'];
                    $wildcards_replaces=array();
                    $wildcards_replaces['first_name']=$bu_owner_info->first_name;
                    $wildcards_replaces['last_name']=$bu_owner_info->last_name;
                    $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
                    $wildcards_replaces['discussion_closed_user_name']=$discussion_initiated_user_info->first_name.' '.$discussion_initiated_user_info->last_name.' ('.$discussion_initiated_user_info->user_role_name.')';
                    $wildcards_replaces['discussion_closed_date']=dateFormat(currentDate());
                    $wildcards_replaces['contract_review_module_name']=$module_info[0]['module_name'];
                    $wildcards_replaces['logo']=$customer_logo;
                    $wildcards_replaces['year'] = date("Y");
                    $wildcards_replaces['url']=WEB_BASE_URL.'html';
                    $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                    $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                    /*$from_name=SEND_GRID_FROM_NAME;
                    $from=SEND_GRID_FROM_EMAIL;
                    $from_name=$cust_admin['name'];
                    $from=$cust_admin['email'];*/
                    $from_name=$template_configurations['email_from_name'];
                    $from=$template_configurations['email_from'];
                    $to=$bu_owner_info->email;
                    $to_name=$bu_owner_info->first_name.' '.$bu_owner_info->last_name;
                    $mailer_data['mail_from_name']=$from_name;
                    $mailer_data['mail_to_name']=$to_name;
                    $mailer_data['mail_to_user_id']=$bu_owner_info->id_user;
                    $mailer_data['mail_from']=$from;
                    $mailer_data['mail_to']=$to;
                    $mailer_data['mail_subject']=$subject;
                    $mailer_data['mail_message']=$body;
                    $mailer_data['status']=0;
                    $mailer_data['send_date']=currentDate();
                    $mailer_data['is_cron']=0;
                    $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                    //print_r($mailer_data);
                    $mailer_id=$this->Customer_model->addMailer($mailer_data);
                    //sending mail to bu owner
                    if($mailer_data['is_cron']==0) {
                        //$mail_sent_status=sendmail($to, $subject, $body, $from);
                        $this->load->library('sendgridlibrary');
                        $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                        if($mail_sent_status==1)
                            $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                    }
                }
                //mail to delegate
                if(isset($delegate_info) && isset($delegate_info->first_name)){
                    $template_configurations=$template_configurations_parent['data'][0];
                    $wildcards=$template_configurations['wildcards'];
                    $wildcards_replaces=array();
                    $wildcards_replaces['first_name']=$delegate_info->first_name;
                    $wildcards_replaces['last_name']=$delegate_info->last_name;
                    $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
                    $wildcards_replaces['discussion_closed_user_name']=$discussion_initiated_user_info->first_name.' '.$discussion_initiated_user_info->last_name.' ('.$discussion_initiated_user_info->user_role_name.')';
                    $wildcards_replaces['discussion_closed_date']=dateFormat(currentDate());
                    $wildcards_replaces['contract_review_module_name']=$module_info[0]['module_name'];
                    $wildcards_replaces['logo']=$customer_logo;
                    $wildcards_replaces['year'] = date("Y");
                    $wildcards_replaces['url']=WEB_BASE_URL.'html';
                    $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                    $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                    /*$from_name=SEND_GRID_FROM_NAME;
                    $from=SEND_GRID_FROM_EMAIL;
                    $from_name=$cust_admin['name'];
                    $from=$cust_admin['email'];*/
                    $from_name=$template_configurations['email_from_name'];
                    $from=$template_configurations['email_from'];
                    $to=$delegate_info->email;
                    $to_name=$delegate_info->first_name.' '.$delegate_info->last_name;
                    $mailer_data['mail_from_name']=$from_name;
                    $mailer_data['mail_to_name']=$to_name;
                    $mailer_data['mail_to_user_id']=$delegate_info->id_user;
                    $mailer_data['mail_from']=$from;
                    $mailer_data['mail_to']=$to;
                    $mailer_data['mail_subject']=$subject;
                    $mailer_data['mail_message']=$body;
                    $mailer_data['status']=0;
                    $mailer_data['send_date']=currentDate();
                    $mailer_data['is_cron']=0;
                    $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                    //print_r($mailer_data);
                    $mailer_id=$this->Customer_model->addMailer($mailer_data);
                    //sending mail to bu owner
                    if($mailer_data['is_cron']==0) {
                        //$mail_sent_status=sendmail($to, $subject, $body, $from);
                        $this->load->library('sendgridlibrary');
                        $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                        if($mail_sent_status==1)
                            $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                    }
                }
            }
        }
    }
    public function actionitemresponsibleusers_get(){
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        // print_r(pk_decrypt($data['provider_id']));exit;
        if(isset($data['provider_id'])){
            $data['id_provider']= pk_decrypt($data['provider_id']);
            // print_r($data);exit;
        }
        if(isset($data['id_provider']) && empty($data['provider_id'])) {
            $data['id_provider'] = pk_decrypt($data['id_provider']);
        }
        if(!isset($data['id_provider']))
        $this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));
        if(empty($data['contract_id']))
        $this->form_validator->add_rules('id_provider', array('required'=>$this->lang->line('provider_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            // if(!in_array($data['contract_id'],$this->session_user_contracts)){
            //     $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
            //     $this->response($result, REST_Controller::HTTP_OK);
            // }
        }
        if(isset($data['contract_review_id'])) {
            $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
        }
        if(isset($data['id_contract_review'])) {
            $data['contract_review_id'] = pk_decrypt($data['id_contract_review']);
        }
        $data['customer_id'] = $this->session_user_info->customer_id;
        if(isset($data['provider_id'])){
            // $data['id_provider']=pk_decrypt($data['provider_id']);
        }
        if(isset($data['id_provider'])) {
            // $data['id_provider'] = pk_decrypt($data['id_provider']);
            $get_provider_contract_ids=$this->User_model->check_record_selected('id_contract','contract',array('provider_name'=>$data['id_provider'],'is_deleted'=>0));
            $contract_ids=array_column($get_provider_contract_ids, 'id_contract');
            $data['contract_id']=!empty($contract_ids)?$contract_ids:'';
            $data['contract_review_id']='';
        }

        $result = $this->Contract_model->getActionItemResponsibleUsers($data);//echo $this->db->last_query();exit;
        // $result1=$result;
        // $result2=$result;
        // unset($result1[8]);
        // unset($result1[9]);
        // unset($result1[10]);
        // unset($result1[11]);
        // unset($result1[12]);
        // unset($result2[11]);
        // unset($result2[12]);
        // // $userids = array_column($result, 'id_user');
        // // $userids1 = array_column($result1, 'id_user');
        // // $userids2 = array_column($result2, 'id_user');
        // // print_r(implode(',',$userids));
        // // echo '<br>';
        // // print_r(implode(',',$userids1));
        // // echo '<br>';
        // // print_r(implode(',',$userids));exit;

        // // $result_in = array_intersect_assoc($result,$result,$result1);
        // // // $res_in=call_user_func_array('array_intersect', array($result,$result2,$result1));

        // // // print_r($result1);
        // print_r($result_in);exit;
        // print_r($this->session_user_info->customer_id);exit;
        if(!empty($data['project_id'])){
            $data['project_id']=pk_decrypt($data['project_id']);
            $get_project_providers=$this->Project_model->getactiveprojectProvider(array('project_id'=>$data['project_id']));
            $data['id_provider']=array_column($get_project_providers,'provider_id');
            if(!empty($data['id_provider'])){
                $result1 = $this->Customer_model->getCustomerUserList(array('customer_id'=>$this->session_user_info->customer_id,'id_provider'=>$data['id_provider'],'user_role_not'=>array(1,2),'user_type'=>'external','Is_external_provider'=>1,'type'=>'project'));
                //echo $this->db->last_query();exit;
                unset($data['id_provider']);
            }
            else{
                $result1['data']=array();
            }
        }
        if(!empty($data['id_provider'])){
            // print_r($data);exit;
            $result1 = $this->Customer_model->getCustomerUserList(array('customer_id'=>$this->session_user_info->customer_id,'id_provider'=>$data['id_provider'],'user_role_not'=>array(1,2),'user_type'=>'external','Is_external_provider'=>1));
            // echo $this->db->last_query();exit;
            $final_result=array_merge($result,$result1['data']);
        }
        else if(!empty($data['project_id'])){
            $final_result=array_merge($result,$result1['data']);
        }
        else{
            $final_result=$result;
        }
        foreach($final_result as $k=>$v){
            
            // $result[$k]->id_user=pk_encrypt($result[$k]->id_user);
            // $result[$k]->user_role_id=pk_encrypt($result[$k]->user_role_id);
            $final_result[$k]['id_user']=pk_encrypt($v['id_user']);
            $final_result[$k]['user_role_id']=isset($v['user_role_id'])?pk_encrypt($v['user_role_id']):pk_encrypt($v['id_user_role']);
        }
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$final_result);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function emailTemplateList_get(){
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $data = tableOptions($data);
        $this->form_validator->add_rules('user_role_id', array('required'=>$this->lang->line('user_role_id_req')));
        $this->form_validator->add_rules('user_id', array('required'=>$this->lang->line('user_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(!in_array($this->session_user_info->user_role_id,array(1,2))){
            $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_id'])) {
            $data['user_id'] = pk_decrypt($data['user_id']);
            if($this->session_user_info->user_role_id!=1 && !in_array($data['user_id'],$this->session_user_customer_all_users)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($this->session_user_info->user_role_id!=1 && $this->session_user_info->customer_id!=$data['customer_id']){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_email_template'])) {
            $data['id_email_template'] = pk_decrypt($data['id_email_template']);
            if($this->session_user_info->user_role_id!=1 && !in_array($data['id_email_template'],$this->session_user_customer_email_templates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
            if($this->session_user_info->user_role_id==1 && !in_array($data['id_email_template'],$this->session_user_wadmin_email_templates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
         if($data['user_role_id']==1) {
            $data['customer_id'] = 0;
            $customer_logo = getImageUrlSendEmail('', 'company');
            //$data['language_id'] = 1;
        }
        else {
            $customer_info = $this->User_model->getUserInfo(array('user_id'=>$data['user_id']));
            $data['customer_id'] = $customer_info->customer_id;
            $customer_details = $this->Customer_model->getCustomer(array('id_customer' => $customer_info->customer_id));
            //getting customer primary language
            $customerPrimaryLanguage = $this->User_model->getCustomerLanguage(array('customer_id' => $data['customer_id'],'is_primary' => 1,'status' =>1));
            if(!empty($customerPrimaryLanguage))
            {
                $data['language_id'] = $customerPrimaryLanguage[0]['id_language'];
            }
            else
            {
                $data['language_id'] = 1;
            }
            if($customer_details[0]['company_logo']=='') {
                $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'company');
            }
            else{
                $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'company', SMALL_IMAGE);
            }

        }
        //print_r($data);
        $result = $this->Contract_model->getEmailTemplate($data);
        //echo $this->db->last_query();exit;
        foreach($result['data'] as $k=>$v){
            if(strtolower($result['data'][$k]['module_name'])=='workflow')
                $result['data'][$k]['module_name'] = 'Task';
            $result['data'][$k]['created_by']=pk_encrypt($result['data'][$k]['created_by']);
            $result['data'][$k]['customer_id']=pk_encrypt($result['data'][$k]['customer_id']);
            $result['data'][$k]['email_template_id']=pk_encrypt($result['data'][$k]['email_template_id']);
            $result['data'][$k]['id_email_template']=pk_encrypt($result['data'][$k]['id_email_template']);
            $result['data'][$k]['id_email_template_language']=pk_encrypt($result['data'][$k]['id_email_template_language']);
            $result['data'][$k]['language_id']=pk_encrypt($result['data'][$k]['language_id']);
            $result['data'][$k]['parent_email_template_id']=pk_encrypt($result['data'][$k]['parent_email_template_id']);
            $result['data'][$k]['updated_by']=pk_encrypt($result['data'][$k]['updated_by']);
        }
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result,'customer_logo'=>$customer_logo);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function emailTemplateUpdate_post(){
        $data = $this->input->post();

        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('user_id', array('required'=>$this->lang->line('user_id_req')));
        $this->form_validator->add_rules('id_email_template', array('required'=>$this->lang->line('id_email_template_req')));
        $this->form_validator->add_rules('status', array('required'=>$this->lang->line('email_status_req')));
        $this->form_validator->add_rules('id_email_template_language', array('required'=>$this->lang->line('id_email_template_language_req')));
        $this->form_validator->add_rules('template_name', array('required'=>$this->lang->line('email_template_name_req')));
        $this->form_validator->add_rules('template_subject', array('required'=>$this->lang->line('email_template_subject_req')));
        $this->form_validator->add_rules('template_content', array('required'=>$this->lang->line('email_template_content_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(!in_array($this->session_user_info->user_role_id,array(1,2))){
            $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['user_id'])) {
            $data['user_id'] = pk_decrypt($data['user_id']);
            if($this->session_user_info->user_role_id!=1 && !in_array($data['user_id'],$this->session_user_customer_all_users)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_email_template'])) {
            $data['id_email_template'] = pk_decrypt($data['id_email_template']);
            if($this->session_user_info->user_role_id!=1 && !in_array($data['id_email_template'],$this->session_user_customer_email_templates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
            if($this->session_user_info->user_role_id==1 && !in_array($data['id_email_template'],$this->session_user_wadmin_email_templates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_email_template_language'])) $data['id_email_template_language']=pk_decrypt($data['id_email_template_language']);
        $email_template = array();
        $email_template_lang = array();
        $email_template['id_email_template']=$data['id_email_template'];
        $email_template['status']=$data['status'];
        $email_template['updated_by']=$data['user_id'];
        $email_template['updated_on']=currentDate();
        $email_template_lang['id_email_template_language']=$data['id_email_template_language'];
        $email_template_lang['template_name']=$data['template_name'];
        $email_template_lang['template_subject']=$data['template_subject'];
        $email_template_lang['template_content']=$data['template_content'];

        $this->Contract_model->updateEmailTemplate($email_template);
        $this->Contract_model->updateEmailTemplate($email_template_lang);
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>'');
        $this->response($result, REST_Controller::HTTP_OK);

    }
    public function emailTemplateUpdateStatus_post(){
        $data = $this->input->post();

        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('user_id', array('required'=>$this->lang->line('user_id_req')));
        $this->form_validator->add_rules('id_email_template', array('required'=>$this->lang->line('id_email_template_req')));
        $this->form_validator->add_rules('status', array('required'=>$this->lang->line('email_status_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(!in_array($this->session_user_info->user_role_id,array(1,2))){
            $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['user_id'])) {
            $data['user_id'] = pk_decrypt($data['user_id']);
            if($this->session_user_info->user_role_id!=1 && !in_array($data['user_id'],$this->session_user_customer_all_users)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_email_template'])) {
            $data['id_email_template'] = pk_decrypt($data['id_email_template']);
            if($this->session_user_info->user_role_id!=1 && !in_array($data['id_email_template'],$this->session_user_customer_email_templates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
            if($this->session_user_info->user_role_id==1 && !in_array($data['id_email_template'],$this->session_user_wadmin_email_templates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        $email_template = array();
        $email_template['id_email_template']=$data['id_email_template'];
        $email_template['status']=$data['status'];
        $email_template['updated_by']=$data['user_id'];
        $email_template['updated_on']=currentDate();


        $this->Contract_model->updateEmailTemplate($email_template);
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>'');
        $this->response($result, REST_Controller::HTTP_OK);

    }

    public function insertEmailTemplate_post(){
        $data = $this->input->post();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('id_email_template', array('required'=>$this->lang->line('user_role_id_req')));
        $this->form_validator->add_rules('user_id', array('required'=>$this->lang->line('user_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(!in_array($this->session_user_info->user_role_id,array(1,2))){
            $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['user_id'])) {
            $data['user_id'] = pk_decrypt($data['user_id']);
            if($this->session_user_info->user_role_id!=1 && !in_array($data['user_id'],$this->session_user_customer_all_users)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_email_template'])) {
            $data['id_email_template'] = pk_decrypt($data['id_email_template']);
            if($this->session_user_info->user_role_id!=1 && !in_array($data['id_email_template'],$this->session_user_customer_email_templates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
            if($this->session_user_info->user_role_id==1 && !in_array($data['id_email_template'],$this->session_user_wadmin_email_templates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($this->session_user_info->user_role_id!=1 && $this->session_user_info->customer_id!=$data['customer_id']){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        $email_template_data = $this->Contract_model->getEmailTemplate(array('id_email_template'=>$data['id_email_template']));
        if(empty($email_template_data))
        {
            $result = array('status'=>TRUE, 'message' => $this->lang->line('invalid_id_email_template'), 'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $email_template_data = $email_template_data[0];

        $email_template['module_name'] = $email_template_data['module_name'];
        $email_template['module_key'] = $email_template_data['module_key'];
        $email_template['wildcards'] = $email_template_data['wildcards'];
        $email_template['created_by'] = $data['user_id'];
        $email_template['created_on'] = currentDate();
        $email_template['status'] = $email_template_data['status'];
        $email_template['parent_email_template_id'] = $email_template_data['id_email_template'];

        $email_template_language['template_name']=$email_template_data['template_name'];
        $email_template_language['template_subject']=$email_template_data['template_subject'];
        $email_template_language['template_content']=$email_template_data['template_content'];
        $email_template_language['language_id']=$email_template_data['language_id'];

        if(isset($data['customer_id']))
            $this->Contract_model->insertEmailTemplate(array('email_template'=>$email_template,'email_template_language'=>$email_template_language,'customer_id'=>$data['customer_id']));
        else
            $this->Contract_model->insertEmailTemplate(array('email_template'=>$email_template,'email_template_language'=>$email_template_language));

        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>'');
        $this->response($result, REST_Controller::HTTP_OK);

    }

    public function delecteContract_post(){
        $data = $this->input->post();
        // echo pk_decrypt($data["contract_id"]);
        // // echo pk_decrypt("U2FsdGVkX19UaGVAMTIzNE/ILU/urel1dwVYOAFUBSo=");
        // echo pk_decrypt("U2FsdGVkX19UaGVAMTIzNE/ILU/urel1dwVYOAFUBSo=");
        // exit;
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));
        $this->form_validator->add_rules('id_user', array('required'=>$this->lang->line('user_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            if(!in_array($data['contract_id'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        $get_contract=$this->User_model->check_record('contract',array('id_contract'=>$data['contract_id']));
        if($get_contract[0]['type']=='project'){
            $message=$this->lang->line('project_deleted_successfully');
        }
        else{
            $message=$this->lang->line('contract_deleted_successfully');
        }
        if($get_contract[0]['type']=='project'){
            if($this->session_user_info->user_role_id!=2 && $this->session_user_info->user_role_id!=3 && $this->session_user_info->user_role_id!=4){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        else{
            if($this->session_user_info->user_role_id!=2 && $this->session_user_info->user_role_id!=3){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }

        if(isset($data['id_contract_workflow'])) {
            $data['id_contract_workflow'] = pk_decrypt($data['id_contract_workflow']);
        }

        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }

        if(isset($data["is_workflow"]) && $data["is_workflow"]==1){
            $delete_return = $this->Calender_model->delete_workflow($data);
            if(!$delete_return){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('invalid_data')), 'data'=>'Data Not deleted');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        } else {

            $this->User_model->update_data('contract',array('is_deleted'=>1,'updated_by'=>$data['id_user'],'updated_on'=>currentDate()),array('id_contract'=>$data['contract_id']));
            $this->User_model->update_data('contract',array('is_deleted'=>1,'updated_by'=>$data['id_user'],'updated_on'=>currentDate()),array('parent_contract_id'=>$data['contract_id']));
        }
        // $get_contract=$this->User_model->check_record('contract',array('id_contract'=>$data['contract_id']));
        if($get_contract[0]['type']=='project'){
            $message=$this->lang->line('project_deleted_successfully');
            $this->User_model->update_data('contract_projects',array('is_linked'=>0),array('project_id'=>$data['contract_id']));
        }
        else{
            $message=$this->lang->line('contract_deleted_successfully');
            $this->User_model->update_data('contract_projects',array('is_linked'=>0),array('contract_id'=>$data['contract_id']));
        }
        
        $result = array('status'=>TRUE, 'message' =>$message, 'data'=>'');
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function undoDelContract_post(){
        $data = $this->input->post();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));
        $this->form_validator->add_rules('id_user', array('required'=>$this->lang->line('user_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if($this->session_user_info->user_role_id!=2){
            $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        $this->User_model->update_data('contract',array('is_deleted'=>0,'updated_by'=>$data['id_user']),array('id_contract'=>$data['contract_id']));
        $this->User_model->update_data('contract',array('is_deleted'=>0,'updated_by'=>$data['id_user']),array('parent_contract_id'=>$data['contract_id']));

        $result = array('status'=>TRUE, 'message' => $this->lang->line('contract_undo'), 'data'=>'');
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function addSecondOpinion_post(){
        $data = $this->input->post();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('module_id', array('required'=>$this->lang->line('module_id_req')));
        $this->form_validator->add_rules('contract_review_id', array('required'=>$this->lang->line('contract_review_id_req')));
        $this->form_validator->add_rules('question_id', array('required'=>$this->lang->line('question_id_req')));
        $this->form_validator->add_rules('remarks', array('required'=>$this->lang->line('comments_required')));
        $this->form_validator->add_rules('created_by', array('required'=>$this->lang->line('created_by_req')));
        $this->form_validator->add_rules('second_opinion', array('required'=>$this->lang->line('second_opinion_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_review_id'])) {
            $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
        }
        if(isset($data['created_by'])) {
            $data['created_by'] = pk_decrypt($data['created_by']);
        }
        if(isset($data['module_id'])) {
            $data['module_id'] = pk_decrypt($data['module_id']);
        }
        if(isset($data['question_id'])) {
            $data['question_id'] = pk_decrypt($data['question_id']);
        }

        $contract_question_review = $this->User_model->check_record('contract_question_review',array('question_id'=>$data['question_id'],'contract_review_id'=>$data['contract_review_id']));
        if(count($contract_question_review)==0){
            $result = array('status'=>FALSE,'error'=>array('message'=>$this->lang->line('save_question_answere')), 'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $contract_review_discussion = $this->User_model->check_record('contract_review_discussion',array('module_id'=>$data['module_id'],'contract_review_id'=>$data['contract_review_id']));
        
        if(count($contract_review_discussion)>0){
            
        }else{
            $discussion_data = array(
                "contract_review_id" => $data['contract_review_id'],
                "module_id" => $data['module_id'],
                "created_on" => Currentdate(),
                "created_by" => $data['created_by']
            );
            $contract_review_discussion_id = $this->User_model->insert_data('contract_review_discussion',$discussion_data);
        }
        $contract_review_discussion = $this->User_model->check_record('contract_review_discussion',array('module_id'=>$data['module_id'],'contract_review_id'=>$data['contract_review_id']));

        $contract_review_discussion_question = $this->User_model->check_record('contract_review_discussion_question',array('question_id'=>$data['question_id'],'contract_review_discussion_id'=>$contract_review_discussion[0]['id_contract_review_discussion']));
        
        if(count($contract_review_discussion_question)>0){
            //if contract review discussion question exists
            $insert_comments_log_data = array(
                'contract_review_discussion_question_id'=>$contract_review_discussion_question[0]['id_contract_review_discussion_question'],
                "status" => 1,
                "remarks" => $data['remarks'],
                "created_on" => Currentdate(),
                "created_by" => $data['created_by']
            );
            $this->User_model->insert_data('contract_review_discussion_question_log',$insert_comments_log_data);

        }else{
            $discussion_question_data = array(
                "contract_review_discussion_id" => $contract_review_discussion[0]['id_contract_review_discussion'],
                "question_id" => $data['question_id'],
                "remarks" => $data['remarks'],
                "created_on" => Currentdate(),
                "created_by" => $data['created_by']
            );
            $contract_review_discussion_question_id = $this->User_model->insert_data('contract_review_discussion_question',$discussion_question_data);
        }

        //updating contract question reveiw to add second openion from this service
        $update_contract_question_review = $this->User_model->update_data('contract_question_review',array('second_opinion'=>isset($data['second_opinion'])?$data['second_opinion']:'','updated_by'=>$data['created_by'],"updated_on" => Currentdate()),array('question_id'=>$data['question_id']));
        ////////start send mails////
        $module_info = $this->Module_model->getModuleName(array('language_id'=>1,'module_id'=>$data['module_id']));
        $contract_query='SELECT c.*,bu.*,cr.id_contract_review,cr.contract_id,cr.contract_workflow_id,cr.is_workflow,cr.calender_id,cr.contract_review_status,cr.contract_review_due_date,cr.created_by,cr.updated_by,cr.created_on,cr.updated_on,cr.contract_review_type,cr.finalize_comments,cr.finalize_without_discussion,cr.relationship_category_id,cr.review_score,cr.validation_status,cr.contract_owner_id as contract_review_id,cr.contract_delegate_id FROM   contract c 
        LEFT JOIN contract_review cr ON c.id_contract=cr.contract_id
        LEFT JOIN business_unit bu ON c.business_unit_id=bu.id_business_unit
        WHERE cr.id_contract_review='.$data['contract_review_id'].'';
        $contract_info = $this->User_model->custom_query($contract_query);
       if($data['type']=='contract'){
            if($module_info[0]['is_workflow'] == 1){
            $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $contract_info[0]['customer_id'],'module_key'=>'CONTRACT_WORKFLOW_DISCUSSION_INITIATE'));
           }
           else{
            $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $contract_info[0]['customer_id'],'module_key'=>'CONTRACT_REVIEW_DISCUSSION_INITIATE'));
         }
         if($template_configurations_parent['total_records']>0){
            $bu_owner_info = $this->User_model->getUserInfo(array('user_id' => $contract_info[0]['contract_owner_id'],'user_status'=>1));
            $customer_details = $this->Customer_model->getCustomer(array('id_customer' => $contract_info[0]['customer_id']));
            if(isset($contract_info[0]['delegate_id']) && $contract_info[0]['delegate_id']!=NULL && $contract_info[0]['delegate_id']>0){
                $delegate_info = $this->User_model->getUserInfo(array('user_id' => $contract_info[0]['delegate_id'],'user_status'=>1));
            }
            $customer_admin_list=$this->Customer_model->getCustomerAdminList(array('customer_id'=>$contract_info[0]['customer_id'],'user_status'=>1));
            if($customer_details[0]['company_logo']=='') {
                $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'company');
            }
            else{
                $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'profile', SMALL_IMAGE);

            }
            if(!empty($customer_details)){ $customer_name = $customer_details[0]['company_name']; }

            $discussion_initiated_user_info = $this->User_model->getUserInfo(array('user_id' => $data['created_by'])); 
            //mail to customer admins
            foreach($customer_admin_list['data'] as $kd=>$vd){
                $template_configurations=$template_configurations_parent['data'][0];
                $wildcards=$template_configurations['wildcards'];
                $wildcards_replaces=array();
                $wildcards_replaces['first_name']=$vd['first_name'];
                $wildcards_replaces['last_name']=$vd['last_name'];
                $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
                if($module_info[0]['is_workflow'] == 1){
                        $wildcards_replaces['discussion_executed_user_name'] = $discussion_initiated_user_info->first_name . ' ' . $discussion_initiated_user_info->last_name . ' (' . $discussion_initiated_user_info->user_role_name . ')';
                        $wildcards_replaces['discussion_executed_date'] = dateFormat(currentDate());
                        $wildcards_replaces['contract_workflow_module_name']=$module_info[0]['module_name'];
                }
                else{
                        $wildcards_replaces['discussion_initiated_user_name'] = $discussion_initiated_user_info->first_name . ' ' . $discussion_initiated_user_info->last_name . ' (' . $discussion_initiated_user_info->user_role_name . ')';
                        $wildcards_replaces['discussion_initiated_date'] = dateFormat(currentDate());
                        $wildcards_replaces['contract_review_module_name']=$module_info[0]['module_name'];
                }
                $wildcards_replaces['logo']=$customer_logo;
                $wildcards_replaces['year'] = date("Y");
                $wildcards_replaces['url']=WEB_BASE_URL.'html';
                $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                $from_name=$template_configurations['email_from_name'];
                $from=$template_configurations['email_from'];
                $to=$vd['email'];
                $to_name=$vd['first_name'].' '.$vd['last_name'];
                $mailer_data['mail_from_name']=$from_name;
                $mailer_data['mail_to_name']=$to_name;
                $mailer_data['mail_from']=$from;
                $mailer_data['mail_to']=$to;
                $mailer_data['mail_to_user_id']=$vd['id_user'];
                $mailer_data['mail_subject']=$subject;
                $mailer_data['mail_message']=$body;
                $mailer_data['status']=0;
                $mailer_data['send_date']=currentDate();
                $mailer_data['is_cron']=0;
                $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                //print_r($mailer_data);
                $mailer_id=$this->Customer_model->addMailer($mailer_data);
                //sending mail to bu owner
                if($mailer_data['is_cron']==0) {
                    //$mail_sent_status=sendmail($to, $subject, $body, $from);
                    $this->load->library('sendgridlibrary');
                    $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                    if($mail_sent_status==1)
                        $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                }
            }
            //mail to bu owner
            if(isset($bu_owner_info->first_name)){
                $template_configurations=$template_configurations_parent['data'][0];
                $wildcards=$template_configurations['wildcards'];
                $wildcards_replaces=array();
                $wildcards_replaces['first_name']=$bu_owner_info->first_name;
                $wildcards_replaces['last_name']=$bu_owner_info->last_name;
                $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
                if($module_info[0]['is_workflow'] == 1){
                    $wildcards_replaces['discussion_executed_user_name'] = $discussion_initiated_user_info->first_name . ' ' . $discussion_initiated_user_info->last_name . ' (' . $discussion_initiated_user_info->user_role_name . ')';
                    $wildcards_replaces['discussion_executed_date'] = dateFormat(currentDate());
                    $wildcards_replaces['contract_workflow_module_name']=$module_info[0]['module_name'];
                }
                else{
                    $wildcards_replaces['discussion_initiated_user_name'] = $discussion_initiated_user_info->first_name . ' ' . $discussion_initiated_user_info->last_name . ' (' . $discussion_initiated_user_info->user_role_name . ')';
                    $wildcards_replaces['discussion_initiated_date'] = dateFormat(currentDate());
                    $wildcards_replaces['contract_review_module_name']=$module_info[0]['module_name'];
                }
                $wildcards_replaces['contract_review_module_name']=$module_info[0]['module_name'];
                $wildcards_replaces['logo']=$customer_logo;
                $wildcards_replaces['year'] = date("Y");
                $wildcards_replaces['url']=WEB_BASE_URL.'html';
                $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                $from_name=$template_configurations['email_from_name'];
                $from=$template_configurations['email_from'];
                $to=$bu_owner_info->email;
                $to_name=$bu_owner_info->first_name.' '.$bu_owner_info->last_name;
                $mailer_data['mail_from_name']=$from_name;
                $mailer_data['mail_to_name']=$to_name;
                $mailer_data['mail_from']=$from;
                $mailer_data['mail_to']=$to;
                $mailer_data['mail_to_user_id']=$bu_owner_info->id_user;
                $mailer_data['mail_subject']=$subject;
                $mailer_data['mail_message']=$body;
                $mailer_data['status']=0;
                $mailer_data['send_date']=currentDate();
                $mailer_data['is_cron']=0;
                $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                //print_r($mailer_data);
                $mailer_id=$this->Customer_model->addMailer($mailer_data);
                //sending mail to bu owner
                if($mailer_data['is_cron']==0) {
                    //$mail_sent_status=sendmail($to, $subject, $body, $from);
                    $this->load->library('sendgridlibrary');
                    $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                    if($mail_sent_status==1)
                        $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                }
            }
            //mail to delegate
            if(isset($delegate_info) && isset($delegate_info->first_name)){
                $template_configurations=$template_configurations_parent['data'][0];
                $wildcards=$template_configurations['wildcards'];
                $wildcards_replaces=array();
                $wildcards_replaces['first_name']=$delegate_info->first_name;
                $wildcards_replaces['last_name']=$delegate_info->last_name;
                $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
                if($module_info[0]['is_workflow'] == 1){
                    $wildcards_replaces['discussion_executed_user_name'] = $discussion_initiated_user_info->first_name . ' ' . $discussion_initiated_user_info->last_name . ' (' . $discussion_initiated_user_info->user_role_name . ')';
                    $wildcards_replaces['discussion_executed_date'] = dateFormat(currentDate());
                    $wildcards_replaces['contract_workflow_module_name']=$module_info[0]['module_name'];
                }
                else{
                    $wildcards_replaces['discussion_initiated_user_name'] = $discussion_initiated_user_info->first_name . ' ' . $discussion_initiated_user_info->last_name . ' (' . $discussion_initiated_user_info->user_role_name . ')';
                    $wildcards_replaces['discussion_initiated_date'] = dateFormat(currentDate());
                    $wildcards_replaces['contract_review_module_name']=$module_info[0]['module_name'];
                }
                $wildcards_replaces['contract_review_module_name']=$module_info[0]['module_name'];
                $wildcards_replaces['logo']=$customer_logo;
                $wildcards_replaces['year'] = date("Y");
                $wildcards_replaces['url']=WEB_BASE_URL.'html';
                $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                $from_name=$template_configurations['email_from_name'];
                $from=$template_configurations['email_from'];
                $to=$delegate_info->email;
                $to_name=$delegate_info->first_name.' '.$delegate_info->last_name;
                $mailer_data['mail_from_name']=$from_name;
                $mailer_data['mail_to_name']=$to_name;
                $mailer_data['mail_from']=$from;
                $mailer_data['mail_to']=$to;
                $mailer_data['mail_to_user_id']=$delegate_info->id_user;
                $mailer_data['mail_subject']=$subject;
                $mailer_data['mail_message']=$body;
                $mailer_data['status']=0;
                $mailer_data['send_date']=currentDate();
                $mailer_data['is_cron']=0;
                $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                //print_r($mailer_data);
                $mailer_id=$this->Customer_model->addMailer($mailer_data);
                //sending mail to bu owner
                if($mailer_data['is_cron']==0) {
                    //$mail_sent_status=sendmail($to, $subject, $body, $from);
                    $this->load->library('sendgridlibrary');
                    $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                    if($mail_sent_status==1)
                        $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                }
            }
         }
       }
       else{
         $template_configurations_parent=$this->Customer_model->EmailTemplateList(array('customer_id' => $contract_info[0]['customer_id'],'module_key'=>'PROJECT_TASK_DISCUSSION_INITIATE'));
         if($template_configurations_parent['total_records']>0){
            $bu_owner_info = $this->User_model->getUserInfo(array('user_id' => $contract_info[0]['contract_owner_id'],'user_status'=>1));
            $customer_details = $this->Customer_model->getCustomer(array('id_customer' => $contract_info[0]['customer_id']));
            if(isset($contract_info[0]['delegate_id']) && $contract_info[0]['delegate_id']!=NULL && $contract_info[0]['delegate_id']>0){
                $delegate_info = $this->User_model->getUserInfo(array('user_id' => $contract_info[0]['delegate_id'],'user_status'=>1));
            }
            $customer_admin_list=$this->Customer_model->getCustomerAdminList(array('customer_id'=>$contract_info[0]['customer_id'],'user_status'=>1));
            if($customer_details[0]['company_logo']=='') {
                $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'company');
            }
            else{
                $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'profile', SMALL_IMAGE);

            }
            if(!empty($customer_details)){ $customer_name = $customer_details[0]['company_name']; }

            $discussion_initiated_user_info = $this->User_model->getUserInfo(array('user_id' => $data['created_by'])); 
            //mail to customer admins
            foreach($customer_admin_list['data'] as $kd=>$vd){
                $template_configurations=$template_configurations_parent['data'][0];
                $wildcards=$template_configurations['wildcards'];
                $wildcards_replaces=array();
                $wildcards_replaces['first_name']=$vd['first_name'];
                $wildcards_replaces['last_name']=$vd['last_name'];
                $wildcards_replaces['project_name']=$contract_info[0]['contract_name'];
                if($module_info[0]['is_workflow'] == 1){
                        $wildcards_replaces['discussion_executed_user_name'] = $discussion_initiated_user_info->first_name . ' ' . $discussion_initiated_user_info->last_name . ' (' . $discussion_initiated_user_info->user_role_name . ')';
                        $wildcards_replaces['discussion_executed_date'] = dateFormat(currentDate());
                        $wildcards_replaces['project_workflow_module_name']=$module_info[0]['module_name'];
                }
                $wildcards_replaces['logo']=$customer_logo;
                $wildcards_replaces['year'] = date("Y");
                $wildcards_replaces['url']=WEB_BASE_URL.'html';
                $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                $from_name=$template_configurations['email_from_name'];
                $from=$template_configurations['email_from'];
                $to=$vd['email'];
                $to_name=$vd['first_name'].' '.$vd['last_name'];
                $mailer_data['mail_from_name']=$from_name;
                $mailer_data['mail_to_name']=$to_name;
                $mailer_data['mail_from']=$from;
                $mailer_data['mail_to']=$to;
                $mailer_data['mail_to_user_id']=$vd['id_user'];
                $mailer_data['mail_subject']=$subject;
                $mailer_data['mail_message']=$body;
                $mailer_data['status']=0;
                $mailer_data['send_date']=currentDate();
                $mailer_data['is_cron']=0;
                $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                //print_r($mailer_data);
                $mailer_id=$this->Customer_model->addMailer($mailer_data);
                //sending mail to bu owner
                if($mailer_data['is_cron']==0) {
                    //$mail_sent_status=sendmail($to, $subject, $body, $from);
                    $this->load->library('sendgridlibrary');
                    $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                    if($mail_sent_status==1)
                        $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                }
            }
            //mail to bu owner
            if(isset($bu_owner_info->first_name)){
                $template_configurations=$template_configurations_parent['data'][0];
                $wildcards=$template_configurations['wildcards'];
                $wildcards_replaces=array();
                $wildcards_replaces['first_name']=$bu_owner_info->first_name;
                $wildcards_replaces['last_name']=$bu_owner_info->last_name;
                $wildcards_replaces['project_name']=$contract_info[0]['contract_name'];
                if($module_info[0]['is_workflow'] == 1){
                    $wildcards_replaces['discussion_executed_user_name'] = $discussion_initiated_user_info->first_name . ' ' . $discussion_initiated_user_info->last_name . ' (' . $discussion_initiated_user_info->user_role_name . ')';
                    $wildcards_replaces['discussion_executed_date'] = dateFormat(currentDate());
                    $wildcards_replaces['project_workflow_module_name']=$module_info[0]['module_name'];
                }
                $wildcards_replaces['project_workflow_module_name']=$module_info[0]['module_name'];
                $wildcards_replaces['logo']=$customer_logo;
                $wildcards_replaces['year'] = date("Y");
                $wildcards_replaces['url']=WEB_BASE_URL.'html';
                $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                $from_name=$template_configurations['email_from_name'];
                $from=$template_configurations['email_from'];
                $to=$bu_owner_info->email;
                $to_name=$bu_owner_info->first_name.' '.$bu_owner_info->last_name;
                $mailer_data['mail_from_name']=$from_name;
                $mailer_data['mail_to_name']=$to_name;
                $mailer_data['mail_from']=$from;
                $mailer_data['mail_to']=$to;
                $mailer_data['mail_to_user_id']=$bu_owner_info->id_user;
                $mailer_data['mail_subject']=$subject;
                $mailer_data['mail_message']=$body;
                $mailer_data['status']=0;
                $mailer_data['send_date']=currentDate();
                $mailer_data['is_cron']=0;
                $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                //print_r($mailer_data);
                $mailer_id=$this->Customer_model->addMailer($mailer_data);
                //sending mail to bu owner
                if($mailer_data['is_cron']==0) {
                    //$mail_sent_status=sendmail($to, $subject, $body, $from);
                    $this->load->library('sendgridlibrary');
                    $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                    if($mail_sent_status==1)
                        $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                }
            }
            //mail to delegate
            if(isset($delegate_info) && isset($delegate_info->first_name)){
                $template_configurations=$template_configurations_parent['data'][0];
                $wildcards=$template_configurations['wildcards'];
                $wildcards_replaces=array();
                $wildcards_replaces['first_name']=$delegate_info->first_name;
                $wildcards_replaces['last_name']=$delegate_info->last_name;
                $wildcards_replaces['project_name']=$contract_info[0]['contract_name'];
                if($module_info[0]['is_workflow'] == 1){
                    $wildcards_replaces['discussion_executed_user_name'] = $discussion_initiated_user_info->first_name . ' ' . $discussion_initiated_user_info->last_name . ' (' . $discussion_initiated_user_info->user_role_name . ')';
                    $wildcards_replaces['discussion_executed_date'] = dateFormat(currentDate());
                    $wildcards_replaces['project_workflow_module_name']=$module_info[0]['module_name'];
                }
                $wildcards_replaces['project_workflow_module_name']=$module_info[0]['module_name'];
                $wildcards_replaces['logo']=$customer_logo;
                $wildcards_replaces['year'] = date("Y");
                $wildcards_replaces['url']=WEB_BASE_URL.'html';
                $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                $from_name=$template_configurations['email_from_name'];
                $from=$template_configurations['email_from'];
                $to=$delegate_info->email;
                $to_name=$delegate_info->first_name.' '.$delegate_info->last_name;
                $mailer_data['mail_from_name']=$from_name;
                $mailer_data['mail_to_name']=$to_name;
                $mailer_data['mail_from']=$from;
                $mailer_data['mail_to']=$to;
                $mailer_data['mail_to_user_id']=$delegate_info->id_user;
                $mailer_data['mail_subject']=$subject;
                $mailer_data['mail_message']=$body;
                $mailer_data['status']=0;
                $mailer_data['send_date']=currentDate();
                $mailer_data['is_cron']=0;
                $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                $mailer_id=$this->Customer_model->addMailer($mailer_data);
                if($mailer_data['is_cron']==0) {
                    //$mail_sent_status=sendmail($to, $subject, $body, $from);
                    $this->load->library('sendgridlibrary');
                    $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                    if($mail_sent_status==1)
                        $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                }
            }
         }
       }
        
        $result = array('status'=>TRUE,'message'=>$this->lang->line('success'), 'data'=>'');
        $this->response($result, REST_Controller::HTTP_OK);
        

    }

    public function getProviders_get(){
        $data = $this->input->get();

        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($data['customer_id']!=$this->session_user_info->customer_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['business_unit_id']) && strtolower($data['business_unit_id'])!='all') {
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            $data['id_business_unit'] = pk_decrypt($data['business_unit_id']);
            if(!in_array($data['id_business_unit'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['delegate_id'])) {
            $data['delegate_id'] = pk_decrypt($data['delegate_id']);
            if(!in_array($data['delegate_id'],$this->session_user_delegates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['contract_owner_id'])) {
            $data['contract_owner_id'] = pk_decrypt($data['contract_owner_id']);
            if(!in_array($data['contract_owner_id'],$this->session_user_customer_all_users)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['customer_user'])) {
            $data['customer_user'] = pk_decrypt($data['customer_user']);
            if(!in_array($data['customer_user'],$this->session_user_contributors)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }

        if(isset($data['user_role_id']) && isset($data['id_user'])){
            if(in_array($data['user_role_id'],array(3))){
                $business_unit = $this->Business_unit_model->getBusinessUnitUser(array('user_id' => $data['id_user'],'status' => '1'));
                $data['business_unit_id'] = array_map(function($i){ return $i['id_business_unit']; },$business_unit);
                $data['session_user_role']=$this->session_user_info->user_role_id;
                $data['session_user_id']=$this->session_user_id;
            }
            if($data['user_role_id']==3){
                /*$data['contract_owner_id'] = $data['id_user'];
                if(!in_array($data['contract_owner_id'],$this->session_user_bu_owners)){
                    $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                    $this->response($result, REST_Controller::HTTP_OK);
                }*/
                $data['session_user_role']=$this->session_user_info->user_role_id;
                $data['session_user_id']=$this->session_user_id;
            }
            if($data['user_role_id']==4){
                $data['delegate_id'] = $data['id_user'];
                if(!in_array($data['delegate_id'],$this->session_user_delegates)){
                    $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                    $this->response($result, REST_Controller::HTTP_OK);
                }
                $data['session_user_role']=$this->session_user_info->user_role_id;
                $data['session_user_id']=$this->session_user_id;
            }
            if($data['user_role_id']==5){
                $data['customer_user'] = $data['id_user'];
                if(!in_array($data['customer_user'],$this->session_user_contributors)){
                    $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                    $this->response($result, REST_Controller::HTTP_OK);
                }
            }
            if($data['user_role_id']==6){
                $data['business_unit_id'] = $this->session_user_business_units;
            }
        }

        /*helper function for ordering smart table grid options*/
        $data = tableOptions($data);
        $result = $this->Contract_model->getProviders($data);
        //echo '<pre>';print_r($result);
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function updatestakeholders_post(){

        $data = $this->input->post();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        // $this->form_validator->add_rules('id_contract', array('required'=>$this->lang->line('id_contract_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['id_contract'])) {
            $data['id_contract'] = pk_decrypt($data['id_contract']);
            if(!in_array($data['id_contract'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_provider'])) {
            $data['id_provider'] = pk_decrypt($data['id_provider']);
        }
        if(isset($data['business_unit_id'])) {
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
        }
        if(isset($data['classification_id'])) {
            $data['classification_id'] = pk_decrypt($data['classification_id']);
        }
        if(isset($data['contract_owner_id'])) {
            $data['contract_owner_id'] = pk_decrypt($data['contract_owner_id']);
        }
        if(isset($data['created_by'])) {
            $data['created_by'] = pk_decrypt($data['created_by']);
        }
        if(isset($data['currency_id'])) {
            $data['currency_id'] = pk_decrypt($data['currency_id']);
        }
        if(isset($data['delegate_id'])) {
            $data['delegate_id'] = pk_decrypt($data['delegate_id']);
        }
        if(isset($data['relationship_category_id'])) {
            $data['relationship_category_id'] = pk_decrypt($data['relationship_category_id']);
        }
        if(isset($data['updated_by'])) {
            $data['updated_by'] = pk_decrypt($data['updated_by']);
        }
        // echo '<pre>'.print_r($data);exit;
        $update_data = array(
            'internal_contract_sponsor' => is_array($data['internal_contract_sponsor'])?pk_decrypt($data['internal_contract_sponsor']['id_user']):$data['internal_contract_sponsor'],
            'provider_contract_sponsor' => is_array($data['provider_contract_sponsor'])?pk_decrypt($data['provider_contract_sponsor']['id_user']):$data['provider_contract_sponsor'],
            'internal_partner_relationship_manager' => is_array($data['internal_partner_relationship_manager'])?pk_decrypt($data['internal_partner_relationship_manager']['id_user']):$data['internal_partner_relationship_manager'],
            'provider_partner_relationship_manager' => is_array($data['provider_partner_relationship_manager'])?pk_decrypt($data['provider_partner_relationship_manager']['id_user']):$data['provider_partner_relationship_manager'],
            'provider_contract_responsible' => is_array($data['provider_contract_responsible'])?pk_decrypt($data['provider_contract_responsible']['id_user']):$data['provider_contract_responsible'],
            'internal_contract_responsible' => is_array($data['internal_contract_responsible'])?pk_decrypt($data['internal_contract_responsible']['id_user']):$data['internal_contract_responsible']
        );
        $stake_holder_lables = array('lable1'=>$data['stake_holder_lables']['lable1'],'lable2'=>$data['stake_holder_lables']['lable2'],'lable3'=>$data['stake_holder_lables']['lable3'],'updated_by' => $data['updated_by'],'updated_on' => currentDate());
        if(!empty($data['id_contract'])){
            $is_update=$this->User_model->update_data('contract_stakeholder_lables',$stake_holder_lables,array('contract_id'=>$data['id_contract']));
            $this->User_model->update_data('contract',$update_data,array('id_contract'=>$data['id_contract']));
            $this->contract_change_log($data);
        }
        if(!empty($data['id_provider'])){
            $is_update=$this->User_model->update_data('contract_stakeholder_lables',$stake_holder_lables,array('provider_id'=>$data['id_provider']));
            $this->provider_change_log($update_data,$data['id_provider']);
            $this->User_model->update_data('provider',$update_data,array('id_provider'=>$data['id_provider']));
        }
        if(isset($is_update))
            $this->response(array('status'=>TRUE, 'message'=>$this->lang->line('stakeholder_update'), 'data'=>''), REST_Controller::HTTP_OK);
        else
            $this->response(array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('stakeholder_not_update')), 'data'=>''), REST_Controller::HTTP_OK);
    }

    public function getstakeholders_get(){

        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        // $this->form_validator->add_rules('id_contract', array('required'=>$this->lang->line('id_contract_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['id_contract'])) {
            $data['id_contract'] = pk_decrypt($data['id_contract']);
            if(!in_array($data['id_contract'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_contract'])){
            $contract_info = $this->User_model->check_record('contract',array('id_contract'=>$data['id_contract']));
        }
        if(isset($data['id_provider'])){
            $data['id_provider']=pk_decrypt($data['id_provider']);
            $contract_info = $this->User_model->check_record('provider',array('id_provider'=>$data['id_provider']));
        }
        // echo '<pre>'.print_r($contract_info);exit;
        if((int)$contract_info[0]['internal_contract_sponsor'] > 0){
            $user_info = $this->User_model->check_record('user',array('id_user'=>$contract_info[0]['internal_contract_sponsor']));
            
            $contract_info[0]['internal_contract_sponsor'] = array('id_user'=>pk_encrypt($user_info[0]['id_user']),'name' => $user_info[0]['first_name'].' '.$user_info[0]['last_name']);
        }
        // else{
        //     $contract_info[0]['internal_contract_sponsor']='';
        // }
        // echo $this->db->last_query();exit;
        if((int)$contract_info[0]['provider_contract_sponsor'] > 0){
            $user_info = $this->User_model->check_record('user',array('id_user'=>$contract_info[0]['provider_contract_sponsor']));
            $contract_info[0]['provider_contract_sponsor'] = array('id_user' => pk_encrypt($user_info[0]['id_user']),'name' => $user_info[0]['first_name'].' '.$user_info[0]['last_name']);
        }
        else{
            // $contract_info[0]['provider_contract_sponsor']='';
        }
        if((int)$contract_info[0]['internal_partner_relationship_manager'] > 0){
            $user_info = $this->User_model->check_record('user',array('id_user'=>$contract_info[0]['internal_partner_relationship_manager']));
            $contract_info[0]['internal_partner_relationship_manager'] = array('id_user' => pk_encrypt($user_info[0]['id_user']),'name' => $user_info[0]['first_name'].' '.$user_info[0]['last_name']);
        }
        else{
            // $contract_info[0]['internal_partner_relationship_manager']='';
        }
        if((int)$contract_info[0]['provider_partner_relationship_manager'] > 0){
            $user_info = $this->User_model->check_record('user',array('id_user'=>$contract_info[0]['provider_partner_relationship_manager']));
            $contract_info[0]['provider_partner_relationship_manager'] = array('id_user' => pk_encrypt($user_info[0]['id_user']),'name' => $user_info[0]['first_name'].' '.$user_info[0]['last_name']);
        }
        else{
            // $contract_info[0]['provider_partner_relationship_manager']='';
        }
        if((int)$contract_info[0]['provider_contract_responsible'] > 0){
            $user_info = $this->User_model->check_record('user',array('id_user'=>$contract_info[0]['provider_contract_responsible']));
            $contract_info[0]['provider_contract_responsible'] = array('id_user' => pk_encrypt($user_info[0]['id_user']),'name' => $user_info[0]['first_name'].' '.$user_info[0]['last_name']);
        }
        else{
            // $contract_info[0]['provider_contract_responsible']='';
        }
        if((int)$contract_info[0]['internal_contract_responsible'] > 0){
            $user_info = $this->User_model->check_record('user',array('id_user'=>$contract_info[0]['internal_contract_responsible']));
            $contract_info[0]['internal_contract_responsible'] = array('id_user' => pk_encrypt($user_info[0]['id_user']),'name' => $user_info[0]['first_name'].' '.$user_info[0]['last_name']);
        }
        else{
            // $contract_info[0]['internal_contract_responsible']='';
        }
        if(isset($data['id_contract'])){
            foreach($contract_info as $k => $v){
                $contract_info[0]['id_contract'] = pk_encrypt($contract_info[0]['id_contract']);
                $contract_info[0]['business_unit_id'] = pk_encrypt($contract_info[0]['business_unit_id']);
                $contract_info[0]['classification_id'] = pk_encrypt($contract_info[0]['classification_id']);
                $contract_info[0]['contract_owner_id'] = pk_encrypt($contract_info[0]['contract_owner_id']);
                $contract_info[0]['created_by'] = pk_encrypt($contract_info[0]['created_by']);
                $contract_info[0]['currency_id'] = pk_encrypt($contract_info[0]['currency_id']);
                $contract_info[0]['delegate_id'] = pk_encrypt($contract_info[0]['delegate_id']);
                $contract_info[0]['relationship_category_id'] = pk_encrypt($contract_info[0]['relationship_category_id']);
                $contract_info[0]['updated_by'] = pk_encrypt($contract_info[0]['updated_by']);
                $contract_info[0]['provider_name'] = pk_encrypt($contract_info[0]['provider_name']);
            }
            $provider_details = $this->User_model->check_record("provider" , array("id_provider" => pk_decrypt($contract_info[0]['provider_name'])));
            $contract_info[0]['provider_name_show'] = !empty($provider_details) ? $provider_details[0]['provider_name'] : Null;
            $stake_holder_lables = $this->User_model->check_record_selected('lable1,lable2,lable3','contract_stakeholder_lables',array('contract_id'=>$data['id_contract']));
            $contract_info[0]['stake_holder_lables'] = $stake_holder_lables[0];
        }
        if(isset($data['id_provider'])){
            $stake_holder_lables = $this->User_model->check_record_selected('lable1,lable2,lable3','contract_stakeholder_lables',array('provider_id'=>$data['id_provider']));
                $contract_info[0]['stake_holder_lables'] = $stake_holder_lables[0];
        }
        $this->response(array('status'=>TRUE, 'message'=>$this->lang->line('success'), 'data'=>$contract_info[0]), REST_Controller::HTTP_OK);
        
    }

    public function validateModule_post(){

        $data = $this->input->post();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $this->form_validator->add_rules('id_module', array('required'=>$this->lang->line('module_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        if(isset($data['id_module'])) {
            $data['id_module'] = pk_decrypt($data['id_module']);
            if($this->session_user_info->user_role_id==1 && !in_array($data['id_module'],$this->session_user_master_contract_review_modules['module_id'])){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'1');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }

        $this->User_model->update_data('module',array('module_status'=>3),array('id_module'=>$data['id_module']));

        $this->response(array('status'=>TRUE, 'message'=>$this->lang->line('success'), 'data'=>''), REST_Controller::HTTP_OK);

    }
    function contract_change_log($data){
        $contract_chaged = 0;
        $status_chage = 0;
        $contract_curent_tags = $this->Tag_model->getContractTags(array('contract_id'=>$data['id_contract'],'status'=>1,'name'=>true));
        $tag_log_json = '[';

        
        // foreach($contract_curent_tags as $kt => $vt){
        //     //Comparing sub arrays info other than contract
        //     $tag_json = '{"tag_text":"'.$vt['tag_text'].'","tag_value":"'.$vt['tag_option_value'].'","tag_type":"'.$vt['tag_type'].'","tag_comments":"'.$vt['comments'].'","tag_id":"'.pk_encrypt($vt['tag_id']).'"},';
        //     $data['contract_tags'][$kt]['tag_id'] = pk_decrypt($data['contract_tags'][$kt]['tag_id']);
        //     if($data['contract_tags'][$kt]['tag_type'] == 'input' && $vt['tag_type'] == 'input'){
        //         if($data['contract_tags'][$kt]['tag_option'] != $vt['tag_option_value'])
        //             $contract_chaged = 1;
        //     }else{
        //         //echo pk_decrypt($data['contract_tags'][$kt]['tag_option']).'=='.$vt['tag_option'];
        //         if(pk_decrypt($data['contract_tags'][$kt]['tag_option']) != $vt['tag_option'])
        //             $contract_chaged = 1;
        //     }
        //     $tag_log_json .= $tag_json;
        // }

        //Logic changes for grouped Tag
             
        foreach($contract_curent_tags as $kt => $vt){
            //Comparing sub arrays info other than contract
            $tag_json = '{"tag_text":"'.$vt['tag_text'].'","tag_value":"'.$vt['tag_option_value'].'","tag_type":"'.$vt['tag_type'].'","tag_comments":"'.$vt['comments'].'","tag_id":"'.pk_encrypt($vt['tag_id']).'"},';

            if(empty($vt['business_unit_id']))
            {
                $groupedKey = 0 ;
            }
            else{
                $groupedKey = array_search(pk_encrypt($vt['business_unit_id']), array_column($data['contract_tags'], 'business_unit_id'));
            }
            $tagKey = array_search(pk_encrypt($vt['id_tag']), array_column($data['contract_tags'][$groupedKey]['tag_details'], 'tag_id'));
            if(is_numeric($groupedKey) && is_numeric($tagKey))
            {
                $Tagdata =$data['contract_tags'][$groupedKey]['tag_details'][$tagKey];
                if(($Tagdata['tag_type'] == 'input' && $vt['tag_type'] == 'input' ) || ($Tagdata['tag_type'] == "date")){
                    if($Tagdata['tag_option'] != $vt['tag_option_value']){ $contract_chaged = 1; }
                }
                elseif($Tagdata['tag_type'] == "rag" || $Tagdata['tag_type'] == "radio" || ($Tagdata['tag_type'] == "dropdown" && $Tagdata['multi_select'] == 0))
                {
                    if(pk_decrypt($Tagdata['tag_option']) != $vt['tag_option']){ $contract_chaged = 1;}
                }
                elseif($Tagdata['tag_type'] == "dropdown" && $Tagdata['multi_select'] == 1)
                {
                    $updatedTagOptionarray = [];
                    foreach($Tagdata['tag_answer'] as $updatedTagOption)
                    {
                        $updatedTagOptionarray[] = pk_decrypt($updatedTagOption);
                    }
                    $updatedTagOptionImpData = '';
                    $updatedTagOptionImpData = implode("," , $updatedTagOptionarray);
                    if(($updatedTagOptionImpData != $vt['tag_option'] ) && !empty($vt['tag_option']) && !empty($updatedTagOptionImpData))
                    {
                        $contract_chaged = 1;
                    }
                }
                elseif($Tagdata['tag_type'] == "selected"){
                    $Tagdata['tag_answer'] = ($Tagdata['multi_select'] == 1) ? $Tagdata['tag_answer'] :array($Tagdata['tag_answer']);
                    $updatedTagOptionarray = [];
                    foreach($Tagdata['tag_answer'] as $updatedTagOption)
                    {
                        $updatedTagOptionarray[] = pk_decrypt($updatedTagOption);
                    }
                    $updatedTagOptionImpData = '';
                    $updatedTagOptionImpData = implode("," , $updatedTagOptionarray);
                    $tagAnswers = explode(",",$Tagdata['tag_answer']);
                    $modalData = [
                        'module' => $Tagdata['selected_field'],
                        'ids' => $tagAnswers
                    ];
                    $tagOptionValue = $this->Tag_model->getNames($modalData);
                    $Tagdata['tag_option_value'] = !empty($tagOptionValue) ? $tagOptionValue[0]['tag_option_value'] : '';
                    if($updatedTagOptionImpData != $vt['tag_option']&& !empty($vt['tag_option']) && !empty($updatedTagOptionImpData))
                    {
                        $contract_chaged = 1;
                    }
                }
                $tag_log_json .= $tag_json;

            }

            // print_r($groupedKey);
            // print_r($tagKey);exit;


            
            
            // if($data['contract_tags'][$kt]['tag_type'] == 'input' && $vt['tag_type'] == 'input'){
            //     if($data['contract_tags'][$kt]['tag_option'] != $vt['tag_option_value'])
            //         $contract_chaged = 1;
            // }else{
            //     //echo pk_decrypt($data['contract_tags'][$kt]['tag_option']).'=='.$vt['tag_option'];
            //     if(pk_decrypt($data['contract_tags'][$kt]['tag_option']) != $vt['tag_option'])
            //         $contract_chaged = 1;
            // }
            // $tag_log_json .= $tag_json;
        }
        
        $tag_log_json = rtrim($tag_log_json,",").']'; // Removing last comma and appendint ']'
        
        $contract_curent_info = $this->User_model->check_record('contract',array('id_contract'=>$data['id_contract']));
        if(isset($contract_curent_info[0])){
            if($contract_curent_info[0]['provider_name'] != $data['provider_name']) $contract_chaged = 1;
            if($contract_curent_info[0]['business_unit_id'] != $data['business_unit_id']) $contract_chaged = 1;
            if($contract_curent_info[0]['contract_name'] != $data['contract_name']) $contract_chaged = 1;
            if($contract_curent_info[0]['contract_owner_id'] != $data['contract_owner_id']) $contract_chaged = 1;
            if($contract_curent_info[0]['contract_start_date'] != $data['contract_start_date'].' 00:00:00') $contract_chaged = 1;
            if($contract_curent_info[0]['contract_end_date'] != $data['contract_end_date'].' 00:00:00') $contract_chaged = 1;
            if($contract_curent_info[0]['auto_renewal'] != $data['auto_renewal']) $contract_chaged = 1;
            if($contract_curent_info[0]['relationship_category_id'] != $data['relationship_category_id']) $contract_chaged = 1;
            if($contract_curent_info[0]['classification_id'] != $data['classification_id']) $contract_chaged = 1;
            if($contract_curent_info[0]['contract_value'] != $data['contract_value']) $contract_chaged = 1;
            if($contract_curent_info[0]['currency_id'] != $data['currency_id']) $contract_chaged = 1;
            if($contract_curent_info[0]['delegate_id'] != $data['delegate_id']) $contract_chaged = 1;
            if($contract_curent_info[0]['description'] != $data['description']) $contract_chaged = 1;
            if($contract_curent_info[0]['template_id'] != $data['template_id']) $contract_chaged = 1;

            
            if(isset($data['internal_contract_responsible']))                if($contract_curent_info[0]['internal_contract_responsible'] != $data['internal_contract_responsible']) $contract_chaged = 1;
            if(isset($data['internal_contract_sponsor']))                if($contract_curent_info[0]['internal_contract_sponsor'] != $data['internal_contract_sponsor']) $contract_chaged = 1;
            if(isset($data['internal_partner_relationship_manager']))                if($contract_curent_info[0]['internal_partner_relationship_manager'] != $data['internal_partner_relationship_manager']) $contract_chaged = 1;
            if(isset($data['provider_contract_responsible']))                if($contract_curent_info[0]['provider_contract_responsible'] != $data['provider_contract_responsible']) $contract_chaged = 1;
            if(isset($data['provider_contract_sponsor']))                if($contract_curent_info[0]['provider_contract_sponsor'] != $data['provider_contract_sponsor']) $contract_chaged = 1;
            if(isset($data['additional_recurring_fees'])){
                if($contract_curent_info[0]['additional_recurring_fees'] != $data['additional_recurring_fees']) 
                $contract_chaged = 1;
            }                
                
            if(isset($data['additonal_one_off_fees'])){
                if($contract_curent_info[0]['additonal_one_off_fees'] != $data['additonal_one_off_fees']) 
                $contract_chaged = 1;
                
            }                
                
            if(isset($data['po_number'])){
                if($contract_curent_info[0]['po_number'] != $data['po_number']) 
                $contract_chaged = 1;
                
            }                
                
            
            //echo $data['additonal_one_off_fees'].'=='.$contract_curent_info[0]['additonal_one_off_fees'];exit;
            if($contract_curent_info[0]['contract_status'] != $data['contract_status']) $status_chage = 1;
        }
        if($contract_chaged == 1){ 
            $log_add_data = array(
                'contract_id' => $contract_curent_info[0]['id_contract'],
                'business_unit_id' => $contract_curent_info[0]['business_unit_id'],
                'provider_name' => $contract_curent_info[0]['provider_name'],
                'contract_name' => $contract_curent_info[0]['contract_name'],
                'contract_owner_id' => $contract_curent_info[0]['contract_owner_id'],
                'contract_start_date' => $contract_curent_info[0]['contract_start_date'],
                'contract_end_date' => $contract_curent_info[0]['contract_end_date'],
                'auto_renewal' => $contract_curent_info[0]['auto_renewal'],
                'relationship_category_id' => $contract_curent_info[0]['relationship_category_id'],
                'classification_id' => $contract_curent_info[0]['classification_id'],
                'contract_value' => $contract_curent_info[0]['contract_value'],
                'currency_id' => $contract_curent_info[0]['currency_id'],
                'delegate_id' => $contract_curent_info[0]['delegate_id'],
                'description' => $contract_curent_info[0]['description'],
                'created_by' => isset($data['updated_by'])&&$data['updated_by']!=''?$data['updated_by']:$contract_curent_info['created_by'],
                'created_on' => currentdate(),
                'is_status_change' => $status_chage,
                'internal_contract_responsible' => $contract_curent_info[0]['internal_contract_responsible'],
                'internal_contract_sponsor'=> $contract_curent_info[0]['internal_contract_sponsor'],
                'internal_partner_relationship_manager'=> $contract_curent_info[0]['internal_partner_relationship_manager'],
                'provider_contract_responsible'=> $contract_curent_info[0]['provider_contract_responsible'],
                'provider_contract_sponsor'=> $contract_curent_info[0]['provider_contract_sponsor'],
                'provider_partner_relationship_manager'=> $contract_curent_info[0]['provider_partner_relationship_manager'],
                'additional_recurring_fees'=> $contract_curent_info[0]['additional_recurring_fees'],
                'additonal_one_off_fees'=> $contract_curent_info[0]['additonal_one_off_fees'],
                'po_number'=> $contract_curent_info[0]['po_number'],
                'tag_data' => $tag_log_json,
                'template_id'=>$contract_curent_info[0]['template_id']
            );
            $this->User_model->insert_data('contract_log',$log_add_data);
            //echo '<pre>'.$this->db->last_query();exit;
        }
    }

    public function spent_information_post(){

        $data = $this->input->post();
        
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $this->form_validator->add_rules('id_contract', array('required'=>$this->lang->line('id_contract_req')));
        $this->form_validator->add_rules('contract_value_period', array('required'=>$this->lang->line('contract_value_period_req')));
        if(!empty($data['contract_value_period']) && $data['contract_value_period']!='budget')
        $this->form_validator->add_rules('contract_value', array('required'=>$this->lang->line('contract_value_req')));
        //$this->form_validator->add_rules('additional_recurring_fees', array('required'=>$this->lang->line('additional_recurring_fees_req')));
        //$this->form_validator->add_rules('additional_recurring_fees_period', array('required'=>$this->lang->line('additional_recurring_fees_period_req')));
        //$this->form_validator->add_rules('additonal_one_off_fees', array('required'=>$this->lang->line('additonal_one_off_fees_req')));
        //$this->form_validator->add_rules('po_number', array('required'=>$this->lang->line('po_number_req')));

        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        } 

        if(isset($data['id_contract'])) {
            $data['id_contract'] = pk_decrypt(str_replace(' ','+',$data['id_contract']));
            if(!in_array($data['id_contract'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        $data['updated_by']=$this->session_user_id;
        $contract_data=array(
            'contract_value'=>$data['contract_value']>0?$data['contract_value']:0,
            'contract_value_period'=>$data['contract_value_period'],
            'additional_recurring_fees'=>$data['additional_recurring_fees'],
            'additional_recurring_fees_period'=>$data['additional_recurring_fees_period'],
            'additonal_one_off_fees'=>$data['additonal_one_off_fees'],
            'contract_value_description'=>$data['contract_value_description'],
            'additional_recurring_value_description'=>$data['additional_recurring_value_description'],
            'additonal_one_off_value_description'=>$data['additonal_one_off_value_description'],
            'updated_by'=>$this->session_user_id,
            'po_number'=>$data['po_number'],
            'updated_on'=>currentDate()
        );
        $contract_data['contract_budget_data']='';
        if(!empty($data['contract_value_period']) && $data['contract_value_period']=='budget' && !empty($data['contract_budget_data'])){
            $contract_data['contract_value'] = $data['contract_value'] = array_sum(array_column($data['contract_budget_data'],'amount'));
            foreach($data['contract_budget_data'] as $k=>$v){
                if(!empty($v['from_date'])){
                    $data['contract_budget_data'][$k]['from_date']=date_format(date_create($v['from_date']),"M j,Y");
                }
                if(!empty($v['to_date'])){
                    $data['contract_budget_data'][$k]['to_date']=date_format(date_create($v['to_date']),"M j,Y");
                }

            }
            $contract_data['contract_budget_data']= json_encode($data['contract_budget_data']);
        }
        $this->contract_change_log($data);        
        if($this->User_model->update_data('contract',$contract_data,array('id_contract'=>$data['id_contract'])))
            $this->response(array('status'=>TRUE,'message'=>$this->lang->line('value_management_information_update_success'),'data'=>''), REST_Controller::HTTP_OK);
        else
            $this->response(array('status'=>FALSE,'error'=>array('message'=>$this->lang->line('operation_failed')),'data'=>''), REST_Controller::HTTP_OK);
    }

    public function spent_information_get(){

        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $this->form_validator->add_rules('id_contract', array('required'=>$this->lang->line('id_contract_req')));

        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        } 

        if(isset($data['id_contract'])) {
            $data['id_contract'] = pk_decrypt($data['id_contract']);  
            if(!in_array($data['id_contract'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'12');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }

        $contract_info = $this->User_model->check_record_selected('id_contract,currency_id,contract_value,contract_value_period,po_number,additional_recurring_fees,additional_recurring_fees_period,additonal_one_off_fees,contract_start_date,contract_end_date,TIMESTAMPDIFF(MONTH,contract_start_date,contract_end_date) months','contract',array('id_contract'=>$data['id_contract']));
        // $graph = $this->spent_mngment_graph('spent_info','Spent information',$contract_info[0]);
        $graph='';

        $spent_info = $this->User_model->check_record_selected('contract_value,contract_value_period,additional_recurring_fees,additional_recurring_fees_period,additonal_one_off_fees,po_number,contract_value_description,additional_recurring_value_description,additonal_one_off_value_description,contract_budget_data','contract',array('id_contract'=>$data['id_contract']));
        if(!empty($spent_info[0]['contract_budget_data'])){
            $spent_info[0]['contract_budget_data']=json_decode($spent_info[0]['contract_budget_data']);
        }
        $currencyDetails = $this->User_model->check_record("currency" , array("id_currency" => $contract_info[0]['currency_id']));
        $spent_info[0]['currency_name'] = $currencyDetails[0]['currency_name'];
        foreach($spent_info[0]['contract_budget_data'] as $k=>$v){
            if(!empty($v->amount)){
                $spent_info[0]['contract_budget_data'][$k]->amount=(int)$v->amount;                
            }
        }
        $this->response(array('status'=>TRUE,'message'=>$this->lang->line('success'),'data'=>$spent_info,'graph'=>$graph), REST_Controller::HTTP_OK);

    }

    public function spentline_get(){

        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('id_contract', array('required'=>$this->lang->line('contract_id_req')));

        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        
        if(isset($data['id_contract'])) {
            $data['id_contract'] = pk_decrypt($data['id_contract']);
            if(!in_array($data['id_contract'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['spent_line_id'])) {
            $data['spent_line_id'] = pk_decrypt($data['spent_line_id']);
        }

        if(isset($data['id'])) {
            $data['id'] = pk_decrypt($data['id']);
            $where = array('id'=>$data['id']); 
        } 
        elseif(isset($data['spent_line_id'])) {
            $where = array('id'=>$data['spent_line_id'],'status'=>1);
        }
        else {
            $where = array('contract_id'=>$data['id_contract'],'status'=>1);
        }

        $spent_line_info = $this->User_model->check_record('spent_lines',$where);
        $contract_info = $this->User_model->check_record_selected('id_contract,currency_id,contract_value,contract_value_period,po_number,additional_recurring_fees,additional_recurring_fees_period,additonal_one_off_fees,contract_start_date,contract_end_date,TIMESTAMPDIFF(MONTH,contract_start_date,contract_end_date) months,contract_budget_data','contract',array('id_contract'=>$data['id_contract']));
        $i =1;
        $spentLineInfo =[];
        if(isset($data['attachment']) && ($data['attachment'] == true))
        {
            //for giving only attachment count when front end send attachments as true
            $spentLineInfo = $spent_line_info;
            unset($spent_line_info);
            foreach($spentLineInfo as $k => $v){ 
                $spent_line_info[$k]['id'] = pk_encrypt($v['id']);
                $spentLineInfoVar[$k]['created_by'] = pk_encrypt($v['created_by']);
                $spentLineInfoVar[$k]['updated_by'] = pk_encrypt($v['updated_by']);
                $inner_data['reference_id']=$v['id'];
                $inner_data['reference_type']='spent_lines';
                $inner_data['document_status']=1;
                $inner_data['document_type'] = array(0,1);
                $spentLineInfoVar[$k]['unique_attachment']['all_records'] = $this->Document_model->getDocumentsList($inner_data);
                $spentLineInfoVar[$k]['attachment_count'] = count($spentLineInfoVar[$k]['unique_attachment']['all_records']);
            }
            $spent_line_info = $spentLineInfoVar;
        }
        else
        {
            foreach($spent_line_info as $k => $v){ 
                $spent_line_info[$k]['id'] = pk_encrypt($v['id']);
                $spent_line_info[$k]['contract_id'] = pk_encrypt($v['contract_id']);
                $spent_line_info[$k]['created_by'] = pk_encrypt($v['created_by']);
                $spent_line_info[$k]['updated_by'] = pk_encrypt($v['updated_by']);
                // $spent_line_info[$k]['from_date'] = $v['from_date'].'T00:00:00.000Z';
                // $spent_line_info[$k]['to_date'] = $v['to_date'].'T00:00:00.000Z';
                $spent_line_info[$k]['from_date'] = $v['from_date'];
                $spent_line_info[$k]['to_date'] = $v['to_date'];
                //$spent_line_info[$k]['spend_line_description'] = $v['spend_line_description'];
                $spent_line_info[$k]['spend_description'] = !empty($v['spend_line_description'])?$v['spend_line_description']:"Invoice $i";
                $inner_data['reference_id']=$v['id'];
                $inner_data['reference_type']='spent_lines';
                $inner_data['document_status']=1;
                $inner_data['document_type'] = 0;
                $spent_line_info[$k]['unique_attachment']['documents'] = $this->Document_model->getDocumentsList($inner_data);
                $inner_data['document_type'] = array(0,1);
                $spent_line_info[$k]['unique_attachment']['all_records'] = $this->Document_model->getDocumentsList($inner_data);
                $inner_data['document_type'] = 1;
                $spent_line_info[$k]['unique_attachment']['links'] = $this->Document_model->getDocumentsList($inner_data);
                foreach($spent_line_info[$k]['unique_attachment']['all_records'] as $ka=>$va){
                    $spent_line_info[$k]['unique_attachment']['all_records'][$ka]['document_source_exactpath']=($va['document_source']);
                    $spent_line_info[$k]['unique_attachment']['all_records'][$ka]['encryptedPath']=pk_encrypt($va['document_source']);
                    $spent_line_info[$k]['unique_attachment']['all_records'][$ka]['id_document']=pk_encrypt($spent_line_info[$k]['unique_attachment']['all_records'][$ka]['id_document']);
                    $spent_line_info[$k]['unique_attachment']['all_records'][$ka]['module_id']=pk_encrypt($spent_line_info[$k]['unique_attachment']['all_records'][$ka]['module_id']);
                    $spent_line_info[$k]['unique_attachment']['all_records'][$ka]['reference_id']=pk_encrypt($spent_line_info[$k]['unique_attachment']['all_records'][$ka]['reference_id']);
                    $spent_line_info[$k]['unique_attachment']['all_records'][$ka]['uploaded_by']=pk_encrypt($spent_line_info[$k]['unique_attachment']['all_records'][$ka]['uploaded_by']);
                    $spent_line_info[$k]['unique_attachment']['all_records'][$ka]['user_role_id']=pk_encrypt($spent_line_info[$k]['unique_attachment']['all_records'][$ka]['user_role_id']);
                }
                foreach($spent_line_info[$k]['unique_attachment']['documents'] as $ka=>$va){
                    $spent_line_info[$k]['unique_attachment']['documents'][$ka]['document_source_exactpath']=($va['document_source']);
                    $spent_line_info[$k]['unique_attachment']['documents'][$ka]['encryptedPath']=pk_encrypt($va['document_source']);
                    $spent_line_info[$k]['unique_attachment']['documents'][$ka]['id_document']=pk_encrypt($spent_line_info[$k]['unique_attachment']['documents'][$ka]['id_document']);
                    $spent_line_info[$k]['unique_attachment']['documents'][$ka]['module_id']=pk_encrypt($spent_line_info[$k]['unique_attachment']['documents'][$ka]['module_id']);
                    $spent_line_info[$k]['unique_attachment']['documents'][$ka]['reference_id']=pk_encrypt($spent_line_info[$k]['unique_attachment']['documents'][$ka]['reference_id']);
                    $spent_line_info[$k]['unique_attachment']['documents'][$ka]['uploaded_by']=pk_encrypt($spent_line_info[$k]['unique_attachment']['documents'][$ka]['uploaded_by']);
                    $spent_line_info[$k]['unique_attachment']['documents'][$ka]['user_role_id']=pk_encrypt($spent_line_info[$k]['unique_attachment']['documents'][$ka]['user_role_id']);
                }
                foreach($spent_line_info[$k]['unique_attachment']['links'] as $ka=>$va){
                    $spent_line_info[$k]['unique_attachment']['links'][$ka]['document_source_exactpath']=($va['document_source']);
                    $spent_line_info[$k]['unique_attachment']['links'][$ka]['id_document']=pk_encrypt($spent_line_info[$k]['unique_attachment']['links'][$ka]['id_document']);
                    $spent_line_info[$k]['unique_attachment']['links'][$ka]['module_id']=pk_encrypt($spent_line_info[$k]['unique_attachment']['links'][$ka]['module_id']);
                    $spent_line_info[$k]['unique_attachment']['links'][$ka]['reference_id']=pk_encrypt($spent_line_info[$k]['unique_attachment']['links'][$ka]['reference_id']);
                    $spent_line_info[$k]['unique_attachment']['links'][$ka]['uploaded_by']=pk_encrypt($spent_line_info[$k]['unique_attachment']['links'][$ka]['uploaded_by']);
                    $spent_line_info[$k]['unique_attachment']['links'][$ka]['user_role_id']=pk_encrypt($spent_line_info[$k]['unique_attachment']['links'][$ka]['user_role_id']);
                }
                $i++;
                $spent_line_info[$k]['attachment_count'] = count($spent_line_info[$k]['unique_attachment']['all_records']);
                $spent_line_info[$k]['invoice_status_name'] =null;
                if($spent_line_info[$k]['invoice_status'] == 0 && ($spent_line_info[$k]['invoice_status'] !=null)){ $spent_line_info[$k]['invoice_status_name'] ="Disputed";}
                elseif($spent_line_info[$k]['invoice_status'] == 1){ $spent_line_info[$k]['invoice_status_name'] ="Partial";}
                elseif($spent_line_info[$k]['invoice_status'] == 2){ $spent_line_info[$k]['invoice_status_name'] ="Activated";}
                elseif($spent_line_info[$k]['invoice_status'] == 3){ $spent_line_info[$k]['invoice_status_name'] ="Overdue";}
                elseif($spent_line_info[$k]['invoice_status'] == 4){ $spent_line_info[$k]['invoice_status_name'] ="Draft";}
                elseif($spent_line_info[$k]['invoice_status'] == 5){ $spent_line_info[$k]['invoice_status_name'] ="Paid";}
            }
        }
        

        // $graph = $this->spent_mngment_graph('spent_line','Actual Spent',$contract_info[0]);
        $graph = $this->value_mngment_graph('spent_line','Actual Spent',$contract_info[0]);

        $service_catalogue_graph=$this->service_catalogue_graph($contract_info[0]);
        // $service_catalogue_graph = $this->spent_mngment_graph('service_catalogue','Service Catalogue',$contract_info[0]);
        $this->response(array('status'=>TRUE,'message'=>$this->lang->line('success'),'data'=>$spent_line_info,'graph'=>$graph), REST_Controller::HTTP_OK);
    }

    function spent_mngment_graph($graphtype,$graph_title,$data){
        $currency = $this->User_model->check_record('currency',array('id_currency'=>$data['currency_id']));
        $graph = '';

        $chart->showSum= "1";
        $chart->decimalSeparator= ',';
        $chart->thousandSeparator= '.';
        $chart->canvasTopMargin= '0';
        //$chart->yAxisMaxValue= '9,147,483,647';
        $chart->caption= "";
        $chart->subCaption= "";
        $chart->xAxisname= "";
        $chart->yAxisName= "";
        $chart->numberPrefix= $currency[0]['currency_name'].' ';
        $chart->animation= "0";
        $chart->showBorder= "0";
        $chart->bgColor= "#ffffff";
        $chart->showLabels= "1";
        $chart->adjustDiv= "1";
        $chart->showValues= "0";
        $chart->showLimits= "0";
        $chart->showDivLineValues= "0";
        $chart->showShadow= "0";
        $chart->showLegend= "0";
        $chart->showcanvasborder= "0";
        $chart->canvasBgAlpha= "0";
        $chart->divLineAlpha= "0";
        $chart->legendBorderAlpha= "0";
        $chart->showAlternateHGridColor= "0";
        $chart->useEllipsesWhenOverflow= "1";
        $chart->palette= "3";
        $chart->theme= "fusion";
        $chart->plottooltext= "\$seriesName : <b>\$dataValue</b>";
        $chart->formatNumberScale= "0";
        $chart->usePlotGradientColor= "0";
        $chart->theme= "fusion";
        $chart->use3DLighting= "1";
        $chart->creditLabel= "0";
        $chart->key="yiF3aI-8rA4B8E2F6B4B3E3D3D3C11A5C7qhhD4F1H3hD7E6F4A-9A-8kD2I3B6uwfB2C1C1uomB1E6B1C3F3C2A21A14B14A8D8bddH4C2WA9hlcE3E1A2raC5JD4E2F-11C-9hH1B3C2B4A4D4C3E4E2F2H3C3C1A5v==";

        $categories[0]->category[0]->label = $this->lang->line('contract_value');
        $categories[0]->category[1]->label = $this->lang->line('invoices');
        $categories[0]->category[2]->label = $this->lang->line('catalogue_value');
      

        $dataset = array();
       
        $spent_line_info = $this->User_model->check_record('spent_lines',array('contract_id'=>$data['id_contract'],'status'=>1));
        $service_catalogue = $this->Contract_model->getServiceCatalogueForChart(array('contract_id'=>$data['id_contract']));
        //echo '<pre>'.print_r($data);exit;
        foreach($spent_line_info as $k => $v){ 
            $spent_line_info[$k]['id'] = pk_encrypt($v['id']);
            $spent_line_info[$k]['contract_id'] = pk_encrypt($v['contract_id']);
            $spent_line_info[$k]['created_by'] = pk_encrypt($v['created_by']);
            $spent_line_info[$k]['updated_by'] = pk_encrypt($v['updated_by']);
        }
        $dataset[0]->seriesname = 'Projected Contract Value';
        if($data['contract_value_period'] == 'total' || $data['contract_value_period'] == 'budget'|| $data['contract_value_period'] == null){
            $dataset[0]->data[0]->value = round((int)$data['contract_value']);
            $dataset[0]->data[1]->value = '';
            $dataset[0]->data[2]->value = '';
            //$dataset[0]->data[1]->toolText = 'Spend Management';
        }
        else{ 
            $dataset[0]->data[0]->value = round($data['contract_value']*((int)$data['months']/12));
            $dataset[0]->data[1]->value = '';
            $dataset[0]->data[2]->value = '';
            //$dataset[0]->data[1]->toolText = 'Spend Management';
        }
        $dataset[1]->seriesname = 'Additional Reccuring fees';
        if($data['additional_recurring_fees_period'] == null){
            $dataset[1]->data[0]->value = round($data['additional_recurring_fees']);
            $dataset[1]->data[1]->value = '';
            $dataset[1]->data[2]->value = '';
            //$dataset[1]->data[1]->toolText = 'Spend Management';
        }else if($data['additional_recurring_fees_period'] == 'month'){
            $dataset[1]->data[0]->value = round($data['additional_recurring_fees']*(int)$data['months']);
            $dataset[1]->data[1]->value = '';
            $dataset[1]->data[2]->value = '';
            //$dataset[1]->data[1]->toolText = 'Spend Management';
        }
        else if($data['additional_recurring_fees_period'] == 'quarter'){
            $dataset[1]->data[0]->value = round($data['additional_recurring_fees']/3*(int)$data['months']);
            $dataset[1]->data[1]->value = '';
            $dataset[1]->data[2]->value = '';
            //$dataset[1]->data[1]->toolText = 'Spend Management';
        }else{
            $dataset[1]->data[0]->value = round($data['additional_recurring_fees']*((int)$data['months']/12));
            $dataset[1]->data[1]->value = '';
            $dataset[1]->data[2]->value = '';
            //$dataset[1]->data[1]->toolText = 'Spend Management';
        }
        $dataset[2]->seriesname = 'Additional One-off fees';
        $dataset[2]->data[0]->value = round((int)$data['additonal_one_off_fees']);            
        $dataset[2]->data[1]->value = '';     
        $dataset[2]->data[2]->value = '';       
        $dataset[2]->data[1]->toolText = 'Actual spend';   
        $dataset[0]->data[0]->color = '#266197';
        $dataset[1]->data[0]->color = '#6ca5da';
        $dataset[2]->data[0]->color = '#bbd5ee';
        $spent_colors=array('#a84100','#943a00','#a84100','#bc4900','#cf5100','#e35800','#f76000','#ff6a0b','#ff761f','#ff8232','#ff8e46','#ff9a5a','#ffa66d','#ffb281','#ffbe94','#ffcaa8','#ffd6bc','#ffe2cf','#ffeee3','#fffaf7');
        $i = $index = 3;
        // for($i = 3; $i<count($spent_line_info); $i++){
        //     $dataset[$i]->seriesname = 'Spent Line '.($i+1);
        //     $dataset[$i]->data[0]->value = 0;
        //     $dataset[$i]->data[0]->value = isset($data['spentline_info'][$i])?$data['spentline_info'][$i]['spent_amount']:0;
        // }
        foreach($spent_line_info as $k => $v){
            $dataset[$i]->seriesname = !empty($v['spend_line_description'])?$v['spend_line_description']:"Spent Line ".($k+1);
            $dataset[$i]->data[0]->value = '';
            $dataset[$i]->data[1]->color = $spent_colors[$k+2];
            if($k>14){
                $dataset[$i]->data[1]->color = $spent_colors[17];
            }
            //$dataset[$i]->data[0]->toolText = 'Projected Spend';
            $dataset[$i]->data[1]->value = $v['spent_amount'];
            $dataset[$i]->data[2]->value = '';
            $i++;
        }
        $colors=array('#0c4c0c','#0e5d0e','#116e11','#137f13','#169016','#19a119','#1bb21b','#1ec31e','#20d420','#2ade2a','#3be13b','#4ce44c','#5de65d','#6ee96e','#7feb7f','#90ee90','#a1f1a1','#b2f3b2','#c3f6c3','#d4f8d4','#e5fbe5','#f6fef6');
        foreach($service_catalogue as $key => $val){
            $dataset[$i]->seriesname = $val['catalogue_name'];
            $dataset[$i]->data[0]->value = '';
            $dataset[$i]->data[1]->value = '';
            $dataset[$i]->data[2]->color = $colors[$key+2];
            if($key>17){
                $dataset[$i]->data[2]->color = $colors[20];
            }
            //$dataset[$i]->data[2]->toolText = $val['catalogue_name'];
            if($val['calculated_total_item_spend_add_to_chart']==1)
            {
                $dataset[$i]->data[2]->value = $val['calculated_total_item_spend'];
            }
            else{
                $dataset[$i]->data[2]->value = $val['manual_total_item_spend'];
            }
            $i++;
        }
       

        $graph->chart = $chart;
        $graph->categories = $categories;
        $graph->dataset = $dataset;

        return $graph;      
    }
    function value_mngment_graph($graphtype,$graph_title,$data){
        $currency = $this->User_model->check_record('currency',array('id_currency'=>$data['currency_id']));
        $graph = '';

        $chart->showSum= "1";
        $chart->decimalSeparator= ',';
        $chart->thousandSeparator= '.';
        $chart->canvasTopMargin= '0';
        //$chart->yAxisMaxValue= '9,147,483,647';
        $chart->caption= "";
        $chart->subCaption= "";
        $chart->xAxisname= "";
        $chart->yAxisName= "";
        $chart->numberPrefix= $currency[0]['currency_name'].' ';
        $chart->animation= "0";
        $chart->showBorder= "0";
        $chart->bgColor= "#ffffff";
        $chart->showLabels= "1";
        $chart->adjustDiv= "1";
        $chart->showValues= "0";
        $chart->showLimits= "0";
        $chart->showDivLineValues= "0";
        $chart->showShadow= "0";
        $chart->showLegend= "0";
        $chart->showcanvasborder= "0";
        $chart->canvasBgAlpha= "0";
        $chart->divLineAlpha= "0";
        $chart->legendBorderAlpha= "0";
        $chart->showAlternateHGridColor= "0";
        $chart->useEllipsesWhenOverflow= "1";
        $chart->palette= "3";
        $chart->theme= "fusion";
        $chart->plottooltext= "\$seriesName : <b>\$dataValue</b>";
        $chart->formatNumberScale= "0";
        $chart->usePlotGradientColor= "0";
        $chart->theme= "fusion";
        $chart->use3DLighting= "1";
        $chart->creditLabel= "0";
        $chart->key="yiF3aI-8rA4B8E2F6B4B3E3D3D3C11A5C7qhhD4F1H3hD7E6F4A-9A-8kD2I3B6uwfB2C1C1uomB1E6B1C3F3C2A21A14B14A8D8bddH4C2WA9hlcE3E1A2raC5JD4E2F-11C-9hH1B3C2B4A4D4C3E4E2F2H3C3C1A5v==";

        $categories[0]->category[0]->label = $this->lang->line('contract_value');
        $categories[0]->category[1]->label = $this->lang->line('invoices');
        $categories[0]->category[2]->label = $this->lang->line('catalogue_value');
      

        $dataset = array();
       
        $spent_line_info = $this->User_model->check_record('spent_lines',array('contract_id'=>$data['id_contract'],'status'=>1));
        $service_catalogue = $this->Contract_model->getServiceCatalogueForChart(array('contract_id'=>$data['id_contract']));
        //echo '<pre>'.print_r($data);exit;
        foreach($spent_line_info as $k => $v){ 
            $spent_line_info[$k]['id'] = pk_encrypt($v['id']);
            $spent_line_info[$k]['contract_id'] = pk_encrypt($v['contract_id']);
            $spent_line_info[$k]['created_by'] = pk_encrypt($v['created_by']);
            $spent_line_info[$k]['updated_by'] = pk_encrypt($v['updated_by']);
        }
        $currency_name=$currency[0]['currency_name'];
        $dataset[0]->seriesname = 'Projected Contract Value';
        if($data['contract_value_period']=='budget'){
            $tool_text='';
            foreach(json_decode($data['contract_budget_data']) as $obj){
                $amount=$this->a_number_format($obj->amount, 0, '.',".",3);
                $date_data='';
                if(!empty($obj->from_date)){
                    $date_data="(".$obj->from_date.")";
                }
                if(!empty($obj->to_date)){
                    $date_data="(".$obj->to_date.")";
                }
                if(!empty($obj->from_date) && !empty($obj->to_date)){
                   $date_data= "(".$obj->from_date.' - '.$obj->to_date.")";
                }
                $currency_name=$amount>0?$currency_name:'';

                $tool_text .= "<b> $currency_name $amount $date_data</b><br>";
            }
            $dataset[0]->seriesname = $tool_text.'<b>Total </b>';
        }
        if(in_array($data['contract_value_period'],array('total','budget')) || $data['contract_value_period'] == null){
            $dataset[0]->data[0]->value = round((int)$data['contract_value']);
            $dataset[0]->data[1]->value = '';
            $dataset[0]->data[2]->value = '';
            //$dataset[0]->data[1]->toolText = 'Spend Management';
        }
        else{ 
            $dataset[0]->data[0]->value = round($data['contract_value']*((int)$data['months']/12));
            $dataset[0]->data[1]->value = '';
            $dataset[0]->data[2]->value = '';
            //$dataset[0]->data[1]->toolText = 'Spend Management';
        }
        $dataset[1]->seriesname = 'Additional Reccuring fees';
        if($data['additional_recurring_fees_period'] == null){
            $dataset[1]->data[0]->value = round($data['additional_recurring_fees']);
            $dataset[1]->data[1]->value = '';
            $dataset[1]->data[2]->value = '';
            //$dataset[1]->data[1]->toolText = 'Spend Management';
        }else if($data['additional_recurring_fees_period'] == 'month'){
            $dataset[1]->data[0]->value = round($data['additional_recurring_fees']*(int)$data['months']);
            $dataset[1]->data[1]->value = '';
            $dataset[1]->data[2]->value = '';
            //$dataset[1]->data[1]->toolText = 'Spend Management';
        }
        else if($data['additional_recurring_fees_period'] == 'quarter'){
            $dataset[1]->data[0]->value = round($data['additional_recurring_fees']/3*(int)$data['months']);
            $dataset[1]->data[1]->value = '';
            $dataset[1]->data[2]->value = '';
            //$dataset[1]->data[1]->toolText = 'Spend Management';
        }else{
            $dataset[1]->data[0]->value = round($data['additional_recurring_fees']*((int)$data['months']/12));
            $dataset[1]->data[1]->value = '';
            $dataset[1]->data[2]->value = '';
            //$dataset[1]->data[1]->toolText = 'Spend Management';
        }
        $dataset[2]->seriesname = 'Additional One-off fees';
        $dataset[2]->data[0]->value = round((int)$data['additonal_one_off_fees']);            
        $dataset[2]->data[1]->value = '';     
        $dataset[2]->data[2]->value = '';       
        $dataset[2]->data[1]->toolText = 'Actual spend';   
        $dataset[0]->data[0]->color = '#266197';
        $dataset[1]->data[0]->color = '#6ca5da';
        $dataset[2]->data[0]->color = '#bbd5ee';
        $spent_colors=array('#a84100','#943a00','#a84100','#bc4900','#cf5100','#e35800','#f76000','#ff6a0b','#ff761f','#ff8232','#ff8e46','#ff9a5a','#ffa66d','#ffb281','#ffbe94','#ffcaa8','#ffd6bc','#ffe2cf','#ffeee3','#fffaf7');
        $i = $index = 3;
        // for($i = 3; $i<count($spent_line_info); $i++){
        //     $dataset[$i]->seriesname = 'Spent Line '.($i+1);
        //     $dataset[$i]->data[0]->value = 0;
        //     $dataset[$i]->data[0]->value = isset($data['spentline_info'][$i])?$data['spentline_info'][$i]['spent_amount']:0;
        // }
        foreach($spent_line_info as $k => $v){
            $dataset[$i]->seriesname = !empty($v['spend_line_description'])?$v['spend_line_description']:"Spent Line ".($k+1);
            $dataset[$i]->data[0]->value = '';
            $dataset[$i]->data[1]->color = $spent_colors[$k+2];
            if($k>14){
                $dataset[$i]->data[1]->color = $spent_colors[17];
            }
            //$dataset[$i]->data[0]->toolText = 'Projected Spend';
            $dataset[$i]->data[1]->value = $v['spent_amount'];
            $dataset[$i]->data[2]->value = '';
            $i++;
        }
        $colors=array('#0c4c0c','#0e5d0e','#116e11','#137f13','#169016','#19a119','#1bb21b','#1ec31e','#20d420','#2ade2a','#3be13b','#4ce44c','#5de65d','#6ee96e','#7feb7f','#90ee90','#a1f1a1','#b2f3b2','#c3f6c3','#d4f8d4','#e5fbe5','#f6fef6');
        foreach($service_catalogue as $key => $val){
            $dataset[$i]->seriesname = $val['catalogue_name'];
            $dataset[$i]->data[0]->value = '';
            $dataset[$i]->data[1]->value = '';
            $dataset[$i]->data[2]->color = $colors[$key+2];
            if($key>17){
                $dataset[$i]->data[2]->color = $colors[20];
            }
            //$dataset[$i]->data[2]->toolText = $val['catalogue_name'];
            if($val['calculated_total_item_spend_add_to_chart']==1)
            {
                $dataset[$i]->data[2]->value = $val['calculated_total_item_spend'];
            }
            else{
                $dataset[$i]->data[2]->value = $val['manual_total_item_spend'];
            }
            $i++;
        }
       

        $graph->chart = $chart;
        $graph->categories = $categories;
        $graph->dataset = $dataset;

        return $graph;      
    }

    public function spentline_post(){
        
        $data = $this->input->post();
        if(isset($data['contract'])){
            $data = $data['contract'];
        }
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $this->form_validator->add_rules('id_contract', array('required'=>$this->lang->line('id_contract_req')));
        //$this->form_validator->add_rules('spent_period', array('required'=>$this->lang->line('spent_period_req')));
        $this->form_validator->add_rules('spent_amount', array('required'=>$this->lang->line('spent_amount_req')));

        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if((isset($data['from_date'])) && (isset($data['to_date'])))
        {
            if ($data['from_date'] > $data['to_date']) 
            {
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('from_date_should_be_less_than_to_date')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_contract'])) {
            $data['id_contract'] = pk_decrypt($data['id_contract']);
            if(!in_array($data['id_contract'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }

        if(isset($data['id'])){
            $data['id'] = pk_decrypt($data['id']);
            $data['from_date'] = !empty(str_replace("T00:00:00.000Z","",$data['from_date']))?str_replace("T00:00:00.000Z","",$data['from_date']):NULL; //we are replacing string because will deleting we are getting error
            $data['to_date'] = !empty(str_replace("T00:00:00.000Z","",$data['to_date']))?str_replace("T00:00:00.000Z","",$data['to_date']):NULL;
            $upd_data = array('contract_id'=> $data['id_contract'],'from_date'=>$data['from_date'],'to_date'=> $data['to_date'],'spent_amount'=> $data['spent_amount'],'updated_by'=> $this->session_user_id,'updated_on'=> currentDate(),'status'=>isset($data['status'])?$data['status']:1,'invoice_status'=>isset($data['invoice_status'])?$data['invoice_status']:null);
            if(isset($data['comment']))
                $upd_data['comment']=$data['comment'];
            if(isset($data['spend_line_description']))
            {
                $upd_data['spend_line_description']=$data['spend_line_description'];
            } 
            $update = $this->User_model->update_data('spent_lines',$upd_data,array('id'=>$data['id']));    
            if($update)
                $this->response(array('status'=>TRUE,'message'=>$this->lang->line('spent_line_update_success'),'data'=>''), REST_Controller::HTTP_OK);
            else
                $this->response(array('status'=>FALSE,'error'=>array('message'=>$this->lang->line('operation_failed')),'data'=>'1'), REST_Controller::HTTP_OK);
        }else{
            $ins_data = array('contract_id'=> $data['id_contract'],'from_date'=>$data['from_date'],'to_date'=> $data['to_date'],'spent_amount'=> $data['spent_amount'],'created_by'=> $this->session_user_id,'created_on'=> currentDate(),'invoice_status'=>isset($data['invoice_status'])?$data['invoice_status']:null);
            if(isset($data['comment']))
                $ins_data['comment']=$data['comment'];
            if(isset($data['spend_line_description']))
            {
                $ins_data['spend_line_description']=$data['spend_line_description'];
            }   
            $spentlineId = $this->User_model->insert_data('spent_lines',$ins_data);  
            // echo $this->db->last_query();exit;
            if($spentlineId)
            {
                if(isset($_FILES['file']))
                {
                    $totalFilesCount = count($_FILES['file']['name']);
                }
                else
                {
                    $totalFilesCount=0;
                }
                $customer_id=$this->session_user_info->customer_id;
                $path=FILE_SYSTEM_PATH.'uploads/';
                $spentline_documents=array();
                if(!is_dir($path.$customer_id)){ mkdir($path.$customer_id); }
                if(isset($_FILES) && $totalFilesCount>0)
                {
                    $i_attachment=0;
                    for($i_attachment=0; $i_attachment<$totalFilesCount; $i_attachment++) {
                        $imageName = doUpload(array(
                            'temp_name' => $_FILES['file']['tmp_name'][$i_attachment],
                            'image' => $_FILES['file']['name'][$i_attachment],
                            'upload_path' => $path,
                            'folder' => $customer_id));
                        $spentline_documents[$i_attachment]['module_id']=$data['id_contract'];
                        $spentline_documents[$i_attachment]['module_type']='contract';
                        $spentline_documents[$i_attachment]['reference_id']=$spentlineId;
                        $spentline_documents[$i_attachment]['reference_type']='spent_lines';
                        $spentline_documents[$i_attachment]['document_name']=$_FILES['file']['name'][$i_attachment];
                        $spentline_documents[$i_attachment]['document_type'] = 0;
                        $spentline_documents[$i_attachment]['document_source']=$imageName;
                        $spentline_documents[$i_attachment]['document_mime_type']=$_FILES['file']['type'][$i_attachment];
                        $spentline_documents[$i_attachment]['document_status']=1;
                        $spentline_documents[$i_attachment]['uploaded_by']=$this->session_user_id;
                        $spentline_documents[$i_attachment]['uploaded_on']=currentDate();
                    }
                }
                if(count($spentline_documents)>0){
                    $this->Document_model->addBulkDocuments($spentline_documents);
                }
                $spentline_links = array();
                if(isset($data['links']))
                {
                    foreach($data['links'] as $k => $v){
                        $spentline_links[$k]['module_id'] = $data['id_contract'];
                        $spentline_links[$k]['module_type'] = 'contract';
                        $spentline_links[$k]['reference_id'] = $spentlineId;
                        $spentline_links[$k]['reference_type'] = 'spent_lines';
                        $spentline_links[$k]['document_name'] = $v['title'];
                        $spentline_links[$k]['document_type'] = 1;
                        $spentline_links[$k]['document_source'] = $v['url'];
                        $spentline_links[$k]['document_mime_type'] = 'URL';
                        $spentline_links[$k]['uploaded_by'] = $this->session_user_id;
                        $spentline_links[$k]['uploaded_on'] = currentDate();
                    }
                }
                if(count($spentline_links)>0){
                    $this->Document_model->addBulkDocuments($spentline_links);
                }
                $this->response(array('status'=>TRUE,'message'=>$this->lang->line('spent_line_add_success'),'data'=>''), REST_Controller::HTTP_OK);
            } 
            else
            {
                $this->response(array('status'=>FALSE,'error'=>array('message'=>$this->lang->line('operation_failed')),'data'=>'2'), REST_Controller::HTTP_OK);
            }   
        }
    }

    public function unansweredquestions_get(){
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('contract_review_id', array('required'=>$this->lang->line('contract_id_req')));
        $this->form_validator->add_rules('module_id', array('required'=>$this->lang->line('module_id_req')));

        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        
        if(isset($data['contract_review_id'])) {
            $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
        }
        if(isset($data['module_id'])) {
            $data['module_id'] = pk_decrypt($data['module_id']);
        }
        //Changing the column dynamically.
        $answer_column = 'question_answer';
        $check_validator=array();
        if($this->session_user_info->user_role_id==4 || $this->session_user_info->user_role_id==3){
            // print_r($this->session_user_info->contribution_type);exit;
            if($this->session_user_info->contribution_type==1)
            $check_validator=$this->User_model->check_record('contract_user',array('user_id'=>$this->session_user_info->id_user,'status'=>1,'contract_review_id'=>$data['contract_review_id']));
        }
        // echo $this->db->last_query();exit;
        if(count($check_validator)>0)
            $answer_column = 'v_question_answer';
        $data['dynamic_column'] = $answer_column;
        // print_r($answer_column);exit;
        // echo '<pre>'.print_r($this->session_user_info->contribution_type);exit;
        $validator_exists = count($this->Contract_model->getValidatormodules(array('contract_review_id'=> $data['contract_review_id'],'module_id'=>$data['module_id'],'contribution_type'=>1)))>0?true:false;
        if((int)$this->session_user_info->provider > 0)
            $data['provider_questions'] = true;
        $task_info=$this->Project_model->getmaintaskinfo(array('contract_review_id'=>$data['contract_review_id']));
        // print_r($task_info[0]['parent_id']);exit;
        if($task_info[0]['parent_id']>0){
            // $data['provider_questions'] = true;
        }
        $contractReviewDetais = $this->User_model->check_record('contract_review',array('id_contract_review'=> $data['contract_review_id']));
        $type ='';
        if(!empty($contractReviewDetais))
        {
            $contractData =$this->User_model->check_record('contract',array('id_contract'=> $contractReviewDetais[0]['contract_id']));
            if(!empty($contractData))
            {
                $type = $contractData[0]['type'];
            }
        }
        $result = $this->Contract_model->getUnAnsweredQuestions($data);//echo '<pre>'.$this->db->last_query();exit;
        if($validator_exists && ($this->session_user_info->user_role_id ==2 || $this->session_user_info->user_role_id == 3 || $this->session_user_info->user_role_id == 4 || $this->session_user_info->user_role_id ==6)){
            $side_by_side_validation = true;
        }
        else{
            $side_by_side_validation = false;
        }
        $new_result = array();
        $validator = 0;
        $validator_modules = $this->Contract_model->getValidatormodules(array('contract_review_id'=>$data['contract_review_id'],'user_id'=>$this->session_user_id,'contribution_type'=>1));
        if(count($validator_modules) > 0)
            $validator = 1;
        foreach($result as $k => $v){
            $new_array =[];
            foreach($v['questions'] as $k1=>$v1){
                //Milesone2 starts
                if($v1['id_question'] > 0){
                    $new_result[$k]['questions'][$k1]['validator'] = $validator;
                    $new_result[$k]['questions'][$k1]['discussion'] = array();
                    $new_result[$k]['questions'][$k1]['attachments'] = array();
                    $review_discussion = "SELECT crdq.id_contract_review_discussion_question,crdq.remarks,crdq.created_on,CONCAT(u.first_name,' ',u.last_name) initiated_by FROM contract_review_discussion crd JOIN contract_review_discussion_question crdq ON crd.id_contract_review_discussion = crdq.contract_review_discussion_id JOIN user u on crdq.created_by = u.id_user WHERE crdq.question_id = ".$v1['id_question'];
                    $review_discussion = $this->User_model->custom_query($review_discussion);
                    if(count($review_discussion) > 0){
                        $question_discussion = "SELECT crdql.remarks,CONCAT(u.first_name,' ',u.last_name) initiated_by,crdql.created_on FROM contract_review_discussion_question_log crdql LEFT JOIN user u on crdql.created_by = u.id_user WHERE crdql.contract_review_discussion_question_id = ".$review_discussion[0]['id_contract_review_discussion_question']." ORDER BY crdql.id_contract_review_discussion_question_log DESC";
                        $log_index = 0;
                        $question_discussion = $this->User_model->custom_query($question_discussion);
                        foreach($question_discussion as $logk => $logv){
                            $new_result[$k]['questions'][$k1]['discussion']['log'][$log_index]['comments'] = $logv['remarks'];
                            $new_result[$k]['questions'][$k1]['discussion']['log'][$log_index]['created_by'] = $logv['initiated_by'];
                            $new_result[$k]['questions'][$k1]['discussion']['log'][$log_index]['created_on'] = $logv['created_on'];
                            $log_index++;
                        }
                        $new_result[$k]['questions'][$k1]['discussion']['log'][$log_index]['comments'] = $review_discussion[0]['remarks'];
                        $new_result[$k]['questions'][$k1]['discussion']['log'][$log_index]['created_by'] = $review_discussion[0]['initiated_by'];
                        $new_result[$k]['questions'][$k1]['discussion']['log'][$log_index]['created_on'] = $review_discussion[0]['created_on'];
                        // echo '<br>'.count($new_result[$k]['questions'][$k1]['discussion']);
                    }else{
                        //Assigning empty string for discussions as requested by frontend.
                        $new_result[$k]['questions'][$k1]['discussion'] = '';
                    }
                    $v_attachment_count = 0;
                    $attachment_count = 0;
                    $new_result[$k]['questions'][$k1]['v_attachments']=[];
                    $new_result[$k]['questions'][$k1]['attachments']=[];
                    foreach($v1['attachments'] as $key =>$val){
                        (int)$val['validator_record']?$v_attachment_count++: $attachment_count++;
                        if((int)$val['validator_record'])
                        {
                            $new_result[$k]['questions'][$k1]['v_attachments'][$key]['document_name']=$val['document_name'];
                            $new_result[$k]['questions'][$k1]['v_attachments'][$key]['document_source']=$val['document_source'];
                            $new_result[$k]['questions'][$k1]['v_attachments'][$key]['encryptedPath']=pk_encrypt($val['document_source']);
                            $new_result[$k]['questions'][$k1]['v_attachments'][$key]['document_type']=(int)$val['document_type'];
                            $new_result[$k]['questions'][$k1]['v_attachments'][$key]['uploaded_by']=$val['uploaded_by'];
                            $new_result[$k]['questions'][$k1]['v_attachments'][$key]['created_on']=$val['uploaded_on'];
                            $new_result[$k]['questions'][$k1]['v_attachments'][$key]['id_document']=pk_encrypt($val['id_document']);
                            $new_result[$k]['questions'][$k1]['v_attachments'][$key]['module_id']=pk_encrypt($val['module_id']);
                            $new_result[$k]['questions'][$k1]['v_attachments'][$key]['reference_id']=pk_encrypt($val['reference_id']);
                        }
                        else
                        {
                            $new_result[$k]['questions'][$k1]['attachments'][$key]['document_name']=$val['document_name'];
                            $new_result[$k]['questions'][$k1]['attachments'][$key]['document_source']=$val['document_source'];
                            $new_result[$k]['questions'][$k1]['attachments'][$key]['encryptedPath']=pk_encrypt($val['document_source']);
                            $new_result[$k]['questions'][$k1]['attachments'][$key]['document_type']=(int)$val['document_type'];
                            $new_result[$k]['questions'][$k1]['attachments'][$key]['uploaded_by']=$val['uploaded_by'];
                            $new_result[$k]['questions'][$k1]['attachments'][$key]['created_on']=$val['uploaded_on'];
                            $new_result[$k]['questions'][$k1]['attachments'][$key]['id_document']=pk_encrypt($val['id_document']);
                            $new_result[$k]['questions'][$k1]['attachments'][$key]['module_id']=pk_encrypt($val['module_id']);
                            $new_result[$k]['questions'][$k1]['attachments'][$key]['reference_id']=pk_encrypt($val['reference_id']);
                        }
                    }
                    $new_result[$k]['questions'][$k1]['v_attachments']=array_values($new_result[$k]['questions'][$k1]['v_attachments']);
                    $new_result[$k]['questions'][$k1]['attachments']=array_values($new_result[$k]['questions'][$k1]['attachments']);
                    $new_result[$k]['questions'][$k1]['attachment_count'] = $attachment_count++;
                    $new_result[$k]['questions'][$k1]['v_attachment_count'] = $v_attachment_count++;
                    //Milesone2 ends
                    // print_r($result[$k]);exit;
                    $new_result[$k]['id_topic'] = pk_encrypt($result[$k]['id_topic']);
                    $new_result[$k]['topic_name'] = $result[$k]['topic_name'];
                    $new_result[$k]['topic_score'] = $result[$k]['topic_score'];
                    $new_result[$k]['questions'][$k1]['id_question'] = pk_encrypt($result[$k]['questions'][$k1]['id_question']);
                    $new_result[$k]['questions'][$k1]['provider_visibility'] = $result[$k]['questions'][$k1]['provider_visibility'];
                    $new_result[$k]['questions'][$k1]['contract_review_id'] = pk_encrypt($result[$k]['questions'][$k1]['contract_review_id']);
                    $new_result[$k]['questions'][$k1]['id_topic'] = pk_encrypt($result[$k]['questions'][$k1]['id_topic']);
                    $new_result[$k]['questions'][$k1]['module_id'] = pk_encrypt($result[$k]['questions'][$k1]['module_id']);
                    $new_result[$k]['questions'][$k1]['question_type'] = $result[$k]['questions'][$k1]['question_type'];
                    $new_result[$k]['questions'][$k1]['question_text'] = $result[$k]['questions'][$k1]['question_text'];
                    $new_result[$k]['questions'][$k1]['second_opinion'] = $result[$k]['questions'][$k1]['second_opinion'];
                    $answer_plus_feedback = explode('###',$result[$k]['questions'][$k1]['question_answer']);
                    $new_result[$k]['questions'][$k1]['question_answer'] = isset($answer_plus_feedback[0])?$answer_plus_feedback[0]:'';
                    $new_result[$k]['questions'][$k1]['question_feedback'] = isset($answer_plus_feedback[1])?$answer_plus_feedback[1]:'';
                    $new_result[$k]['questions'][$k1]['external_user_question_feedback'] = $result[$k]['questions'][$k1]['external_user_question_feedback'];
                    $v_answer_plus_feedback = explode('###',$result[$k]['questions'][$k1]['v_question_answer']);
                    $new_result[$k]['questions'][$k1]['v_question_answer'] = isset($v_answer_plus_feedback[0])?$v_answer_plus_feedback[0]:'';
                    $new_result[$k]['questions'][$k1]['validatorIsAnswerCheck'] = !empty($v_answer_plus_feedback[0])?$v_answer_plus_feedback[0]:'---';
                    $new_result[$k]['questions'][$k1]['v_question_feedback'] = isset($v_answer_plus_feedback[1])?$v_answer_plus_feedback[1]:'';
                    if($side_by_side_validation)
                    {
                        $new_result[$k]['questions'][$k1]['validator']=0;
                    }
                    array_push($new_array,$new_result[$k]['questions'][$k1]);
                     //this block is for creating duplicate question in result set when side by side validation is true
                    if($side_by_side_validation && $data['all_questions']=='true')
                    {
                        $new_result[$k]['questions'][$k1]['validator'] =$validator;
                        $new_result[$k]['questions'][$k1]['discussion']='';
                        $new_result[$k]['questions'][$k1]['is_validator']=1;
                        if(strtolower($new_result[$k]['questions'][$k1]['question_answer']) == strtolower($new_result[$k]['questions'][$k1]['validatorIsAnswerCheck']))
                        {
                            $new_result[$k]['questions'][$k1]['is_green_diffference'] =1;  
                        }
                        elseif(empty($new_result[$k]['questions'][$k1]['validatorIsAnswerCheck'])||($new_result[$k]['questions'][$k1]['validatorIsAnswerCheck'] =="---") )
                        {
                            $new_result[$k]['questions'][$k1]['is_blue_difference'] =1;  
                        }
                        else{
                            $new_result[$k]['questions'][$k1]['is_red_difference'] =1; 
                        }
                        unset($new_result[$k]['questions'][$k1]['validatorIsAnswerCheck']);
                        $new_result[$k]['questions'][$k1]['question_answer'] = $new_result[$k]['questions'][$k1]['v_question_answer'];
                        $new_result[$k]['questions'][$k1]['question_feedback'] = $new_result[$k]['questions'][$k1]['v_question_feedback'];
                        $new_result[$k]['questions'][$k1]['attachments'] = $new_result[$k]['questions'][$k1]['v_attachments'];
                        $new_result[$k]['questions'][$k1]['attachment_count'] = $new_result[$k]['questions'][$k1]['v_attachment_count'];
                        array_push($new_array,$new_result[$k]['questions'][$k1]);
                    }  
                }
            }
            unset($new_result[$k]['questions']);
            if(!empty($new_array))
            $new_result[$k]['questions'] = $new_array;
        }
        $last_submitted = "SELECT cr.updated_on as submetted_on,CONCAT(u.first_name,' ',u.last_name) submitted_by FROM contract_review cr JOIN user u ON cr.updated_by = u.id_user WHERE cr.id_contract_review = ".$data['contract_review_id'];
        $last_submitted = $this->User_model->custom_query($last_submitted);
        $result_array['submetted_on']=$last_submitted[0]['submetted_on'];
        $result_array['submitted_by']=$last_submitted[0]['submitted_by'];
     
        $this->response(array('status'=>TRUE, 'message'=>$this->lang->line('success'), 'side_by_side_validation'=>$validator_exists, 'data'=>$new_result,'submitted'=>$last_submitted[0],'type'=>$type), REST_Controller::HTTP_OK);
       // $this->response(array('status'=>TRUE, 'message'=>$this->lang->line('success'), 'data'=>$new_result,'submitted'=>$last_submitted[0]), REST_Controller::HTTP_OK);
    }

    public function getContributionsResult_get()
    {
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('id_user', array('required'=>$this->lang->line('id_user req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        //echo 'data'.print_r($data);
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            //if($data['id_user']!=$this->session_user_id){
                //$result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'1');
                //$this->response($result, REST_Controller::HTTP_OK);
            // }
        }
        //echo 'data'.print_r($data);
            if(isset($data['contract_owner_id'])) {
                $data['id_user'] = pk_decrypt($data['contract_owner_id']);
                if($data['contract_owner_id']!=$this->session_user_id){
                    $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                    $this->response($result, REST_Controller::HTTP_OK);
                }
            }
            if(isset($data['customer_id'])) {
                $data['customer_id'] = pk_decrypt($data['customer_id']);
                //if($data['id_user']!=$this->session_user_id){
                    //$result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'1');
                    //$this->response($result, REST_Controller::HTTP_OK);
                // }
            }
            $data = tableOptions($data);
    
        $result=$this->Contract_model->contributionsResult($data);
        //echo '<pre>'.print_r($result);exit;
        
        foreach($result['data'] as $k => $v){
            $result['data'][$k]['id_contract'] = pk_encrypt($v['id_contract']);
            if(strlen($v['relationship_category_name'])>2){
                preg_match_all('/[A-Z]/', ucwords(strtolower($v['relationship_category_name'])), $matches);
                $result['data'][$k]['relationship_category_short_name'] = implode('',$matches[0]);
            }else{
                $result['data'][$k]['relationship_category_short_name'] = $v['relationship_category_name'];
            }
        }
        $contractresult=$this->Contract_model->contractsResult($data);
        //echo '<pre>'.print_r($contractresult);exit;

        foreach($contractresult['data'] as $k => $v){
            $contractresult['data'][$k]['id_contract'] = pk_encrypt($v['id_contract']);
            if(strlen($v['relationship_category_name'])>2){
                preg_match_all('/[A-Z]/', ucwords(strtolower($v['relationship_category_name'])), $matches);
                $contractresult['data'][$k]['relationship_category_short_name'] = implode('',$matches[0]);
            }else{
                $contractresult['data'][$k]['relationship_category_short_name'] = $v['relationship_category_name'];
            }
        }
        
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=> ["contributions" => $result, "contracts" => $contractresult]);
        $this->response($result, REST_Controller::HTTP_OK);
    
    }

    public function getStoredModules_get(){
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('contract_id', array('required'=>$this->lang->line('contract_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        //echo 'data'.print_r($data);
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
        }
        $result_array = array();
        $data['is_workflow']=0;
        $result = $this->Contract_model->getStoredModules($data);
        foreach($result as $k => $v){
            $module_info = $this->Project_model->getmoduleAndreview(array('id_module'=>$v['id_module']));
            if(count($module_info) > 0)
                $result[$k]['contract_review_id'] = pk_encrypt($module_info[0]['contract_review_id']);
                $result[$k]['id_contract_workflow'] = pk_encrypt($module_info[0]['id_contract_workflow']);
            $result[$k]['id_stored_module'] = pk_encrypt($v['id_stored_module']);
            $result[$k]['id_module'] = pk_encrypt($v['id_module']);
            //$get_workflow_id=$this->db->
            $result[$k]['is_review'] =1;
            $result[$k]['contract_workflow_id'] = !empty($module_info[0]['id_contract_workflow'])?pk_encrypt($module_info[0]['id_contract_workflow']):'';
            // if(count($this->User_model->custom_query('SELECT * FROM question WHERE topic_id in(SELECT id_topic from topic WHERE module_id='.$v['id_module'].')'))==0)
            //     unset($result[$k]);
        }
        $result_array['review'] = $result;
        $data['is_workflow']=1;
        $result = $this->Contract_model->getStoredModules($data);//echo '<pre>'.$this->db->last_query();exit;
        foreach($result as $k => $v){
            $module_info = $this->Project_model->getmoduleAndreview(array('id_module'=>$v['id_module']));
            $details =  $this->User_model->check_record('contract',array('id_contract'=>$data['contract_id']));
            if(!empty($module_info[0]['id_contract_workflow']) &&  $details[0]['type'] == 'project'){
                $project_subtasks=$this->Project_model->getprojectSubtasks(array('contract_id'=>$data['contract_id'],'contract_workflow_id'=>$module_info[0]['id_contract_workflow']));
                foreach($project_subtasks as $t=>$task){
                    $contract_progress_score=$this->calculateScoreAndProgress(array('id_contract_review'=>$task['id_contract_review'],'user_id'=>0));//new funcion for calculating  the score and contract progress
                    $project_subtasks[$t]['score']=$contract_progress_score['score'];
                    $project_subtasks[$t]['contract_progress']=$contract_progress_score['contract_progress'];
                    $project_subtasks[$t]['contract_id']  = pk_encrypt($project_subtasks[$t]['contract_id']);
                    $project_subtasks[$t]['id_contract_review']  = pk_encrypt($project_subtasks[$t]['id_contract_review']);
                    $project_subtasks[$t]['connected_contracts']=$cnt_names=[];
                    $cnt_names=$this->Project_model->getSubTaskMappedContracts(array('contract_workflow_id'=>$project_subtasks[$t]['id_contract_workflow']));
                    foreach($cnt_names as $c =>$ct){
                        // print_r($ct);exit;
                        $cnt_names[$c]['id_subtask_mapped_contracts']=pk_encrypt($cnt_names[$c]['id_subtask_mapped_contracts']);
                        $cnt_names[$c]['contract_workflow_id']=pk_encrypt($cnt_names[$c]['contract_workflow_id']);
                        $cnt_names[$c]['contract_id']=pk_encrypt($cnt_names[$c]['contract_id']);
                    }
                    $project_subtasks[$t]['connected_contracts']=$cnt_names;
                    $project_subtasks[$t]['id_contract_workflow']  = pk_encrypt($project_subtasks[$t]['id_contract_workflow']);
                    $project_subtasks[$t]['provider_id']  = pk_encrypt($project_subtasks[$t]['provider_id']);
                    // $connected_contracts = explode(',',$project_subtasks[$t]['connected_contract_id']);
                    // if(!empty($connected_contracts) && count($connected_contracts)>0)
                    // {
                    //     $contractDetails=$this->User_model->check_record_whereIn('contract','id_contract',$connected_contracts,'contract_name');
                    //     $project_subtasks[$t]['connected_contracts'] = array_column($contractDetails, 'contract_name');
                    // }
                }
                $result[$k]['project_subtasks']=$project_subtasks;
            }
            if(count($module_info) > 0)
                $result[$k]['contract_review_id'] = pk_encrypt($module_info[0]['contract_review_id']);
                $result[$k]['id_contract_workflow'] = pk_encrypt($module_info[0]['id_contract_workflow']);
            if($v['storeModuleContractWorkflowID'] > 0)
            {
                //task workflow name in calander
                $contractWorkflowDetails  =  $this->User_model->check_record('contract_workflow',array('id_contract_workflow'=>$v['storeModuleContractWorkflowID']));
                if(!empty($contractWorkflowDetails))
                {
                    $result[$k]['calander_workflow_name'] = $contractWorkflowDetails[0]['workflow_name'];
                }
                else
                {
                    $result[$k]['calander_workflow_name'] = ''; 
                }
            }
            else
            {
                $result[$k]['calander_workflow_name'] = ''; 
            }
            $result[$k]['id_stored_module'] = pk_encrypt($v['id_stored_module']);
            $result[$k]['id_module'] = pk_encrypt($v['id_module']);
            $result[$k]['is_task'] = 1;
            $result[$k]['contract_workflow_id'] = !empty($module_info[0]['id_contract_workflow'])?pk_encrypt($module_info[0]['id_contract_workflow']):'';
        }
        // $project_subtasks=$this->Project_model->getprojectSubtasks(array('contract_id'=>$data['contract_id']));
        // foreach($project_subtasks as $t=>$task){
        //     print_r($task['id_contract_review']>0);exit;
        //     if($task['id_contract_review']>0){
        //         $contract_progress_score=$this->calculateScoreAndProgress(array('id_contract_review'=>$contract_workflow[$k]['id_contract_review'],'user_id'=>0));//new funcion for calculating  the score and contract progress
        //         $review_workflow_data[$k+1]['score']=$contract_progress_score['score'];
        //         $review_workflow_data[$k+1]['contract_progress']=$contract_progress_score['contract_progress'];
        //     }
        // }
        $result_array['workflow'] = $result;
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=> $result_array);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function updateStoredModule_post(){
        $data = $this->input->post();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        $this->form_validator->add_rules('id_stored_module', array('required'=>$this->lang->line('id_stored_module_req')));
        $this->form_validator->add_rules('activate_in_next_review', array('required'=>$this->lang->line('activate_in_next_review_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['id_stored_module'])) {
            $data['id_stored_module'] = pk_decrypt($data['id_stored_module']);
        }

        if(isset($data['date'])){
            $data['activate_in_next_review'] = 1;// if date is set === it is planned for next execution 
            $stored_module = $this->User_model->check_record('stored_modules',array('id_stored_module'=>$data['id_stored_module']));
            
            $contract_workflow = 'SELECT cw.* from contract_workflow cw JOIN contract_review cr on cw.id_contract_workflow = cr.contract_workflow_id JOIN module m on m.contract_review_id = cr.id_contract_review WHERE contract_review_id > 0 AND m.is_workflow = 1 AND m.id_module = '.$stored_module[0]['module_id'];
            
            $contract_workflow = $this->User_model->custom_query($contract_workflow);


            $calendar = $this->User_model->check_record('calender',array('id_calender'=>$contract_workflow[0]['calender_id']));

            //Creating a new calender planning 
            $calendar[0]['contract_id'] = $contract_workflow[0]['contract_id'];//Assigning one contract id 
            $calendar[0]['created_on'] = currentDate();//Assigning created on time 
            $calendar[0]['created_by'] = $this->session_user_id;//Assigning created by user
            $calendar[0]['updated_on'] = null;//Assigning null 
            $calendar[0]['updated_by'] = null;//Assigning null
            $calendar[0]['date'] = $data['date'];//Assigning date
            $calendar[0]['recurrence_till'] = $data['date'];//Assigning date
            $calendar[0]['status'] = 1;//Assigning date
            
            unset($calendar[0]['id_calender']);//removing id_calender to insert remaining data again as new planning calender entry.

            $this->User_model->update_data('stored_modules',array('status'=>0,'next_plan'=>$data['date']),array('id_stored_module'=>$data['id_stored_module']));//Updating the next planned date in storedmodule to prepopulate in manage-stored module.

            $calender_insert_id = $this->User_model->insert_data('calender',$calendar[0]);
            //Creating a new contract workflow record
            if($calender_insert_id > 0){
                // unset($contract_workflow[0]['id_contract_workflow']);
                // unset($contract_workflow[0]['reminder_date1']);
                // unset($contract_workflow[0]['reminder_date2']);
                // unset($contract_workflow[0]['reminder_date3']);
                // $contract_workflow[0]['updated_on'] = null;//Assigning null 
                // $contract_workflow[0]['updated_by'] = null;//Assigning null
                // $contract_workflow[0]['created_on'] = currentDate();//Assigning created on time 
                // $contract_workflow[0]['created_by'] = $this->session_user_id;//Assigning created by user
                // $contract_workflow[0]['workflow_status'] = 'new';//Assigning workflow_status new
                // $contract_workflow[0]['status'] = 1;//Assigning status 1
                // $contract_workflow[0]['Execute_by'] = $data['date'];//Assigning date
                //Updating the status of the contract_workflow to 0
                //$workflow_update_id = $this->User_model->insert_data('contract_workflow',$contract_workflow[0]);

                // Updating the new calender id and new date in contract workflow instead of creating new workflow.
                $workflow_update_id = $this->User_model->update_data('contract_workflow',array('status'=>1,'workflow_status'=>'new','calender_id'=>$calender_insert_id,'Execute_by' => $data['date'],'created_on'=>currentDate()),array('id_contract_workflow'=>$contract_workflow[0]['id_contract_workflow']));
                if($workflow_update_id > 0){
                    //nothing to do.
                }else{
                    $result = array('status'=>FALSE, 'message' => $this->lang->line('workflow_not_updated'), 'data'=> []);
                    $this->response($result, REST_Controller::HTTP_OK);
                }
            }else{
                $result = array('status'=>FALSE, 'message' => $this->lang->line('calender_not_created'), 'data'=> []);
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }

        $this->User_model->update_data('stored_modules',array('activate_in_next_review'=>$data['activate_in_next_review']),array('id_stored_module'=>$data['id_stored_module']));
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=> []);
        $this->response($result, REST_Controller::HTTP_OK);
    }
    public function allContractList_get()
    {
        $data = $this->input->get();

        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($data['customer_id']!=$this->session_user_info->customer_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'1');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'3');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['business_unit_id']) && strtolower($data['business_unit_id'])!='all') {
            $data['id_business_unit'] = pk_decrypt($data['business_unit_id']);
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            if($this->session_user_info->user_role_id != 7)
            if(!in_array($data['id_business_unit'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'4');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['delegate_id'])) {
            $data['delegate_id'] = pk_decrypt($data['delegate_id']);
            if(!in_array($data['delegate_id'],$this->session_user_delegates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'5');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['relationship_category_id'])) {
            $data['relationship_category_id'] = pk_decrypt($data['relationship_category_id']);
        }
        if(isset($data['contract_owner_id'])) {
            $data['contract_owner_id'] = pk_decrypt($data['contract_owner_id']);
            if(!in_array($data['contract_owner_id'],$this->session_user_customer_all_users)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'6');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(in_array($this->session_user_info->user_role_id,array(3,4,8))){
            $business_unit = $this->Business_unit_model->getBusinessUnitUser(array('user_id' => $data['id_user'],'status' => '1'));
            $data['business_unit_id'] = array_map(function($i){ return $i['id_business_unit']; },$business_unit);
            $data['session_user_role']=$this->session_user_info->user_role_id;
            $data['session_user_id']=$this->session_user_id;
        }
        if($this->session_user_info->user_role_id==6){
            $data['business_unit_id'] = $this->session_user_business_units;
            if(count($data['business_unit_id'])==0 && $this->session_user_info->is_allow_all_bu==0)
            {
                $data['business_unit_id']=array(0);
            }
        }
        if($this->session_user_info->user_role_id == 7){
            $data['provider_id'] = $this->session_user_info->provider;
        }
        if(isset($data['provider_id'])) {
            $data['provider_id'] = pk_decrypt($data['provider_id']);
        }
        
        if(isset($data['parent_contract_id'])) {
            $data['parent_contract_id'] = pk_decrypt($data['parent_contract_id']);
            if($this->session_user_info->user_role_id == 4){
                $data['delegate_id'] = $this->session_user_id;
            }
        }
        if(count($data['business_unit_id'])==0)
            unset($data['business_unit_id']);

        /*helper function for ordering smart table grid options*/
        //echo '<pre>'.print_r($data);exit;
        $data = tableOptions($data);
        if(strlen($data['advancedsearch_get'])>2) 
            $data['advancedsearch_get']=json_decode($data['advancedsearch_get']);
        else
            $data['advancedsearch_get']=false;

        /////////////////// advanced filters start//////////////////
        if(isset($data['is_advance_filter']) && $data['is_advance_filter'] == 1)
        {
            $get_filters=$this->User_model->getFilter(array('status'=>1,'user_id'=>$this->session_user_info->id_user,'module'=>'all_contracts_list','is_union_table'=>0));
            $data['adv_filters']=$get_filters;
            $get_union_filters=$this->User_model->getFilter(array('status'=>1,'user_id'=>$this->session_user_info->id_user,'module'=>'all_contracts_list','is_union_table'=>1));
            // echo $this->db->last_query();exit;
            $data['adv_union_filters']=$get_union_filters;
        }
        /////////////////// advanced filters end//////////////////
        $data['type']='contract';
        $data['get_all_records'] =true;
        $result = $this->Contract_model->getAllContractList($data);//echo $this->db->last_query();exit;
        for($s=0;$s<count($result['data']);$s++) //parent contracts
        {
            //due to union query we wear getting error with same column name. that's why we are managing one column without changing old code.
            $result['data'][$s]['provider_name'] = $result['data'][$s]['providerName'];
            unset($result['data'][$s]['providerName']);

            //Spentline Projected amount correction
            $contract_info = $this->User_model->check_record_selected('id_contract,currency_id,contract_value,contract_value_period,po_number,additional_recurring_fees,additional_recurring_fees_period,additonal_one_off_fees,contract_start_date,contract_end_date,TIMESTAMPDIFF(MONTH,contract_start_date,contract_end_date) months','contract',array('id_contract'=>$result['data'][$s]['id_contract']));//echo $this->db->last_query();exit;
            $graph = $this->spent_mngment_graph('spent_line','Actual Spent',$contract_info[0]);
            $result['data'][$s]['Projected_value'] = array_sum(array_map(function($i){ return (int)$i->data[0]->value;},$graph->dataset));
            if(strlen($result['data'][$s]['relationship_category_name'])>2){
                preg_match_all('/[A-Z]/', ucwords(strtolower($result['data'][$s]['relationship_category_name'])), $matches);
                $result['data'][$s]['relationship_category_short_name'] = implode('',$matches[0]);
            }else{
                $result['data'][$s]['relationship_category_short_name'] = $result['data'][$s]['relationship_category_name'];
            }

            //Assigning id_contract_review to 0 if the contract status is not in progress
            if(!($result['data'][$s]['contract_review_status'] == 'review in progress' || $result['data'][$s]['contract_review_status'] == 'workflow in progress' || $result['data'][$s]['contract_review_status'] == 'finished'))
                $result['data'][$s]['id_contract_review'] = '0';
            $action_data = array('id_contract' => $result['data'][$s]['id_contract']);
            if (isset($data['id_user']))
                $action_data['id_user'] = $data['id_user'];
            if (isset($data['user_role_id']))
                $action_data['user_role_id'] = $data['user_role_id'];
            $action_data['item_status'] = 1;
            //$action_data['id_contract_review'] = $review[0]['id_contract_review'];
            $action_data['responsible_user_id'] = $data['id_user'];
            $action_data['status'] = 'open';
            //getting action items count of a recent review
            // print_r($action_data);exit;
            $result['data'][$s]['action_item_count'] = count($this->Contract_model->getContractReviewActionItemsList($action_data));
            //// echo $this->db->last_query();exit;
            //// $query = 'SELECT *FROM calender WHERE FIND_IN_SET("'.$result['data'][$s]['id_contract'].'", contract_id) AND is_workflow=0';
            //// $get_contract_review_name=$this->User_model->custom_query($query);
            // $get_contract_review_name = $this->Contract_model->check_contract_in_calender(
            //     array(
            //         'contract_id' => $result['data'][$s]['id_contract'],
            //         'business_unit_id' => $result['data'][$s]['business_unit_id'],
            //         'relationship_category_id' => $result['data'][$s]['relationship_category_id'],
            //         'provider_id' => $result['data'][$s]['provider_id'],
            //         'is_workflow' => 0
            //     ));//echo $this->db->last_query();exit;
            // $contract_review_data['activity_name']=$get_contract_review_name[0]['workflow_name'];
            // $get_contract_review_id = $this->User_model->check_record('contract_review',array('contract_id'=>$result['data'][$s]['id_contract'],'is_workflow'=>'0','contract_review_status'=>'review in progress'));
            // $validation_info = '';
            // if(!empty($get_contract_review_id[0]['id_contract_review']))
            // { 
            //     $validatorsmodules = $this->Contract_model->getValidatormodules(array('contract_review_id'=>$get_contract_review_id[0]['id_contract_review'],'contribution_type'=>1)); //getting validator modules 
            //     $validator_exists=count($validatorsmodules)>0?true:false;
            //     if($validator_exists)
            //     {
            //         $progress_task_reviews=$this->calculateScoreAndProgress(array('id_contract_review'=>$get_contract_review_id[0]['id_contract_review'],'user_id'=>0));
            //         $validation_info = 1;
            //         if(str_replace('%','',$progress_task_reviews['contract_progress'])=='100'){
            //             $validation_info = 4;
            //         }
            //         if((int)$get_contract_review_id[0]['validation_status'] == 2)
            //         {
            //             $validation_info = 2;
            //         }
            //         elseif((int)$get_contract_review_id[0]['validation_status'] == 3)
            //         {
            //             $validation_info = 3; 
            //         }
            //     }
            // }
            // $contract_review_data['validation_info']=$validation_info;
            // $contract_review_data['contract_workflow_id']=pk_encrypt($get_contract_review_id[0]['contract_workflow_id']);
            // $contract_progress_score=$this->calculateScoreAndProgress(array('id_contract_review'=>$get_contract_review_id[0]['id_contract_review'],'user_id'=>0));//new funcion for calculating  the score and contract progress
            // $contract_review_data['score']=$contract_progress_score['score'];
            // $contract_review_data['contract_progress']=$contract_progress_score['contract_progress'];
            // $contract_review_data['id_contract_review']=pk_encrypt($get_contract_review_id[0]['id_contract_review']);
            // $contract_review_data['id_contract']=pk_encrypt($result['data'][$s]['id_contract']);
            // $contract_review_data['is_workflow']=0;
            // $contract_review_data['initiated']=count($get_contract_review_id)>0?true:false;
            // $contract_review_data['validation_status']=isset($get_contract_review_id[0]['validation_status'])?$get_contract_review_id[0]['validation_status']:0;//for disable the access of review which is in validation on going
            // $review_workflow_data[0]=$contract_review_data;
            // unset($contract_review_data);
            // $contract_workflow = $this->Contract_model->getcontractworkflow(array('contract_id'=>$result['data'][$s]['id_contract'],'contract_review_status_not'=>'finished'));
          
            $query = 'SELECT *FROM calender WHERE FIND_IN_SET("'.$result['data'][$s]['id_contract'].'", contract_id) AND is_workflow=0 and status=1 and date>=CURRENT_DATE()';
            $review_exitst_incaledar=$this->User_model->custom_query($query);
            $check_review_inprogress=array();
            $check_review_inprogress=$this->User_model->check_record('contract_review',array('contract_id'=>$result['data'][$s]['id_contract'],'is_workflow'=>0,'contract_review_status'=>'review in progress'));
            // print_r($review_exitst_incaledar);
            // print_r($check_review_inprogress);exit;
            if(!empty($review_exitst_incaledar) || !empty($check_review_inprogress)){
                $result['data'][$s]['is_review_exists_incalendar']='1';
            }
            else{
                $result['data'][$s]['is_review_exists_incalendar']='0';            
                if($result['data'][$s]['can_review']==0){
                    $result['data'][$s]['is_review_exists_incalendar']='1';            
                }
            }
            $result['data'][$s]['is_workflow_exists_incalendar']='0';
            // $query = 'SELECT *FROM calender WHERE FIND_IN_SET("'.$result['data'][$s]['id_contract'].'", contract_id) AND is_workflow=1 and status=1';
            // $workflow_exitst_incaledar=$this->User_model->custom_query($query);
            // if(!empty($workflow_exitst_incaledar) && $result['data'][$s]['can_review']==0){
            //     $result['data'][$s]['is_workflow_exists_incalendar']='1';
            // }
            // else{
            //     $result['data'][$s]['is_workflow_exists_incalendar']='0';
            //     if($result['data'][$s]['can_review']==0){
            //     }
            // }
            //check review and workfow exit in calender end
            // echo $this->db->last_query();exit;
            //     foreach($contract_workflow as $k=>$v){
            //         //  print_r($contract_workflow);exit;
            //         $validation_info = '';
            //         if(!empty($contract_workflow[$k]['id_contract_review']))
            //         { 
            //             $validatorsmodules =array();
            //             $contract_review_details= array();
            //             $contract_review_details = $this->User_model->check_record("contract_review",array("id_contract_review"=>$contract_workflow[$k]['id_contract_review']));
            //             $validatorsmodules = $this->Contract_model->getValidatormodules(array('contract_review_id'=>$contract_workflow[$k]['id_contract_review'],'contribution_type'=>1));
            //             $validator_exists=count($validatorsmodules)>0?true:false;
            //             if($validator_exists)
            //             {
            //                 $validation_info = 1;
            //                 $progress_task_reviews=$this->calculateScoreAndProgress(array('id_contract_review'=>$contract_workflow[$k]['id_contract_review'],'user_id'=>0));
            //                 if(str_replace('%','',$progress_task_reviews['contract_progress'])=='100'){
            //                     $validation_info = 4;
            //                 }
            //                 if($contract_review_details[0]['validation_status'] == 2)
            //                 {
            //                     $validation_info = 2;
            //                 }
            //                 elseif($contract_review_details[0]['validation_status'] == 3)
            //                 {
            //                     $validation_info = 3; 
            //                 }
            //             }
            //         }
            //         $review_workflow_data[$k+1]['validation_info']=$validation_info;
            //         $review_workflow_data[$k+1]['activity_name']=$v['review_name'];
            //         $contract_progress_score=$this->calculateScoreAndProgress(array('id_contract_review'=>$contract_workflow[$k]['id_contract_review'],'user_id'=>0));//new funcion for calculating  the score and contract progress
            //         $review_workflow_data[$k+1]['score']=$contract_progress_score['score'];
            //         $review_workflow_data[$k+1]['contract_progress']=$contract_progress_score['contract_progress'];
            //         $review_workflow_data[$k+1]['id_contract_workflow']=pk_encrypt($contract_workflow[$k]['id_contract_workflow']);
            //         $review_workflow_data[$k+1]['id_contract_review']=pk_encrypt($contract_workflow[$k]['id_contract_review']);
            //         $review_workflow_data[$k+1]['is_workflow']=1;
            //         $review_workflow_data[$k+1]['id_contract']=pk_encrypt($result['data'][$s]['id_contract']);
            //         $review_workflow_data[$k+1]['validation_status']=isset($contract_workflow[$k]['validation_status'])?$contract_workflow[$k]['validation_status']:0;//for disable the access of workflow which is in validation on going
            //         if(isset($contract_workflow[$k]['workflow_status']) && $contract_workflow[$k]['workflow_status']=='workflow in progress'){
            //             $review_workflow_data[$k+1]['initiated']=true;
            //         }
            //         else{
            //             $review_workflow_data[$k+1]['initiated']=false;
            //         }
                
            //     }
            // //     if($result['data'][$s]['contract_name']=='Agenion12')
            // //    {
            // //       print_r($review_workflow_data);exit;
            // //    }
            //     //print_r($review_workflow_data);exit;
            //     $result['data'][$s]['review_or_workflow']=$review_workflow_data;
            //     unset($review_workflow_data);
            //print_r($result['data'][$s]['review_or_workflow']);exit;
            ///Assigning edit access for contracts
            $result['data'][$s]['ieaaei'] = 'annus';
            //checking is customer admin
            if(isset($data['user_role_id']) && $data['user_role_id'] == 2) {
                $result['data'][$s]['ieaaei'] = 'itako';
            }//chechking is contract created_by or contract_owner
            else if($data['id_user'] == $result['data'][$s]['created_by'] || $data['id_user'] == $result['data'][$s]['contract_owner_id']) {
                $result['data'][$s]['ieaaei'] = 'itako';
            }
            $result['data'][$s]['ideedi']=count($this->User_model->check_record('contract_review_discussion',array('contract_review_id'=>$result['data'][$s]['id_contract_review'],'discussion_status'=>1)))>0?"itako":'annus';
            /*
              Previous Can_access Condition
                if($this->session_user_info->user_role_id == 2 || $this->session_user_info->user_role_id == 6)
                    $result['data'][$s]['can_access']=1;
                else if($this->session_user_info->user_role_id == 3 && count($this->User_model->check_record('contract',array('id_contract'=>$result['data'][$s]['id_contract'],'contract_owner_id'=>$this->session_user_id)))>0)
                    $result['data'][$s]['can_access']=1;
                else if($this->session_user_info->user_role_id == 4 && count($this->User_model->check_record('contract',array('id_contract'=>$result['data'][$s]['id_contract'],'delegate_id'=>$this->session_user_id)))>0)
                    $result['data'][$s]['can_access']=1;
                else if($this->session_user_info->user_role_id == 7 && count($this->User_model->check_record('contract_user',array('contract_id'=>$result['data'][$s]['id_contract'],'status'=>1,'user_id'=>$this->session_user_id)))>0)
                    $result['data'][$s]['can_access']=1;
                else
                    $result['data'][$s]['can_access']=0;
             */
            $contract_progress_score=$this->calculateScoreAndProgress(array('id_contract_review'=>$result['data'][$s]['id_contract_review'],'user_id'=>0));//new funcion for calculating  the score and contract progress
            $result['data'][$s]['contract_progress']=$contract_progress_score['contract_progress'];
            $result['data'][$s]['score']=$contract_progress_score['score'];
            $result['data'][$s]['business_unit_id']=pk_encrypt($result['data'][$s]['business_unit_id']);
            $result['data'][$s]['classification_id']=pk_encrypt($result['data'][$s]['classification_id']);
            $result['data'][$s]['contract_owner_id']=pk_encrypt($result['data'][$s]['contract_owner_id']);
            $result['data'][$s]['created_by']=pk_encrypt($result['data'][$s]['created_by']);
            $result['data'][$s]['currency_id']=pk_encrypt($result['data'][$s]['currency_id']);
            $result['data'][$s]['id_contract']=pk_encrypt($result['data'][$s]['id_contract']);
            $result['data'][$s]['contract_id']=pk_encrypt($result['data'][$s]['contract_id']);
            $result['data'][$s]['relationship_category_id']=pk_encrypt($result['data'][$s]['relationship_category_id']);
            $result['data'][$s]['updated_by']=pk_encrypt($result['data'][$s]['updated_by']);
            if($result['data'][$s]['id_contract_review'] == '0')//Encrypting if value is not = '0' 
                $result['data'][$s]['id_contract_review'] = null;
            else
                $result['data'][$s]['id_contract_review']=pk_encrypt($result['data'][$s]['id_contract_review']);
            $result['data'][$s]['parent_contract_id']=pk_encrypt($result['data'][$s]['parent_contract_id']);

            $result['data'][$s]['template_id']=pk_encrypt($result['data'][$s]['template_id']);
            $result['data'][$s]['id_template']=pk_encrypt($result['data'][$s]['id_template']);
            $result['data'][$s]['workflow_id']=pk_encrypt($result['data'][$s]['workflow_id']);
            $result['data'][$s]['id_contract_workflow']=pk_encrypt($result['data'][$s]['id_contract_workflow']);
            
            if((int)$result['data'][$s]['can_review'] == 0 && (int)$result['data'][$s]['is_workflow']==0){
                $result['data'][$s]['is_workflow'] = null;
                $result['data'][$s]['review_name'] = null;
            }
            $result['data'][$s]['sub_parent_contract_name'] = "";
            if($result['data'][$s]['hierarchy']=="sub"){
                $result['data'][$s]['sub_parent_contract_name'] = " Sub Agreement to ". $result['data'][$s]['parent_contract_name'];
            }

        }
        unset($data['hierarchy']);
        unset($data['adv_filters']);
        unset($data['adv_union_filters']);
        unset($data['pagination']);
            for($s = 0;$s<count($result['data']); $s++) //sub contracts
            {
                
                $data['parent_contract_id'] = pk_decrypt($result['data'][$s]['id_contract']);
                if($data['parent_contract_id'] > 0){
                    //print_r(pk_decrypt($result['data'][$s]));exit;
                    //while getting sub-contracts, if parent contract has workflow then in sub-contract also displaying. actually it should not display.
                    //that is why we are passing one more param called 'workflowName_null' to avoid workflow record.
                    $result['data'][$s]['sub_contracts'] = $this->Contract_model->getAllContractList($data);
                    // if($result['data'][$s]['contract_name']=='Center of Excellence')
                    // {
                    // echo $this->db->last_query();exit;
                    // }   
                    // print_r($result['data'][$s]['sub_contracts']);exit;
                    // echo $this->db->last_query();exit;
                    $sub_contracts = $result['data'][$s]['sub_contracts']['data'];
                    // print_r($sub_contracts);exit;
                
                    for($t = 0; $t < count($sub_contracts); $t++){
                        //due to union query we wear getting error with same column name. that's why we are managing one column without changing old code.                        
                        $contract_info = $this->User_model->check_record_selected('id_contract,currency_id,contract_value,contract_value_period,po_number,additional_recurring_fees,additional_recurring_fees_period,additonal_one_off_fees,contract_start_date,contract_end_date,TIMESTAMPDIFF(MONTH,contract_start_date,contract_end_date) months','contract',array('id_contract'=>$sub_contracts[$t]['id_contract']));
                        $graph = $this->spent_mngment_graph('spent_line','Actual Spent',$contract_info[0]);
                        $sub_contracts[$t]['Projected_value'] = array_sum(array_map(function($i){ return (int)$i->data[0]->value;},$graph->dataset));

                        $sub_contracts[$t]['provider_name'] = $sub_contracts[$t]['providerName'];
                        unset($sub_contracts[$t]['providerName']);

                        
                        if(strlen($sub_contracts[$t]['relationship_category_name'])>2){
                            preg_match_all('/[A-Z]/', ucwords(strtolower($sub_contracts[$t]['relationship_category_name'])), $matches);
                            $sub_contracts[$t]['relationship_category_short_name'] = implode('',$matches[0]);
                        }else{
                            $sub_contracts[$t]['relationship_category_short_name'] = $sub_contracts[$t]['relationship_category_name'];
                        }

                        //Assigning id_contract_review to 0 if the contract status is not in progress
                        if(!($sub_contracts[$t]['contract_review_status'] == 'workflow in progress' || $sub_contracts[$t]['contract_review_status'] == 'review in progress' || $sub_contracts[$t]['contract_review_status'] == 'finished'))
                            $sub_contracts[$t]['id_contract_review'] = '0';

                        
                        //getting action items of a recent review based on user role
                        $action_data = array('id_contract' => $sub_contracts[$t]['id_contract']);
                        if (isset($data['id_user']))
                            $action_data['id_user'] = $data['id_user'];
                        if (isset($data['user_role_id']))
                            $action_data['user_role_id'] = $data['user_role_id'];
                        $action_data['item_status'] = 1;
                        //$action_data['id_contract_review'] = $review[0]['id_contract_review'];
                        $action_data['responsible_user_id'] = $data['id_user'];
                        $action_data['status'] = 'open';
                        //getting action items count of a recent review
                        $sub_contracts[$t]['action_item_count'] = count($this->Contract_model->getContractReviewActionItemsList($action_data));
                            // $query = 'SELECT *FROM calender WHERE FIND_IN_SET("'.$sub_contracts[$t]['id_contract'].'", contract_id) AND is_workflow=0';
                            // $get_contract_review_name=$this->User_model->custom_query($query);

                            
                            // $get_contract_review_name = $this->Contract_model->check_contract_in_calender(
                            //     array(
                            //         'contract_id' => $sub_contracts[$t]['id_contract'],
                            //         'business_unit_id' => $sub_contracts[$t]['business_unit_id'],
                            //         'relationship_category_id' => $sub_contracts[$t]['relationship_category_id'],
                            //         'provider_id' => $sub_contracts[$t]['provider_id'],
                            //         'is_workflow' => 0
                            //     ));
                            // //print_r($get_contract_review_name);exit;
                            // $contract_review_data['activity_name']=$get_contract_review_name[0]['workflow_name'];
                            // $get_contract_review_id = $this->User_model->check_record('contract_review',array('contract_id'=>$sub_contracts[$t]['id_contract'],'is_workflow'=>'0','contract_review_status'=>'review in progress'));
                            // $validation_info = '';
                            // if(!empty($get_contract_review_id[0]['id_contract_review']))
                            // { 
                            //     $validatorsmodules = $this->Contract_model->getValidatormodules(array('contract_review_id'=>$get_contract_review_id[0]['id_contract_review'],'contribution_type'=>1)); //getting validator modules 
                            //     // echo $this->db->last_query();exit;
                            //     $validator_exists=count($validatorsmodules)>0?true:false;
                            //     if($validator_exists)
                            //     {
                            //         $validation_info = 1;
                            //         $progress_task_reviews=$this->calculateScoreAndProgress(array('id_contract_review'=>$get_contract_review_id[0]['id_contract_review'],'user_id'=>0));
                            //         if(str_replace('%','',$progress_task_reviews['contract_progress'])=='100'){
                            //             $validation_info = 4;
                            //         }
                            //         if((int)$get_contract_review_id[0]['validation_status'] == 2)
                            //         {
                            //             $validation_info = 2;
                            //         }
                            //         elseif((int)$get_contract_review_id[0]['validation_status'] == 3)
                            //         {
                            //             $validation_info = 3; 
                            //         }
                            //     }
                            // }
                            // $contract_review_data['validation_info']=$validation_info;
                            // $contract_progress_score=$this->calculateScoreAndProgress(array('id_contract_review'=>$get_contract_review_id[0]['id_contract_review'],'user_id'=>0));//new funcion for calculating  the score and contract progress
                            // $contract_review_data['score']=$contract_progress_score['score'];
                            // $contract_review_data['contract_progress']=$contract_progress_score['contract_progress'];
                            // $contract_review_data['id_contract_review']=pk_encrypt($get_contract_review_id[$k]['id_contract_review']);
                            // $contract_review_data['is_workflow']=0;
                            // $contract_review_data['id_contract']=pk_encrypt($sub_contracts[$t]['id_contract']);
                            // $contract_review_data['initiated']=true;
                            // $contract_review_data['validation_status']=isset($get_contract_review_id[0]['validation_status'])?$get_contract_review_id[0]['validation_status']:0;// disable the access of review which is in validation on going for sub contract
                            // $contract_review_data['contract_workflow_id']=pk_encrypt($get_contract_review_id[0]['contract_workflow_id']);
                            
                            // $review_workflow_data[0]=$contract_review_data;
                            // unset($contract_review_data);
                            // // $query = 'SELECT *FROM calender WHERE FIND_IN_SET("'.$sub_contracts[$t]['id_contract'].'", contract_id) AND is_workflow=1';
                            // // $get_workflow_data=$this->User_model->custom_query($query);
                            // $contract_workflow = $this->Contract_model->getcontractworkflow(array('contract_id'=>$sub_contracts[$t]['id_contract'],'contract_review_status_not'=>'finished'));
                            // //print_r($contract_workflow[0]['id_contract_workflow']);exit;
                            // foreach($contract_workflow as $k=>$v){
                            //     $validation_info = '';
                            //     if(!empty($contract_workflow[$k]['id_contract_review']))
                            //     { 
                            //         $validatorsmodules =array();
                            //         $contract_review_details= array();
                            //         $contract_review_details = $this->User_model->check_record("contract_review",array("id_contract_review"=>$contract_workflow[$k]['id_contract_review']));
                            //         $validatorsmodules = $this->Contract_model->getValidatormodules(array('contract_review_id'=>$contract_workflow[$k]['id_contract_review'],'contribution_type'=>1));
                            //         $validator_exists=count($validatorsmodules)>0?true:false;
                            //         if($validator_exists)
                            //         {
                            //             $validation_info = 1;
                            //             $progress_task_reviews=$this->calculateScoreAndProgress(array('id_contract_review'=>$contract_workflow[$k]['id_contract_review'],'user_id'=>0));
                            //             if(str_replace('%','',$progress_task_reviews['contract_progress'])=='100'){
                            //                 $validation_info = 4;
                            //             }
                            //             if((int)$contract_review_details[0]['validation_status'] == 2)
                            //             {
                            //                 $validation_info = 2;
                            //             }
                            //             elseif((int)$contract_review_details[0]['validation_status'] == 3)
                            //             {
                            //                 $validation_info = 3; 
                            //             }
                            //         }
                            //     }
                            //     $review_workflow_data[$k+1]['validation_info']=$validation_info;
                            //     $review_workflow_data[$k+1]['activity_name']=$v['review_name'];
                            //     $review_workflow_data[$k+1]['id_contract_workflow']=pk_encrypt($contract_workflow[$k]['id_contract_workflow']);
                            //     $review_workflow_data[$k+1]['is_workflow']=1;
                            //     $contract_progress_score=$this->calculateScoreAndProgress(array('id_contract_review'=>$contract_workflow[$k]['id_contract_review'],'user_id'=>0));//new funcion for calculating  the score and contract progress
                            //     $review_workflow_data[$k+1]['score']=$contract_progress_score['score'];
                            //     $review_workflow_data[$k+1]['contract_progress']=$contract_progress_score['contract_progress'];
                            //     $review_workflow_data[$k+1]['id_contract_review']=pk_encrypt($contract_workflow[$k]['id_contract_review']);

                            //     //$review_workflow_data[$k+1]['id_contract']=pk_encrypt($sub_contracts[$t]['id_contract']);
                            //     $review_workflow_data[$k+1]['id_contract']=$sub_contracts[$t]['id_contract'];
                            //     $review_workflow_data[$k+1]['validation_status']=isset($contract_workflow[$k]['validation_status'])?$contract_workflow[$k]['validation_status']:0;//disable the access of workflow which is in validation on going for sub contract

                            //     if(isset($contract_workflow[$k]['workflow_status']) && $contract_workflow[$k]['workflow_status']=='workflow in progress'){
                            //         $review_workflow_data[$k+1]['initiated']=true;
                            //     }
                            //     else{
                            //         $review_workflow_data[$k+1]['initiated']=false;
                            //     }
                            // }
                            // $sub_contracts[$t]['review_or_workflow']=$review_workflow_data;


                            unset($review_workflow_data);
                        ///Assigning edit access for contracts
                        $sub_contracts[$t]['ieaaei'] = 'annus';
                        //checking is customer admin
                        if(isset($data['user_role_id']) && $data['user_role_id'] == 2) {
                            $sub_contracts[$t]['ieaaei'] = 'itako';
                        }//chechking is contract created_by or contract_owner
                        else if($data['id_user'] == $sub_contracts[$t]['created_by'] || $data['id_user'] == $sub_contracts[$t]['contract_owner_id']) {
                            $sub_contracts[$t]['ieaaei'] = 'itako';
                        }
                        // $sub_contracts[$t]['ideedi']=count($this->Contract_model->getContractDiscussion(array('id_contract'=>$sub_contracts[$t]['id_contract'],'discussion_status'=>1)))>0?"itako":'annus';
                        $sub_contracts[$t]['ideedi']=count($this->User_model->check_record('contract_review_discussion',array('contract_review_id'=>$sub_contracts[$t]['id_contract_review'],'discussion_status'=>1)))>0?"itako":'annus';
                        /**
                         * Previous Can_access Condition
                            if($this->session_user_info->user_role_id == 2 || $this->session_user_info->user_role_id == 6)
                                $sub_contracts[$t]['can_access']=1;
                            else if($this->session_user_info->user_role_id == 3 && count($this->User_model->check_record('contract',array('id_contract'=>$sub_contracts[$t]['id_contract'],'contract_owner_id'=>$this->session_user_id)))>0)
                                $sub_contracts[$t]['can_access']=1;
                            else if($this->session_user_info->user_role_id == 4 && count($this->User_model->check_record('contract',array('id_contract'=>$sub_contracts[$t]['id_contract'],'delegate_id'=>$this->session_user_id)))>0)
                                $sub_contracts[$t]['can_access']=1;
                            else if($this->session_user_info->user_role_id == 7 && count($this->User_model->check_record('contract_user',array('contract_id'=>$sub_contracts[$t]['id_contract'],'status'=>1,'user_id'=>$this->session_user_id)))>0)
                                $sub_contracts[$t]['can_access']=1;
                            else
                                $sub_contracts[$t]['can_access']=0;
                         */


                        $query = 'SELECT *FROM calender WHERE FIND_IN_SET("'.$sub_contracts[$t]['id_contract'].'", contract_id) AND is_workflow=0 and status=1 and date>=CURRENT_DATE()';
                        $review_exitst_incaledar=$this->User_model->custom_query($query);
                        $check_review_inprogress=array();
                        $check_review_inprogress=$this->User_model->check_record('contract_review',array('contract_id'=>$sub_contracts[$t]['id_contract'],'is_workflow'=>0,'contract_review_status'=>'review in progress'));
                        if(!empty($review_exitst_incaledar) || !empty($check_review_inprogress)){
                            $sub_contracts[$t]['is_review_exists_incalendar']='1';
                        }
                        else{
                            $sub_contracts[$t]['is_review_exists_incalendar']='0';
                            if($sub_contracts[$t]['can_review']==0){
                                $sub_contracts[$t]['is_review_exists_incalendar']='1';
                            }
                        }
                        $query = 'SELECT *FROM calender WHERE FIND_IN_SET("'.$sub_contracts[$t]['id_contract'].'", contract_id) AND is_workflow=1 and status=1';
                        $workflow_exitst_incaledar=$this->User_model->custom_query($query);
                        $sub_contracts[$t]['is_workflow_exists_incalendar']='0';                        
                        // if(!empty($workflow_exitst_incaledar) && $sub_contracts[$t]['can_review']==0){
                        //     $sub_contracts[$t]['is_workflow_exists_incalendar']='0';
                        // }
                        // else{
                        //     $sub_contracts[$t]['is_workflow_exists_incalendar']='0';
                        //     if($sub_contracts[$t]['can_review']==0){
                        //         $sub_contracts[$t]['is_workflow_exists_incalendar']='1';
                        //     }
                        // }
                        $sub_contracts[$t]['business_unit_id']=pk_encrypt($sub_contracts[$t]['business_unit_id']);
                        $sub_contracts[$t]['classification_id']=pk_encrypt($sub_contracts[$t]['classification_id']);
                        $sub_contracts[$t]['contract_owner_id']=pk_encrypt($sub_contracts[$t]['contract_owner_id']);
                        $sub_contracts[$t]['created_by']=pk_encrypt($sub_contracts[$t]['created_by']);
                        $sub_contracts[$t]['currency_id']=pk_encrypt($sub_contracts[$t]['currency_id']);
                        $sub_contracts[$t]['id_contract']=pk_encrypt($sub_contracts[$t]['id_contract']);
                        $sub_contracts[$t]['contract_id']=pk_encrypt($sub_contracts[$t]['contract_id']);
                        $sub_contracts[$t]['relationship_category_id']=pk_encrypt($sub_contracts[$t]['relationship_category_id']);
                        $sub_contracts[$t]['updated_by']=pk_encrypt($sub_contracts[$t]['updated_by']);
                        if($sub_contracts[$t]['id_contract_review'] == '0')//Encrypting if value is not = '0'
                            $sub_contracts[$t]['id_contract_review']= null;
                        else
                            $sub_contracts[$t]['id_contract_review']=pk_encrypt($sub_contracts[$t]['id_contract_review']);
                        $sub_contracts[$t]['parent_contract_id']=pk_encrypt($sub_contracts[$t]['parent_contract_id']);
                        
                        $sub_contracts[$t]['template_id']=pk_encrypt($sub_contracts[$t]['template_id']);
                        $sub_contracts[$t]['id_template']=pk_encrypt($sub_contracts[$t]['id_template']);
                        $sub_contracts[$t]['workflow_id']=pk_encrypt($sub_contracts[$t]['workflow_id']);
                        $sub_contracts[$t]['id_contract_workflow']=pk_encrypt($sub_contracts[$t]['id_contract_workflow']);
                        if((int)$sub_contracts[$t]['can_review'] == 0 && (int)$sub_contracts[$t]['is_workflow']==0)
                            $sub_contracts[$t]['is_workflow'] = null;
                    }
                    $result['data'][$s]['sub_contracts'] = $sub_contracts;
                }//is_workflow if condition end
            }//end for loop
            
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function getArchiveList_get(){
        $data = $this->input->get();

        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($data['customer_id']!=$this->session_user_info->customer_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'1');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_relationship_category'])) {
            $data['id_relationship_category'] = pk_decrypt($data['id_relationship_category']);
        }
        if(isset($data['relationship_category_id'])) {
            $data['relationship_category_id'] = pk_decrypt($data['relationship_category_id']);
        }
        if(isset($data['id_business_unit'])) {
            $data['id_business_unit'] = pk_decrypt($data['id_business_unit']);
        }
        if(isset($data['business_unit_id']) && strtolower($data['business_unit_id'])!='all') {
            $data['id_business_unit'] = pk_decrypt($data['business_unit_id']);
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            if($this->session_user_info->user_role_id != 7)
            if(!in_array($data['id_business_unit'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'4');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        // if(in_array($this->session_user_info->user_role_id,array(3,4))){
        //     $business_unit = $this->Business_unit_model->getBusinessUnitUser(array('user_id' => $data['id_user'],'status' => '1'));
        //     $data['business_unit_id'] = array_map(function($i){ return $i['id_business_unit']; },$business_unit);
        //     $data['session_user_role']=$this->session_user_info->user_role_id;
        //     $data['session_user_id']=$this->session_user_id;
        // }
        if($this->session_user_info->user_role_id == 8 || $this->session_user_info->user_role_id == 3)
            $data['contract_owner_id'] = $this->session_user_id;
        if($this->session_user_info->user_role_id == 4)
            $data['delegate_id'] = $this->session_user_id;
        if($this->session_user_info->user_role_id==6){
            $data['business_unit_id'] = $this->session_user_business_units;
            if(count($data['business_unit_id'])==0 && $this->session_user_info->is_allow_all_bu==0){
                $data['business_unit_id']=array(0);
            }
        }
        //added for archive list for manager role
        if($this->session_user_info->user_role_id == 8)
        {
            $managerBU=$this->Validation_model->getBusinessUnitListByUser(array('user_id'=>$this->session_user_info->id_user));
            if(!empty($managerBU))
            {
                $data['managerBU'] = $managerBU;
            }
        }
        $contributor_records = $this->User_model->check_record('contract_user',array('user_id'=>$this->session_user_id,'status'=>1));
        if(count($contributor_records) > 0){
            $data['contract_user'] = $this->session_user_id;
        }

        $data = tableOptions($data);
        // print_r($this->session_user_id);exit;
        //////////////////////archive advaced filters start//////////////
        $get_filters=$this->User_model->getFilter(array('status'=>1,'user_id'=>$this->session_user_info->id_user,'module'=>'archive','is_union_table'=>0));
        $data['adv_filters']=$get_filters;
        $get_union_filters=$this->User_model->getFilter(array('status'=>1,'user_id'=>$this->session_user_info->id_user,'module'=>'archive','is_union_table'=>1));
        $data['adv_union_filters']=$get_union_filters;  
        // echo $this->db->last_query();exit;
        //////////////////////archive advaced filters end//////////////
        $result = $this->Contract_model->getArchive($data);//echo $this->db->last_query();exit;
        unset($data['contract_user']);
        foreach($result['data'] as $ak => $av){
            $contributor_records = $this->User_model->check_record('contract_user',array('user_id'=>$this->session_user_id,'contract_review_id'=>$av['id_contract_review']));
            if(count($contributor_records) > 0){
                $data['contract_user'] = $this->session_user_id;
            }
            $inputData = array(
                'id_contract_review' => $av['id_contract_review']
            );
            if(isset($data['contract_user']))
                $inputData['module_ids'] = array_unique(explode(',',$av['modules']));
            $result['data'][$ak]['file_count'] = $this->getArchiveAttachments_get($inputData);
            $result['data'][$ak]['contract_id'] = pk_encrypt($av['contract_id']);
            $result['data'][$ak]['contract_workflow_id'] = pk_encrypt($av['contract_workflow_id']);
            $result['data'][$ak]['type'] = $av['type'];
            $result['data'][$ak]['contract_review_id'] = $result['data'][$ak]['id_contract_review'] = pk_encrypt($av['id_contract_review']);
            $result['data'][$ak]['module_id'] = pk_encrypt($av['module_id']);
            $result['data'][$ak]['id_user'] = pk_encrypt($this->session_user_id);
            $result['data'][$ak]['user_role_id'] = pk_encrypt($this->session_user_info->user_role_id);
            if(strlen($result['data'][$ak]['relationship_category_name'])>2){
                preg_match_all('/[A-Z]/', ucwords(strtolower($result['data'][$ak]['relationship_category_name'])), $matches);
                $result['data'][$ak]['relationship_category_short_name'] = implode('',$matches[0]);
            }else{
                $result['data'][$ak]['relationship_category_short_name'] = $result['data'][$ak]['relationship_category_name'];
            }
            if($result['data'][$ak]['type']=="project")
            {
                $mappedProvidersDetails= $this->Customer_model->getproviderlist(array("customer_id"=>$data['customer_id'],"project_id"=>pk_decrypt($result['data'][$ak]['contract_id']),"type"=>$result['data'][$ak]['type']))['data'];
                if(!empty($mappedProvidersDetails))
                {
                    if(count($mappedProvidersDetails) == 1)
                    {
                        $result['data'][$ak]['providerName']  = $mappedProvidersDetails[0]['provider_name'];
                    }
                }
            }
        }
        //print_r($result);

        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function getArchiveAttachments_get($inputData=array()){
        if(!empty($inputData))
            $data = $inputData;
        else{
            $data = $this->input->get();

            $this->form_validator->add_rules('id_contract_review', array('required'=>$this->lang->line('contract_review_id_req')));
            $validated = $this->form_validator->validate($data);
            if($validated != 1){
                $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }

        }
        if(empty($inputData)){
            if(isset($data['id_contract_review'])) {
                $data['id_contract_review'] = pk_decrypt($data['id_contract_review']);
            }
            $contributor_records = $this->User_model->check_record('contract_user',array('user_id'=>$this->session_user_id,'contract_review_id'=>$data['id_contract_review']));
            if(count($contributor_records) > 0){
                $data['module_ids'] = array_map(function($i){ return$i['module_id'];},$contributor_records);
            }
        }
		
        $result = $this->Document_model->getArchiveDocuments($data);//echo '<pre>'.$this->db->last_query();
        foreach($result as $k => $v){
            $result[$k]['id_document'] = pk_encrypt($v['id_document']);
            $result[$k]['encryptedPath'] = pk_encrypt($v['document_source']);
        }

        if(empty($inputData)){
            $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
            $this->response($result, REST_Controller::HTTP_OK);
        }else{
            return count($result);
        }

    }
    //* validation of Review/workflow start *//
    public function ProcessValidation_post(){
        
        $data = $this->input->post();
        //print_r($data);exit;
        $this->form_validator->add_rules('contract_review_id', array('required'=>$this->lang->line('contract_review_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['contract_review_id'])) {
            $data['contract_review_id'] = pk_decrypt($data['contract_review_id']);
        }  
        // print_r($data);exit;
        if($data['validation_status']==2){// for validation initiate
            $update_validation_status=$this->User_model->update_data('contract_review',array('validation_status'=>2),array('id_contract_review'=>$data['contract_review_id']));
            $get_validators_modules = $this->Contract_model->getValidatormodules(array('contract_review_id'=>$data['contract_review_id'],'contribution_type'=>1));
            $contractReviewDetails =$this->User_model->check_record('contract_review',array('id_contract_review'=>$data['contract_review_id']));
            //print_r($contractReviewDetails);exit;
            if(!empty($get_validators_modules)&&!empty($contractReviewDetails) && $contractReviewDetails[0]['is_workflow'] == 1)
            {
                //updating module status to 2 for tasks(if the we didnt answer the questions also change from sprint 8.2)
                $this->User_model->update_data('module',array('module_status'=>2),array('id_module'=>$get_validators_modules[0]['id_module']));
            }
            foreach($get_validators_modules as $k=>$v){
                // print_r($v);exit;
                $send['contract_review_id'] = $data['contract_review_id'];
                $send['module_id'] =$v['module_id'];
                $send['type']= $data['type'];
                $this->sendmailtovc($send); // sending email to validation contributors
            }
            $result = array('status'=>TRUE, 'message' => $this->lang->line('validate_initiate'), 'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if($data['validation_status']==3){//for validation complete
            $logedValidatorModules = $this->Contract_model->getContractReviewModule(array("contract_review_id"=>$data['contract_review_id'],"id_user"=>$this->session_user_info->id_user));
            foreach($logedValidatorModules as $modules)
            {
                $this->User_model->update_data('module',array('module_status'=>3),array('id_module'=>$modules['id_module'],'module_status'=>2));
            }
            $get_validators= $this->Contract_model->getValidatormodules(array('contract_review_id'=>$data['contract_review_id'],'contribution_type'=>1));
            foreach($get_validators as $k=>$v){
                if($v['module_status']==3){
                    $all_modules_validated=true;
                }
                else{
                    $all_modules_validated=false;
                    break;  
                }
            }
            $get_validators_modules = $this->Contract_model->getValidatormodules(array('contract_review_id'=>$data['contract_review_id'],'contribution_type'=>1,'user_id'=>$this->session_user_info->id_user));
            $contract_info = $this->Contract_model->getContractDetails(array('contract_review_id'=>$data['contract_review_id']));
            // echo $this->db->last_query();exit;
            $result = $this->User_model->getUserInfo(array('user_id' => $this->session_user_id));
		    $customer_details = $this->Customer_model->getCustomer(array('id_customer' => $result->customer_id));
            if($customer_details[0]['company_logo']=='')
                $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'company');        
            else
                $customer_logo = getImageUrlSendEmail($customer_details[0]['company_logo'], 'profile', SMALL_IMAGE);
            $list_senders[0]['first_name']=$contract_info[0]['delgate_first_name'];
            $list_senders[0]['last_name']=$contract_info[0]['delegate_last_name'];
            $list_senders[0]['email']=$contract_info[0]['delegate_email'];
            $list_senders[0]['user_id']=$contract_info[0]['delegate_id'];
            $list_senders[1]['first_name']=$contract_info[0]['owner_first_name'];
            $list_senders[1]['last_name']=$contract_info[0]['owner_last_name'];
            $list_senders[1]['email']=$contract_info[0]['owner_email'];
            $list_senders[1]['user_id']=$contract_info[0]['contract_owner_id'];
            foreach($get_validators_modules as $k=>$v){
                $module_info = $this->Module_model->getModuleName(array('language_id'=>1,'module_id'=>$v['module_id']));
                // print_r( $template_configurations);exit;
                $mailer_data=array();
                foreach($list_senders as $ls => $s){
                    // print_r($s);exit;
                    if($data['type']=='contract'){
                        if($data['is_workflow'] == 1){            
                            $template_configurations=$this->Customer_model->EmailTemplateList(array('customer_id' => $result->customer_id,'module_key'=>'VALIDATION_SUBMITTED','module_name' => 'WorkFlow'));
                        }else{
                            $template_configurations=$this->Customer_model->EmailTemplateList(array('customer_id' => $result->customer_id,'module_key'=>'VALIDATION_SUBMITTED','module_name' => 'Review'));
                        }
                    }
                    if($data['type']=='project'){
                        $template_configurations=$this->Customer_model->EmailTemplateList(array('customer_id' => $result->customer_id,'module_key'=>'VALIDATION_SUBMITTED','module_name' => 'Project'));

                    }
                    if($template_configurations['total_records']>0){
                        $template_configurations=$template_configurations['data'][0];
                        $wildcards=$template_configurations['wildcards'];
                        $wildcards_replaces=array();
                        // $wildcards_replaces['name']=$s['name'];
                        if($data['type']=='contract'){
                            $wildcards_replaces['contract_name']=$contract_info[0]['contract_name'];
                        }
                        if($data['type']=='project'){
                            $wildcards_replaces['project_name']=$contract_info[0]['contract_name'];
                        }
                        $wildcards_replaces['first_name']=$s['first_name'];
                        $wildcards_replaces['last_name']=$s['last_name'];
                        $wildcards_replaces['module_name']=$module_info[0]['module_name'];
                        $wildcards_replaces['logo']=$customer_logo;
                        $wildcards_replaces['year'] = date("Y");
                        $wildcards_replaces['url']=WEB_BASE_URL.'html';
                        $body = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_content']);
                        $subject = wildcardreplace($wildcards,$wildcards_replaces,$template_configurations['template_subject']);
                        $from_name=$template_configurations['email_from_name'];
                        $from=$template_configurations['email_from'];
                        $to=$s['email'];
                        $to_name=$s['name'];
                        $mailer_data['mail_from_name']=$from_name;
                        $mailer_data['mail_to_name']=$to_name;
                        $mailer_data['mail_to_user_id']=$s['user_id'];
                        $mailer_data['mail_from']=$from;
                        $mailer_data['mail_to']=$to;
                        $mailer_data['mail_subject']=$subject;
                        $mailer_data['mail_message']=$body;
                        $mailer_data['status']=0;
                        $mailer_data['send_date']=currentDate();
                        $mailer_data['is_cron']=0;
                        $mailer_data['email_template_id']=$template_configurations['id_email_template'];
                        $mailer_id=$this->Customer_model->addMailer($mailer_data);
                        if($mailer_data['is_cron']==0) {
                            //$mail_sent_status=sendmail($to, $subject, $body, $from);
                            $this->load->library('sendgridlibrary');
                            $mail_sent_status=$this->sendgridlibrary->sendemail($from_name,$from,$subject,$body,$to_name,$to,array(),$mailer_id);
                            if($mail_sent_status==1)
                                $this->Customer_model->updateMailer(array('status'=>1,'mailer_id'=>$mailer_id));
                        } 
                    }
                }
            }
            if($all_modules_validated){
                $update_validation_status=$this->User_model->update_data('contract_review',array('validation_status'=>3),array   ('id_contract_review'=>$data['contract_review_id']));
            }
            $result = array('status'=>TRUE, 'message' => $this->lang->line('validate_completed'), 'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
    }
    //* validation of Review/workflow end *//

    //* calculate the contract progress and score start *//
    function calculateScoreAndProgress($data){
        // print_r($data);
        // print_r($this->session_user_info);exit;

        if(!empty($data['id_contract_review']) && $data['id_contract_review'] > 0){
            //Changing the column dynamically.
            $check_validator=array();
            $answer_column = 'question_answer';
            if($this->session_user_info->user_role_id==4 || $this->session_user_info->user_role_id==3){
                $check_validator=$this->User_model->check_record('contract_user',array('user_id'=>$this->session_user_info->id_user,'status'=>1,'contract_review_id'=>$data['id_contract_review']));
            }
            if((int)$this->session_user_info->contribution_type == 1 && count($check_validator)>0)
            $answer_column = 'v_question_answer';
            
            $provider_visibility = array(1,0);
            if(isset($data['is_subtask']) && $data['is_subtask']==1){
                $this->session_user_info->contribution_type=3;
                $provider_visibility = array(1);
            }
            $contributor_modules = $this->User_model->check_record_selected('module_id','contract_user',array('contract_review_id'=>$data['id_contract_review'],'user_id'=>$data['user_id'],'status'=>1));
            $contributor_modules = array_map(function($i){ return $i['module_id']; },$contributor_modules);
            $contract_progress=0;
            $modules = $this->Contract_model->getContractReviewModuleScoreProgress(array('contract_review_id' => $data['id_contract_review'],'dynamic_column'=>$answer_column));
            // print_r($modules);exit;
            if(count($contributor_modules)>0){
                if((int)$this->session_user_info->contribution_type == 3)
                    $provider_visibility = array(1);
                foreach($modules as $k=>$v){
                    foreach($contributor_modules as $c=>$d){
                        if($v['module_id']==$d){
                            $new_modules_array[]=$v;
                        }
                    }
                }
            }
            else{
                $new_modules_array=$modules;
            }
            foreach($new_modules_array as $n=>$m){
                // print_r($provider_visibility);exit;
                $contract_progress += $this->Contract_model->progress(array('module_id'=>$m['module_id'],'contract_review_id'=>$data['id_contract_review'],'provider_visibility'=>$provider_visibility,'dynamic_column'=>$answer_column));
            }
            if(count($new_modules_array)>0){
                $contract_progress = round($contract_progress/count($new_modules_array)).'%'; 
            }
            else{
                $contract_progress = '0%';
            }
            // $module_score = $this->User_model->check_record('module',array('contract_review_id' => $data['id_contract_review']));
            // $score = getScore($scope = array_map(function($i){ return strtolower($i['module_score']); },$module_score));
			
			//The following line is for global.
			$module_score = $this->Contract_model->getContractReviewModuleScore(array('contract_review_id' => $data['id_contract_review']));
			$score_module = array();
			for($s=0;$s<count($module_score);$s++)
            {
				$score_module[$s] = getScoreByCount($module_score[$s]);                
            }
			// print_r($score_module);exit; 
			$score = getScore($scope = array_map(function($i){ return strtolower($i); },$score_module));
			// echo $this->db->last_query();exit;
			//$this->response($result, REST_Controller::HTTP_OK);
			if($this->Contract_model->checkReviewUserAccess(array('contract_review_id'=>$data['id_contract_review'],'id_user'=>$this->session_user_info->id_user))>0){
				//print_r($module_ids);
				
				$data['contract_review_id'] = $data['id_contract_review'];
				$data['id_user'] = $this->session_user_info->id_user;
				$q = 'SELECT *,cu.module_id as id_module from contract_user cu  WHERE cu.contract_review_id = '.$data['id_contract_review'].' AND cu.user_id = '.$this->session_user_id.'  AND cu.status = 1';
				$new_user_modules = $this->User_model->custom_query($q);
				// $new_user_modules = $this->Contract_model->getContractReviewModule($data);
				//echo $this->db->last_query();exit;
                $module_ids = array_map(function ($i){ return $i['id_module'];},$new_user_modules);
                
                $module_score = $this->Contract_model->getContributorContractReviewModuleScore(array('contract_review_id' => $data['id_contract_review'],'provider_visibility'=>$provider_visibility,'module_ids' => $module_ids,'dynamic_column'=>$answer_column));
				for ($sr = 0; $sr < count($module_score); $sr++) {
					$module_score[$sr]['score'] = getScoreByCount($module_score[$sr]);
				}
				// echo $this->db->last_query();exit;
				$new_module_score = array();
				foreach($new_user_modules as $usm){
					for ($sr = 0; $sr < count($module_score); $sr++) {
						//echo '<pre>'.$module_score[$sr]['module_id'].' == '.$usm['id_module'];
						//$module_score[$sr]['score'] = 'green';
						if($module_score[$sr]['module_id'] == $usm['id_module']){
							$module_score[$sr]['score'] = getScoreByCount($module_score[$sr]);
							$new_module_score[]=$module_score[$sr];
						}
					}
				}
				
				$score = getScore(array_map(function ($i) {
					return strtolower($i['score']);
				}, $module_score));
            }
            return array('contract_progress'=>$contract_progress,'score'=>$score);
        }
        else{
            return array('contract_progress'=>'0%','score'=>'');
        }
    }
    //* calculate the contract progress and score end *//

    public function ProviderRelationshipCategory_get()
    {
        $data = $this->input->get();
        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($data['customer_id']!=$this->session_user_info->customer_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['language_id'])){
            $data['language_id']=pk_decrypt($data['language_id']);
            // if(!in_array($data['language_id'],$this->session_user_master_language)){
            //     $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
            //     $this->response($result, REST_Controller::HTTP_OK);
            // }
        }

        if(isset($data['id_relationship_category'])) {
            $data['id_relationship_category'] = pk_decrypt($data['id_relationship_category']);
            if(!in_array($data['id_relationship_category'],$this->session_user_customer_relationship_categories)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_relationship_category_not'])) {
            $data['id_relationship_category_not'] = pk_decrypt($data['id_relationship_category_not']);
            if(!in_array($data['id_relationship_category_not'],$this->session_user_customer_relationship_categories)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }

        // $result = $this->Relationship_category_model->getRelationshipCategory($data);
        // foreach($result as $k=>$v){
        //     $result[$k]['created_by']=pk_encrypt($result[$k]['created_by']);
        //     $result[$k]['customer_id']=pk_encrypt($result[$k]['customer_id']);
        //     $result[$k]['id_relationship_category']=pk_encrypt($result[$k]['id_relationship_category']);
        //     $result[$k]['id_relationship_category_language']=pk_encrypt($result[$k]['id_relationship_category_language']);
        //     $result[$k]['language_id']=pk_encrypt($result[$k]['language_id']);
        //     $result[$k]['parent_relationship_category_id']=pk_encrypt($result[$k]['parent_relationship_category_id']);
        //     $result[$k]['relationship_category_id']=pk_encrypt($result[$k]['relationship_category_id']);
        //     $result[$k]['updated_by']=pk_encrypt($result[$k]['updated_by']);
        // }
        $data['status'] = 1; // to get active categorys in dropdown
        $data['can_review']=1; // to get reviewable categorys
        $dropdown1 = $this->Relationship_category_model->ProviderRelationshipCategoryList($data);
        // echo '<pre>'.print_r($dropdown1);exit;
        $dropdown1=$dropdown1['data'];
        $dropdown = array();
        foreach($dropdown1 as $k=>$v){
            $dropdown[$k]['id_provider_relationship_category']=pk_encrypt($dropdown1[$k]['id_provider_relationship_category']);
            $dropdown[$k]['relationship_category_name']=$dropdown1[$k]['relationship_category_name'];
            $dropdown[$k]['type']='Relation Categories';
        }
        $data['can_review']=0; // to get non reviewable categorys
        $dropdown2 = $this->Relationship_category_model->ProviderRelationshipCategoryList($data);
        $index = count($dropdown1);
        $dropdown2=$dropdown2['data'];
        foreach($dropdown2 as $k=>$v){
            $dropdown[$index]['id_provider_relationship_category']=pk_encrypt($dropdown2[$k]['id_provider_relationship_category']);
            $dropdown[$index]['relationship_category_name']=$dropdown2[$k]['relationship_category_name'];
            $dropdown[$index]['type']='Additional Relation Categories';
            $index++;
        }
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>'','drop_down'=>$dropdown);
        $this->response($result, REST_Controller::HTTP_OK);
    }
    public function ProviderContracts_get()
    {
        $data = $this->input->get();

        $this->form_validator->add_rules('customer_id', array('required'=>$this->lang->line('customer_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(isset($data['customer_id'])) {
            $data['customer_id'] = pk_decrypt($data['customer_id']);
            if($data['customer_id']!=$this->session_user_info->customer_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'1');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['user_role_id'])) {
            $data['user_role_id'] = pk_decrypt($data['user_role_id']);
            if($data['user_role_id']!=$this->session_user_info->user_role_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['id_user'])) {
            $data['id_user'] = pk_decrypt($data['id_user']);
            if($data['id_user']!=$this->session_user_id){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'3');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['business_unit_id']) && strtolower($data['business_unit_id'])!='all') {
            $data['id_business_unit'] = pk_decrypt($data['business_unit_id']);
            $data['business_unit_id'] = pk_decrypt($data['business_unit_id']);
            if($this->session_user_info->user_role_id != 7)
            if(!in_array($data['id_business_unit'],$this->session_user_business_units)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'4');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['delegate_id'])) {
            $data['delegate_id'] = pk_decrypt($data['delegate_id']);
            if(!in_array($data['delegate_id'],$this->session_user_delegates)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'5');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(isset($data['relationship_category_id'])) {
            $data['relationship_category_id'] = pk_decrypt($data['relationship_category_id']);
        }
        if(isset($data['contract_owner_id'])) {
            $data['contract_owner_id'] = pk_decrypt($data['contract_owner_id']);
            if(!in_array($data['contract_owner_id'],$this->session_user_customer_all_users)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'6');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if(in_array($this->session_user_info->user_role_id,array(3,4))){
            $business_unit = $this->Business_unit_model->getBusinessUnitUser(array('user_id' => $data['id_user'],'status' => '1'));
            $data['business_unit_id'] = array_map(function($i){ return $i['id_business_unit']; },$business_unit);
            $data['session_user_role']=$this->session_user_info->user_role_id;
            $data['session_user_id']=$this->session_user_id;
        }
        if($this->session_user_info->user_role_id==6){
            $data['business_unit_id'] = $this->session_user_business_units;
            if(count($data['business_unit_id'])==0 && $this->session_user_info->is_allow_all_bu==0)
            {
                $data['business_unit_id']=array(0);
            }
        }
        if($this->session_user_info->user_role_id == 7){
            $data['provider_id'] = $this->session_user_info->provider;
        }
        
        if(isset($data['parent_contract_id'])) {
            $data['parent_contract_id'] = pk_decrypt($data['parent_contract_id']);
            if($this->session_user_info->user_role_id == 4){
                $data['delegate_id'] = $this->session_user_id;
            }
        }
        // if(count($data['business_unit_id'])==0)
            unset($data['business_unit_id']);

        /*helper function for ordering smart table grid options*/
        //echo '<pre>'.print_r($data);exit;
        $data = tableOptions($data);
        if(strlen($data['advancedsearch_get'])>2) 
            $data['advancedsearch_get']=json_decode($data['advancedsearch_get']);
        else
            $data['advancedsearch_get']=false;
        // print_r($this->session_user_info->id_user);exit;

        if($data['user_role_id']==6){
            // $bu['business_unit_id'] = $this->User_model->check_record('business_unit_user',array('user_id'=>$this->session_user_id,'status'=>1));
            // // $business_unit = $this->Business_unit_model->getBusinessUnitUser(array('user_id' => $this->session_user_id,'status' => '1'));
            // // $data['business_unit_id'] = array_map(function($i){ return $i['id_business_unit']; },$business_unit);
            // // echo $this->db->last_query();exit;
            // $readonly_user_bu_ids = array_map(function($i){ return $i['business_unit_id']; },$bu['business_unit_id']);
            // // print_r($data['business_unit_id']);exit;
            // if($this->session_user_info->is_allow_all_bu==1){
            //     $bu_ids = $this->User_model->check_record_selected('GROUP_CONCAT(id_business_unit) as bu_ids','business_unit',array('status'=>1,'customer_id'=>$this->session_user_info->customer_id));
            //     $data['business_unit_id'] = explode(',',$bu_ids[0]['bu_ids']);
            // }
            // $business_unit_ids = $this->Business_unit_model->getBusinessUnitUser(array('status' =>1,'customer_id'=>$data['customer_id']));
            // print_r(array_column($business_unit_ids,'business_unit_id'));exit;
            $business_unit_ids = $this->Business_unit_model->getBusinessUnitUser(array('user_id' => $this->session_user_id,'status' =>1));
            // print_r($business_unit_ids);exit;
            $readonly_user_bu_ids=array_column($business_unit_ids,'business_unit_id');
            // array_column($business_unit_ids,'business_unit_id');
        }
        //echo $this->session_user_info->user_role_id; exit;
        unset($data['can_access']);
        $result = $this->Contract_model->getAllProviderContractList($data);
        
        for($s=0;$s<count($result['data']);$s++) //parent contracts
        {
            $record_visability=0;
            //due to union query we wear getting error with same column name. that's why we are managing one column without changing old code.
            $result['data'][$s]['provider_name'] = $result['data'][$s]['providerName'];
            unset($result['data'][$s]['providerName']);
            if($data['user_role_id']==3 || $data['user_role_id']==4){
                // print_r($result['data'][$s]['contract_owner_id']);exit;
                if($result['data'][$s]['contract_owner_id'] == $this->session_user_info->id_user || $result['data'][$s]['delegate_id']==$this->session_user_info->id_user){
                    $record_visability=1;
                }
                else{
                    $record_visability=0;
                }
            }
            if($data['user_role_id']==2){
                $record_visability=1;
            }
            $result['data'][$s]['is_disable_click']=0;
            // print_r(in_array($result['data'][$s]['business_unit_id'],$record_visability));exit;
            if($data['user_role_id']==6){
                // print_r($readonly_user_bu_ids);exit;
                if(in_array($result['data'][$s]['business_unit_id'],$readonly_user_bu_ids)){
                    $record_visability=1;
                    $result['data'][$s]['is_disable_click']=1;
                }                
            }
            $result['data'][$s]['is_accessable']=$record_visability;
            //Spentline Projected amount correction
            $contract_info = $this->User_model->check_record_selected('id_contract,currency_id,contract_value,contract_value_period,po_number,additional_recurring_fees,additional_recurring_fees_period,additonal_one_off_fees,contract_start_date,contract_end_date,TIMESTAMPDIFF(MONTH,contract_start_date,contract_end_date) months','contract',array('id_contract'=>$result['data'][$s]['id_contract']));
            $graph = $this->spent_mngment_graph('spent_line','Actual Spent',$contract_info[0]);
            $result['data'][$s]['Projected_value'] = array_sum(array_map(function($i){ return (int)$i->data[0]->value;},$graph->dataset));
            if(strlen($result['data'][$s]['relationship_category_name'])>2){
                preg_match_all('/[A-Z]/', ucwords(strtolower($result['data'][$s]['relationship_category_name'])), $matches);
                $result['data'][$s]['relationship_category_short_name'] = implode('',$matches[0]);
            }else{
                $result['data'][$s]['relationship_category_short_name'] = $result['data'][$s]['relationship_category_name'];
            }

            //Assigning id_contract_review to 0 if the contract status is not in progress
            if(!($result['data'][$s]['contract_review_status'] == 'review in progress' || $result['data'][$s]['contract_review_status'] == 'workflow in progress' || $result['data'][$s]['contract_review_status'] == 'finished'))
                $result['data'][$s]['id_contract_review'] = '0';
            $action_data = array('id_contract' => $result['data'][$s]['id_contract']);
            if (isset($data['id_user']))
                $action_data['id_user'] = $data['id_user'];
            if (isset($data['user_role_id']))
                $action_data['user_role_id'] = $data['user_role_id'];
            $action_data['item_status'] = 1;
            //$action_data['id_contract_review'] = $review[0]['id_contract_review'];
            $action_data['responsible_user_id'] = $data['id_user'];
            $action_data['status'] = 'open';
            //getting action items count of a recent review
            $result['data'][$s]['action_item_count'] = count($this->Contract_model->getContractReviewActionItemsList($action_data));
            
            // $query = 'SELECT *FROM calender WHERE FIND_IN_SET("'.$result['data'][$s]['id_contract'].'", contract_id) AND is_workflow=0';
            // $get_contract_review_name=$this->User_model->custom_query($query);
            $get_contract_review_name = $this->Contract_model->check_contract_in_calender(
                array(
                    'contract_id' => $result['data'][$s]['id_contract'],
                    'business_unit_id' => $result['data'][$s]['business_unit_id'],
                    'relationship_category_id' => $result['data'][$s]['relationship_category_id'],
                    'provider_id' => $result['data'][$s]['provider_id'],
                    'is_workflow' => 0
                ));//echo $this->db->last_query();exit;
            $contract_review_data['activity_name']=$get_contract_review_name[0]['workflow_name'];
            $get_contract_review_id = $this->User_model->check_record('contract_review',array('contract_id'=>$result['data'][$s]['id_contract'],'is_workflow'=>'0','contract_review_status'=>'review in progress'));
            $contract_review_data['id_contract_review']=pk_encrypt($get_contract_review_id[0]['id_contract_review']);
            $contract_review_data['id_contract']=pk_encrypt($result['data'][$s]['id_contract']);
            $contract_review_data['is_workflow']=0;
            $contract_review_data['initiated']=count($get_contract_review_id)>0?true:false;
            $contract_review_data['validation_status']=isset($get_contract_review_id[0]['validation_status'])?$get_contract_review_id[0]['validation_status']:0;//for disable the access of review which is in validation on going
            $review_workflow_data[0]=$contract_review_data;
            unset($contract_review_data);
            $contract_workflow = $this->Contract_model->getcontractworkflow(array('contract_id'=>$result['data'][$s]['id_contract'],'contract_review_status_not'=>'finished'));
           
            //print_r(pk_decrypt("U2FsdGVkX19UaGVAMTIzNFkR8dxfIo31jqYSIUCU2+8="));exit;
            //check review and workfow exit in calender start
            // print_r($result['data'][$s]['can_review']);exit;
            $query = 'SELECT *FROM calender WHERE FIND_IN_SET("'.$result['data'][$s]['id_contract'].'", contract_id) AND is_workflow=0 and status=1 and date>=CURRENT_DATE()';
            $review_exitst_incaledar=$this->User_model->custom_query($query);
            $check_review_inprogress=array();
            $check_review_inprogress=$this->User_model->check_record('contract_review',array('contract_id'=>$result['data'][$s]['id_contract'],'is_workflow'=>0,'contract_review_status'=>'review in progress'));
            if(!empty($review_exitst_incaledar) || !empty($check_review_inprogress)){
                $result['data'][$s]['is_review_exists_incalendar']='1';
            }
            else{
                $result['data'][$s]['is_review_exists_incalendar']='0';            
                if($result['data'][$s]['can_review']==0){
                    $result['data'][$s]['is_review_exists_incalendar']='1';            
                }
            }
            $result['data'][$s]['is_workflow_exists_incalendar']='0';
            foreach($contract_workflow as $k=>$v){
                //  print_r($contract_workflow);exit;
                $review_workflow_data[$k+1]['activity_name']=$v['review_name'];
                $review_workflow_data[$k+1]['id_contract_workflow']=pk_encrypt($contract_workflow[$k]['id_contract_workflow']);
                $review_workflow_data[$k+1]['is_workflow']=1;
                $review_workflow_data[$k+1]['id_contract']=pk_encrypt($result['data'][$s]['id_contract']);
                $review_workflow_data[$k+1]['validation_status']=isset($contract_workflow[$k]['validation_status'])?$contract_workflow[$k]['validation_status']:0;//for disable the access of workflow which is in validation on going
                if(isset($contract_workflow[$k]['workflow_status']) && $contract_workflow[$k]['workflow_status']=='workflow in progress'){
                    $review_workflow_data[$k+1]['initiated']=true;
                }
                else{
                    $review_workflow_data[$k+1]['initiated']=false;
                }
            
            }
        //     if($result['data'][$s]['contract_name']=='Agenion12')
        //    {
        //       print_r($review_workflow_data);exit;
        //    }
            //print_r($review_workflow_data);exit;
            $result['data'][$s]['review_or_workflow']=$review_workflow_data;
            unset($review_workflow_data);
            //print_r($result['data'][$s]['review_or_workflow']);exit;
            ///Assigning edit access for contracts
            $result['data'][$s]['ieaaei'] = 'annus';
            //checking is customer admin
            if(isset($data['user_role_id']) && $data['user_role_id'] == 2) {
                $result['data'][$s]['ieaaei'] = 'itako';
            }//chechking is contract created_by or contract_owner
            else if($data['id_user'] == $result['data'][$s]['created_by'] || $data['id_user'] == $result['data'][$s]['contract_owner_id']) {
                $result['data'][$s]['ieaaei'] = 'itako';
            }
            $result['data'][$s]['ideedi']=count($this->User_model->check_record('contract_review_discussion',array('contract_review_id'=>$result['data'][$s]['id_contract_review'],'discussion_status'=>1)))>0?"itako":'annus';

            $result['data'][$s]['business_unit_id']=pk_encrypt($result['data'][$s]['business_unit_id']);
            $result['data'][$s]['classification_id']=pk_encrypt($result['data'][$s]['classification_id']);
            $result['data'][$s]['contract_owner_id']=pk_encrypt($result['data'][$s]['contract_owner_id']);
            $result['data'][$s]['created_by']=pk_encrypt($result['data'][$s]['created_by']);
            $result['data'][$s]['currency_id']=pk_encrypt($result['data'][$s]['currency_id']);
            $result['data'][$s]['id_contract']=pk_encrypt($result['data'][$s]['id_contract']);
            $result['data'][$s]['contract_id']=pk_encrypt($result['data'][$s]['contract_id']);
            $result['data'][$s]['relationship_category_id']=pk_encrypt($result['data'][$s]['relationship_category_id']);
            $result['data'][$s]['updated_by']=pk_encrypt($result['data'][$s]['updated_by']);
            if($result['data'][$s]['id_contract_review'] == '0')//Encrypting if value is not = '0' 
                $result['data'][$s]['id_contract_review'] = null;
            else
                $result['data'][$s]['id_contract_review']=pk_encrypt($result['data'][$s]['id_contract_review']);
            $result['data'][$s]['parent_contract_id']=pk_encrypt($result['data'][$s]['parent_contract_id']);

            $result['data'][$s]['template_id']=pk_encrypt($result['data'][$s]['template_id']);
            $result['data'][$s]['id_template']=pk_encrypt($result['data'][$s]['id_template']);
            $result['data'][$s]['workflow_id']=pk_encrypt($result['data'][$s]['workflow_id']);
            $result['data'][$s]['id_contract_workflow']=pk_encrypt($result['data'][$s]['id_contract_workflow']);
            
            if((int)$result['data'][$s]['can_review'] == 0 && (int)$result['data'][$s]['is_workflow']==0){
                $result['data'][$s]['is_workflow'] = null;
                $result['data'][$s]['review_name'] = null;
            }
            $contract_progress_score=$this->calculateScoreAndProgress(array('id_contract_review'=>pk_decrypt($result['data'][$s]['id_contract_review']),'user_id'=>0));
            $result['data'][$s]['score']=$contract_progress_score['score'];

        }

                        $graph = $this->spent_mngment_graph('spent_line','Actual Spent',$contract_info[0]);
                        $sub_contracts[$t]['Projected_value'] = array_sum(array_map(function($i){ return (int)$i->data[0]->value;},$graph->dataset));

                      
        $result = array('status'=>TRUE, 'message' => $this->lang->line('success'), 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);
    }
    function provider_change_log($data,$provider_id){
        // print_r($provider_id);
        // print_r($data);exit;
        $provider_changed = 0;
        $status_chage = 0;
        // $provider_curent_tags = $this->Tag_model->getContractTags(array('contract_id'=>$data['id_contract'],'status'=>1,'name'=>true));
        $provider_curent_tags = $this->Customer_model->getInfoProviderTags(array('provider_id'=>$provider_id));
        // echo '<pre>'.print_r($provider_curent_tags);exit;
        $tag_log_json = '[';
        foreach($provider_curent_tags as $kt => $vt){
            // print_r($vt);exit;
            
            if($data[$kt]['tag_type'] == 'input' && $vt['tag_type'] == 'input' || $data[$kt]['tag_type'] == 'date' && $vt['tag_type'] == 'date'){
                $savedanswer=$vt['tag_answer'];
                $savinganswer=$data[$kt]['tag_answer'];
            }
            else{
                $get_saved_answer=$this->Customer_model->getOptionvalue(array('id_tag_option'=>$vt['tag_option']));
                $savedanswer=isset($get_saved_answer[0]['tag_answer'])?$get_saved_answer[0]['tag_answer']:'';
                $get_saving_answer=$this->Customer_model->getOptionvalue(array('id_tag_option'=>pk_decrypt($data[$kt]['tag_option'])));
                $savedanswer=isset($get_saving_answer[0]['tag_answer'])?$get_saving_answer[0]['tag_answer']:'';
            }
            
            $tag_json = '{"tag_text":"'.$vt['tag_text'].'","tag_value":"'.$savedanswer.'","tag_type":"'.$vt['tag_type'].'","tag_comments":"'.$data[$kt]['comments'].'","tag_id":"'.pk_encrypt($vt['id_tag']).'"},';
            $data[$kt]['tag_id'] = pk_decrypt($data[$kt]['tag_id']);
            if($savedanswer != $savinganswer){
                $provider_changed = 1;
            }
            $tag_log_json .= $tag_json;
        }
        $tag_log_json = rtrim($tag_log_json,",").']'; // Removing last comma and appendint ']'
        // print_r($provider_changed);exit;
        $provider_curent_info = $this->User_model->check_record('provider',array('id_provider'=>$provider_id));
        // print_r($provider_curent_info[0]);
        if(isset($provider_curent_info[0])){
            if($provider_curent_info[0]['unique_id'] != $data['unique_id']) $provider_changed = 1;
            if($provider_curent_info[0]['provider_name'] != $data['provider_name']) $provider_changed = 1;
            if($provider_curent_info[0]['description'] != $data['description']) $provider_changed = 1;
            if($provider_curent_info[0]['company_address'] != $data['company_address']) $provider_changed = 1;
            if($provider_curent_info[0]['city'] != $data['city']) $provider_changed = 1;
            if($provider_curent_info[0]['postal_code'] != $data['postal_code']) $provider_changed = 1;
            if($provider_curent_info[0]['country'] != $data['country']) $provider_changed = 1;
            if($provider_curent_info[0]['category_id'] != $data['category_id']) $provider_changed = 1;
            if($provider_curent_info[0]['category_id'] != $data['category_id']) $provider_changed = 1;
            if($provider_curent_info[0]['vat'] != $data['vat']) $provider_changed = 1;
            


            
            if(isset($data['internal_contract_responsible']))                if($provider_curent_info[0]['internal_contract_responsible'] != $data['internal_contract_responsible']) $provider_changed = 1;
            if(isset($data['internal_contract_sponsor']))                if($provider_curent_info[0]['internal_contract_sponsor'] != $data['internal_contract_sponsor']) $provider_changed = 1;
            if(isset($data['internal_partner_relationship_manager']))                if($provider_curent_info[0]['internal_partner_relationship_manager'] != $data['internal_partner_relationship_manager']) $provider_changed = 1;
            if(isset($data['provider_contract_responsible']))                if($provider_curent_info[0]['provider_contract_responsible'] != $data['provider_contract_responsible']) $provider_changed = 1;
            if(isset($data['provider_contract_sponsor']))                if($provider_curent_info[0]['provider_contract_sponsor'] != $data['provider_contract_sponsor']) $provider_changed = 1;

        if($provider_changed == 1){ 
            $provider_log_data=array(
                'provider_id'=>$provider_id,
                'provider_name'=>$provider_curent_info[0]['provider_name'],
                'description'=>$provider_curent_info[0]['description'],
                'company_address'=>$provider_curent_info[0]['company_address'],
                'city'=>$provider_curent_info[0]['city'],
                'country'=>$provider_curent_info[0]['country'],
                'postal_code'=>$provider_curent_info[0]['postal_code'],
                'customer_id'=>$provider_curent_info[0]['customer_id'],
                'status'=>$provider_curent_info[0]['status'],
                'unique_id'=>$provider_curent_info[0]['unique_id'],
                'vat'=>$provider_curent_info[0]['vat'],
                'created_on'=>currentDate(),
                'created_by' => $this->session_user_id,
                'category_id'=>$provider_curent_info[0]['category_id'],
                'internal_contract_sponsor'=>$provider_curent_info[0]['internal_contract_sponsor'],
                'provider_contract_sponsor'=>$provider_curent_info[0]['provider_contract_sponsor'],
                'internal_partner_relationship_manager'=>$provider_curent_info[0]['internal_partner_relationship_manager'],
                'provider_partner_relationship_manager'=>$provider_curent_info[0]['provider_partner_relationship_manager'],
                'provider_contract_responsible'=>$provider_curent_info[0]['provider_contract_responsible'],
                'internal_contract_responsible'=>$provider_curent_info[0]['internal_contract_responsible'],
                'provider_tags_data'=>$tag_log_json
            );
            $this->User_model->insert_data('provider_log',$provider_log_data);
            // echo '<pre>'.$this->db->last_query();exit;
        }
        }
    }
    function service_catalogue_graph($data){
        // print_r($data);exit;

        $currency = $this->User_model->check_record('currency',array('id_currency'=>$data['currency_id']));
        $graph = '';

        $chart->showSum= "1";
        $chart->decimalSeparator= ',';
        $chart->thousandSeparator= '.';
        $chart->canvasTopMargin= '0';
        //$chart->yAxisMaxValue= '9,147,483,647';
        $chart->caption= "";
        $chart->subCaption= "";
        $chart->xAxisname= "Total Service Catalogue";
        $chart->yAxisName= "";
        $chart->numberPrefix= $currency[0]['currency_name'].' ';
        $chart->animation= "0";
        $chart->showBorder= "0";
        $chart->bgColor= "#ffffff";
        $chart->showLabels= "1";
        $chart->adjustDiv= "1";
        $chart->showValues= "0";
        $chart->showLimits= "0";
        $chart->showDivLineValues= "0";
        $chart->showShadow= "0";
        $chart->showLegend= "0";
        $chart->showcanvasborder= "0";
        $chart->canvasBgAlpha= "0";
        $chart->divLineAlpha= "0";
        $chart->legendBorderAlpha= "0";
        $chart->showAlternateHGridColor= "0";
        $chart->useEllipsesWhenOverflow= "1";
        $chart->palette= "3";
        $chart->theme= "fusion";
        $chart->plottooltext= "\$seriesName : <b>\$dataValue</b>";
        $chart->formatNumberScale= "0";
        $chart->usePlotGradientColor= "0";
        $chart->theme= "fusion";
        $chart->use3DLighting= "1";
        $chart->showXAxisLine= "0";
        $chart->showLimits= "0";



        $colors=array('#0c4c0c','#0e5d0e','#116e11','#137f13','#169016','#19a119','#1bb21b','#1ec31e','#20d420','#2ade2a','#3be13b','#4ce44c','#5de65d','#6ee96e','#7feb7f','#90ee90','#a1f1a1','#b2f3b2','#c3f6c3','#d4f8d4','#e5fbe5','#f6fef6');
        // $colors=array('#0c4c0c','#0e5d0e','#116e11','#137f13','#169016','#19a119','#1bb21b','#1ec31e','#20d420','#2ade2a','#f6fef6','#4ce44c','#5de65d','#6ee96e','#7feb7f','#90ee90','#a1f1a1','#b2f3b2','#c3f6c3','#d4f8d4','#e5fbe5','#f6fef6');


            $categories[0]->category[0]->label = ''; 
            $service_catalogue = $this->Contract_model->getServiceCatalogueForChart(array('contract_id'=>$data['id_contract']));
            //echo $this->db->last_query();exit;
            $i = 0;
            $dataset=array();
            foreach($service_catalogue as $k => $v){
                // print_r($colors[$k]);exit;
                $dataset[$i]->seriesname = $v['catalogue_name'];
                $dataset[$i]->data[0]->color = $colors[$k+2];
                // $dataset[$i]->data[0]->toolText = 'Service Catalogue';
                if($v['calculated_total_item_spend_add_to_chart']==1)
                {
                    $dataset[$i]->data[0]->value = $v['calculated_total_item_spend'];
                }
                else{
                    $dataset[$i]->data[0]->value = $v['manual_total_item_spend'];
                }
                $i++;
            }

            $graph->chart = $chart;
            $graph->categories = $categories;
            $graph->dataset = $dataset;
            return $graph;
        
    }
    
    public function WorkflowReview_get()
    {
        $data = $this->input->get();
        if(isset($data['contract_id'])) {
            $data['contract_id'] = pk_decrypt($data['contract_id']);
            //if($data['customer_id']!=$this->session_user_info->customer_id){
                // $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'1');
                // $this->response($result, REST_Controller::HTTP_OK);
            //}
        }

        $contractDetails = $this->User_model->check_record('contract',array('id_contract' => $data['contract_id']));
        if(empty($contractDetails))
        {
            $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('contract_not_found')), 'data'=>'1');
            $this->response($result, REST_Controller::HTTP_OK); 
        }
      //  print_r($contractDetails);exit;

        $get_contract_review_name = $this->Contract_model->check_contract_in_calender(
            array(
                'contract_id' =>$contractDetails[0]['id_contract'],
                'business_unit_id' =>$contractDetails[0]['business_unit_id'],
                'relationship_category_id' =>$contractDetails[0]['relationship_category_id'],
                'provider_id' =>$contractDetails[0]['provider_id'],
                'is_workflow' => 0
            ));//echo $this->db->last_query();exit;
        $contract_review_data['activity_name']=$get_contract_review_name[0]['workflow_name'];
        $get_contract_review_id = $this->User_model->check_record('contract_review',array('contract_id'=>$data['contract_id'],'is_workflow'=>'0','contract_review_status'=>'review in progress'));
        $validation_info = '';
        if(!empty($get_contract_review_id[0]['id_contract_review']))
        { 
            $validatorsmodules = $this->Contract_model->getValidatormodules(array('contract_review_id'=>$get_contract_review_id[0]['id_contract_review'],'contribution_type'=>1)); //getting validator modules 
            $validator_exists=count($validatorsmodules)>0?true:false;
            if($validator_exists)
            {
                $progress_task_reviews=$this->calculateScoreAndProgress(array('id_contract_review'=>$get_contract_review_id[0]['id_contract_review'],'user_id'=>0));
                $validation_info = 1;
                if(str_replace('%','',$progress_task_reviews['contract_progress'])=='100'){
                    $validation_info = 4;
                }
                if((int)$get_contract_review_id[0]['validation_status'] == 2)
                {
                    $validation_info = 2;
                }
                elseif((int)$get_contract_review_id[0]['validation_status'] == 3)
                {
                    $validation_info = 3; 
                }
            }
        }
        $contract_review_data['validation_info']=$validation_info;
        $contract_review_data['contract_workflow_id']=pk_encrypt($get_contract_review_id[0]['contract_workflow_id']);
        $contract_progress_score=$this->calculateScoreAndProgress(array('id_contract_review'=>$get_contract_review_id[0]['id_contract_review'],'user_id'=>0));//new funcion for calculating  the score and contract progress
        $contract_review_data['score']=$contract_progress_score['score'];
        $contract_review_data['contract_progress']=$contract_progress_score['contract_progress'];
        $contract_review_data['id_contract_review']=pk_encrypt($get_contract_review_id[0]['id_contract_review']);
        $contract_review_data['id_contract']=pk_encrypt($result['data'][$s]['id_contract']);
        $contract_review_data['is_workflow']=0;
        $contract_review_data['initiated']=count($get_contract_review_id)>0?true:false;
        $contract_review_data['validation_status']=isset($get_contract_review_id[0]['validation_status'])?$get_contract_review_id[0]['validation_status']:0;//for disable the access of review which is in validation on going
        $review_workflow_data[0]=$contract_review_data;
        unset($contract_review_data);
        $contract_workflow = $this->Contract_model->getcontractworkflow(array('contract_id'=>$data['contract_id'],'contract_review_status_not'=>'finished'));
        foreach($contract_workflow as $k=>$v)
        {
            $validation_info = '';
            if(!empty($contract_workflow[$k]['id_contract_review']))
            { 
                $validatorsmodules =array();
                $contract_review_details= array();
                $contract_review_details = $this->User_model->check_record("contract_review",array("id_contract_review"=>$contract_workflow[$k]['id_contract_review']));
                $validatorsmodules = $this->Contract_model->getValidatormodules(array('contract_review_id'=>$contract_workflow[$k]['id_contract_review'],'contribution_type'=>1));
                $validator_exists=count($validatorsmodules)>0?true:false;
                if($validator_exists)
                {
                    $validation_info = 1;
                    $progress_task_reviews=$this->calculateScoreAndProgress(array('id_contract_review'=>$contract_workflow[$k]['id_contract_review'],'user_id'=>0));
                    if(str_replace('%','',$progress_task_reviews['contract_progress'])=='100'){
                        $validation_info = 4;
                    }
                    if($contract_review_details[0]['validation_status'] == 2)
                    {
                        $validation_info = 2;
                    }
                    elseif($contract_review_details[0]['validation_status'] == 3)
                    {
                        $validation_info = 3; 
                    }
                }
            }
            $review_workflow_data[$k+1]['validation_info']=$validation_info;
            $review_workflow_data[$k+1]['activity_name']=$v['review_name'];
            $contract_progress_score=$this->calculateScoreAndProgress(array('id_contract_review'=>$contract_workflow[$k]['id_contract_review'],'user_id'=>0));//new funcion for calculating  the score and contract progress
            $review_workflow_data[$k+1]['score']=$contract_progress_score['score'];
            $review_workflow_data[$k+1]['contract_progress']=$contract_progress_score['contract_progress'];
            $review_workflow_data[$k+1]['id_contract_workflow']=pk_encrypt($contract_workflow[$k]['id_contract_workflow']);
            $review_workflow_data[$k+1]['id_contract_review']=pk_encrypt($contract_workflow[$k]['id_contract_review']);
            $review_workflow_data[$k+1]['is_workflow']=1;
            $review_workflow_data[$k+1]['id_contract']=pk_encrypt($result['data'][$s]['id_contract']);
            $review_workflow_data[$k+1]['validation_status']=isset($contract_workflow[$k]['validation_status'])?$contract_workflow[$k]['validation_status']:0;//for disable the access of workflow which is in validation on going
            if(isset($contract_workflow[$k]['workflow_status']) && $contract_workflow[$k]['workflow_status']=='workflow in progress'){
                $review_workflow_data[$k+1]['initiated']=true;
            }
            else{
                $review_workflow_data[$k+1]['initiated']=false;
            }
        
        }
        $result = array('status'=>TRUE, 'data'=>$review_workflow_data);
        $this->response($result, REST_Controller::HTTP_OK);
    }
    function validateDocumentDownload($data){
        // if($this->session_user_info->id_user!=$data['user_id']){
        //     $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'));
        //     $this->response($result, REST_Controller::HTTP_OK);
        // }
        // // $this->User_model->check_record('download',array('id_download'=>$data['id_download']));
        // // echo $this->db->last_query();exit;
        // $query="SELECT  *
        // FROM download d
        // LEFT JOIN  document dc on d.document_id=dc.id_document
        // WHERE d.document_id>0
        // AND  d.id_download=".$data['id_download'];
        // $doc_data = $this->User_model->custom_query($query)[0];
        $doc_data=$data[0];
        if(empty($doc_data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'));
            $this->response($result, REST_Controller::HTTP_OK);
        }
        if(($doc_data['reference_type']=='contract' && $doc_data['module_type']=='customer') || ($doc_data['reference_type']=='project' && $doc_data['module_type']=='project')){
            if(in_array($this->session_user_info->user_role_id,array(3))){
                $check_contract_owner_access=$this->User_model->check_record('contract',array('id_contract'=>$doc_data['reference_id'],'contract_owner_id'=>$this->session_user_info->id_user,'is_deleted'=>0));
                if(empty($check_contract_owner_access)){
                    $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'));
                    $this->response($result, REST_Controller::HTTP_OK);
                }
            }
            if(in_array($this->session_user_info->user_role_id,array(4))){
                /* checking contract attachments access for delegate */ 
                $check_contract_delgate_access=$this->User_model->check_record('contract',array('id_contract'=>$doc_data['reference_id'],'delegate_id'=>$this->session_user_info->id_user,'is_deleted'=>0));
                if(empty($check_contract_delgate_access)){
                     $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'));
                     $this->response($result, REST_Controller::HTTP_OK);
                }
            }
            if(in_array($this->session_user_info->user_role_id,array(6))){
                /* checking contract attachments access for read-only user */
                $contract_id=$doc_data['reference_id'];
                $relation=$this->checkBuwithContract($doc_data['reference_id'], $this->session_user_info->id_user);              
                if(!$relation){
                    $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'));
                    $this->response($result, REST_Controller::HTTP_OK);
                }
            }
            if(in_array($this->session_user_info->user_role_id,array(7))){
            /* checking contract attachments access for external user */
                $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'));
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }
        if($doc_data['reference_type']=='provider' || ($doc_data['reference_type']=='catalogue' && $doc_data['module_type']=='catalogue')){
            if(in_array($this->session_user_info->user_role_id,array(3,4,6))){
                if($doc_data['reference_type']=='provider')
                {
                    $get_customer_id=$this->User_model->check_record('provider',array('id_provider'=>$doc_data['reference_id']));
                }
                else
                {
                    $get_customer_id=$this->User_model->check_record('catalogue',array('id_catalogue'=>$doc_data['reference_id']));
                }
                if($this->session_user_info->customer_id!=$get_customer_id[0]['customer_id']){
                    $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'));
                    $this->response($result, REST_Controller::HTTP_OK);
                }
                    
            }
            if(in_array($this->session_user_info->user_role_id,array(7))){
                $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'));
                $this->response($result, REST_Controller::HTTP_OK);
            }

        }
        if($doc_data['reference_type']=='contract' && $doc_data['module_type']=='contract_review'){
            if(in_array($this->session_user_info->user_role_id,array(4))){
               /* checking contract attachments access for delegate */
               $delegate_access=0;
               $check_delegate_access=$this->User_model->check_record('contract_user',array('contract_id'=>$doc_data['reference_id'],'user_id'=>$this->session_user_info->id_user,'contract_review_id'=>$doc_data['module_id'],'status'=>1));
               if(!empty($check_delegate_access)){
                   $delegate_access=1;
               }  
               $check_contract_delgate_access=$this->User_model->check_record('contract',array('id_contract'=>$doc_data['reference_id'],'delegate_id'=>$this->session_user_info->id_user,'is_deleted'=>0));
               if(!empty($check_contract_delgate_access)){
                    $delegate_access=1;
               }
               if($delegate_access==0){
                    $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'));
                    $this->response($result, REST_Controller::HTTP_OK);
               }
           }
           if(in_array($this->session_user_info->user_role_id,array(3))){
               /* checking contract attachments access for owner */
                $owner_access=0;
                $check_contract_owner_access=$this->User_model->check_record('contract',array('id_contract'=>$doc_data['reference_id'],'contract_owner_id'=>$this->session_user_info->id_user,'is_deleted'=>0));
                if(!empty($check_contract_owner_access)){
                     $owner_access=1;
                }
                $check_owner_access=$this->User_model->check_record('contract_user',array('contract_id'=>$doc_data['reference_id'],'user_id'=>$this->session_user_info->id_user,'contract_review_id'=>$doc_data['module_id'],'status'=>1));
                if(!empty($check_owner_access)){
                     $owner_access=1;
                }
                if($owner_access==0){
                     $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'));
                     $this->response($result, REST_Controller::HTTP_OK);
                 }  
           }
           if(in_array($this->session_user_info->user_role_id,array(6))){
            /* checking contract attachments access for read-only user */
                $contract_id=$doc_data['reference_id'];
                $relation=$this->checkBuwithContract($doc_data['reference_id'], $this->session_user_info->id_user);              
                if(!$relation){
                    $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'));
                    $this->response($result, REST_Controller::HTTP_OK);
                }
           }
           if(in_array($this->session_user_info->user_role_id,array(7))){
            /* checking contract attachments access for external user */
                $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'));
                $this->response($result, REST_Controller::HTTP_OK);
           }
        }
        if($doc_data['module_type']=='contract_review' && $doc_data['reference_type']=='question'){
            if(in_array($this->session_user_info->user_role_id,array(3,4,6,7))){
                /* checking contract review attachments access for owner,delegate,readonly,external user */
                $question_id=$doc_data['reference_id'];
                $extuser_access=0;
                $query="SELECT m.id_module FROM module m  LEFT JOIN topic t on m.id_module=t.module_id LEFT JOIN question q on t.id_topic=q.topic_id
                WHERE q.id_question=".$question_id."
                GROUP BY m.id_module;";
                $get_module_id = $this->User_model->custom_query($query)[0];
                $check_extuser_access=$this->User_model->check_record('contract_user',array('module_id'=>$get_module_id['id_module'],'user_id'=>$this->session_user_info->id_user,'contract_review_id'=>$doc_data['module_id'],'status'=>1));
                if(!empty($check_extuser_access)){
                    $extuser_access=1;
                }  
                if($extuser_access==0){
                     $result = array('status'=>FALSE,'error'=>$this->lang->line('unable_download_file'));
                     $this->response($result, REST_Controller::HTTP_OK);
                }
            }
        }        
    }
    public function  checkBuwithContract($contract_id,$user_id){
        $query="SELECT business_unit_id FROM contract WHERE id_contract=".$contract_id;
        $contract_buid = $this->User_model->custom_query($query)[0];
        $query1="SELECT business_unit_id FROM business_unit_user WHERE  status=1 AND user_id =".$user_id;
        $get_user_buids = $this->User_model->custom_query($query1);
        $user_buids=array_column($get_user_buids,'business_unit_id');
        return in_array($contract_buid['business_unit_id'],$user_buids);
    }
    
    // providing service for contract fields count for optimiziation
    public function contractFieldCountInfo_get()
    {
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        
        $this->form_validator->add_rules('id_contract', array('required'=>$this->lang->line('contract_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        if(isset($data['id_contract'])) {
            $contract_id = $data['id_contract'] = pk_decrypt($data['id_contract']);
            if($this->session_user_info->user_role_id!=7)
            if(!in_array($data['id_contract'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }

        $query = "select *,(SELECT Count(*) FROM document d WHERE `d`.`reference_id` = $contract_id AND `d`.`reference_type` = 'contract' AND `d`.`document_status` = 1 AND `d`.`document_type` IN(0, 1)) as attachmentsCount from contract WHERE id_contract = $contract_id";

        $contractDetails = $this->User_model->custom_query($query);

        if(empty($contractDetails))
        {
            $result = array('status'=>FALSE, 'error'=>$this->lang->line('contract_not_found'));
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $ContractInfoColarray =array('contract_unique_id','provider_name','contract_name','contract_start_date','contract_end_date','auto_renewal','contract_value','business_unit_id','contract_active_status','currency_id','contract_owner_id','relationship_category_id','delegate_id','template_id','description');

        $ContractinfoFilledFields =0;
        foreach ($ContractInfoColarray as $k => $v) {
            if(!empty($contractDetails[0][$v]) || $v=='auto_renewal'){$ContractinfoFilledFields++;}
        }
        $contract_information =$ContractinfoFilledFields."/15";

        $ContractSpentColarray =array('po_number','contract_value_period','contract_value','additional_recurring_fees_period','additional_recurring_fees','additonal_one_off_fees');
        $ContractSpentFilledFields =0;
        foreach ($ContractSpentColarray as $k => $v) {
            if(($contractDetails[0][$v]!="")||($contractDetails[0][$v]!=NULL)){$ContractSpentFilledFields++;}
        }
        $contract_spent_managment =$ContractSpentFilledFields."/6";

        $ContractStakeHolderColarray =array('internal_contract_sponsor','provider_contract_sponsor','internal_partner_relationship_manager','provider_partner_relationship_manager','provider_contract_responsible','internal_contract_responsible');
            
        $ContractStakeHolderFilledFields =0;
        //$ContractStakeHolder = array();
        foreach ($ContractStakeHolderColarray as $k => $v) {
            if(($contractDetails[0][$v]!="")||($contractDetails[0][$v]!=NULL)){$ContractStakeHolderFilledFields++;}
        }
        $contract_stake_holder =$ContractStakeHolderFilledFields."/6";


        $contractTagesFilled =0;
        $master_tags = $this->Tag_model->TagList(array('customer_id'=>$this->session_user_info->customer_id,'status'=>1,'tag_type'=>'contract_tags'));
        $tag_data = $this->Contract_model->getInfoContractTags(array('contract_id'=>$contract_id));
        $tag_result = array();
        if(empty($tag_data))
        {
            $contract_tags ="0/".count($master_tags);
        }
        else{
            $contractTagesFilled = 0;
            foreach ($tag_data as $k => $va) {
                if(($tag_data[$k]['tag_answer']!="")&&($tag_data[$k]['tag_answer']!=NULL))
                {
                    $contractTagesFilled++;
                }
            }
            $contract_tags  =$contractTagesFilled."/".count($master_tags);
        }
        $obligations = $this->Project_model->getObligations(array('id_contract'=>$contract_id,'get_parent'=>true));
        $obligationsCount =!empty($obligations)?$obligations['total_records']:0;
        $result = array('status'=>TRUE, 'data'=>array('contract_information' => $contract_information, 'contract_spent_managment' => $contract_spent_managment,'contract_stake_holder' => $contract_stake_holder,'contract_tags' => $contract_tags,'obligationsCount' => $obligationsCount,'contract_attachments' => $contractDetails[0]['attachmentsCount']));
        $this->response($result, REST_Controller::HTTP_OK);
    }

    public function contractAttachments_get()
    {
        $data = $this->input->get();
        if(empty($data)){
            $result = array('status'=>FALSE,'error'=>$this->lang->line('invalid_data'),'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }
        
        $this->form_validator->add_rules('id_contract', array('required'=>$this->lang->line('contract_id_req')));
        $validated = $this->form_validator->validate($data);
        if($validated != 1)
        {
            $result = array('status'=>FALSE,'error'=>$validated,'data'=>'');
            $this->response($result, REST_Controller::HTTP_OK);
        }

        if(isset($data['id_contract'])) {
            $contract_id = $data['id_contract'] = pk_decrypt($data['id_contract']);
            if($this->session_user_info->user_role_id!=7)
            if(!in_array($data['id_contract'],$this->session_user_contracts)){
                $result = array('status'=>FALSE, 'error' =>array('message'=>$this->lang->line('permission_not_allowed')), 'data'=>'2');
                $this->response($result, REST_Controller::HTTP_OK);
            }
        }

        $contractDeatils = $this->User_model->check_record("contract" , array("id_contract" =>$data['id_contract'])) ; 


        if(empty($contractDeatils))
        {
            $result = array('status'=>FALSE, 'error'=>$this->lang->line('contract_not_found'));
            $this->response($result, REST_Controller::HTTP_OK);
        }

        $inner_data=array();
        // if(isset($data['id_user']))
        //     $inner_data['id_user']=$data['id_user'];
        // if(isset($data['user_role_id']))
        //     $inner_data['user_role_id']=$data['user_role_id'];
        $inner_data['user_role_id'] = $this->session_user_info->user_role_id ;
        $inner_data['id_user'] = $this->session_user_info->id_user ;
        $inner_data['reference_id'] = $data['id_contract'];
        $inner_data['reference_type']='contract';
        $inner_data['contract_owner_id']=$contractDetails[0]['contract_owner_id'];
        $inner_data['delegate_id']=$contractDetails[0]['delegate_id'];
        if(isset($data['deleted'])){

        }else{
            $inner_data['document_status']=1;
        }
        $result['unique_attachment']['documents'] = $this->Document_model->getDocumentsList($inner_data);

        $inner_data['document_type'] = array(0,1);
        $result['unique_attachment']['all_records'] = $this->Document_model->getDocumentsList($inner_data);
        $inner_data['document_type'] = 1;
        
        $result['unique_attachment']['links'] = $this->Document_model->getDocumentsList($inner_data);
        
        $inner_data['updated_by']=isset($data['updated_by'])?$data['updated_by']:1;

        foreach($result['unique_attachment']['all_records'] as $ka=>$va){
            $result['unique_attachment']['all_records'][$ka]['show_icon']=false;
            $result['unique_attachment']['all_records'][$ka]['document_source_exactpath']=($va['document_source']);
            $result['unique_attachment']['all_records'][$ka]['encryptedPath']=pk_encrypt($va['document_source']);
            $result['unique_attachment']['all_records'][$ka]['id_document']=pk_encrypt($result['unique_attachment']['all_records'][$ka]['id_document']);
            $result['unique_attachment']['all_records'][$ka]['module_id']=pk_encrypt($result['unique_attachment']['all_records'][$ka]['module_id']);
            $result['unique_attachment']['all_records'][$ka]['reference_id']=pk_encrypt($result['unique_attachment']['all_records'][$ka]['reference_id']);
            $result['unique_attachment']['all_records'][$ka]['uploaded_by']=pk_encrypt($result['unique_attachment']['all_records'][$ka]['uploaded_by']);
            $result['unique_attachment']['all_records'][$ka]['user_role_id']=pk_encrypt($result['unique_attachment']['all_records'][$ka]['user_role_id']);
            $result['unique_attachment']['all_records'][$ka]['action']=0;
            if(
                ((in_array($this->session_user_info->id_user,array($contractDetails[0]['delegate_id'],$contractDetails[0]['contract_owner_id'])))||
                (in_array($this->session_user_info->user_role_id,array(2))))
                )
            {
                $result['unique_attachment']['all_records'][$ka]['action']=1;
            }
            if(($result['unique_attachment']['all_records'][$ka]['is_lock']==1))
            {
                if(
                    !((in_array($this->session_user_info->id_user,array($contractDetails[0]['delegate_id'],$contractDetails[0]['contract_owner_id'])))||
                    (in_array($this->session_user_info->user_role_id,array(1,2))))
                    )
                {
                    unset($result['unique_attachment']['all_records'][$ka]);
                }
            }
            if( ($va['document_mime_type'] == 'application/pdf') && $va['module_type']!= 'document_intelligence')
            {
                $result['unique_attachment']['all_records'][$ka]['show_icon']=true;
            }
        }
        $result['unique_attachment']['all_records']= array_values($result['unique_attachment']['all_records']);
        foreach($result['unique_attachment']['documents'] as $ka=>$va){
            $result['unique_attachment']['documents'][$ka]['show_icon']=false;
            $result['unique_attachment']['documents'][$ka]['document_source_exactpath']=($va['document_source']);
            $result['unique_attachment']['documents'][$ka]['encryptedPath']=pk_encrypt($va['document_source']);
            $result['unique_attachment']['documents'][$ka]['id_document']=pk_encrypt($result['unique_attachment']['documents'][$ka]['id_document']);
            $result['unique_attachment']['documents'][$ka]['module_id']=pk_encrypt($result['unique_attachment']['documents'][$ka]['module_id']);
            $result['unique_attachment']['documents'][$ka]['reference_id']=pk_encrypt($result['unique_attachment']['documents'][$ka]['reference_id']);
            $result['unique_attachment']['documents'][$ka]['uploaded_by']=pk_encrypt($result['unique_attachment']['documents'][$ka]['uploaded_by']);
            $result['unique_attachment']['documents'][$ka]['user_role_id']=pk_encrypt($result['unique_attachment']['documents'][$ka]['user_role_id']);
            $result['unique_attachment']['documents'][$ka]['action']=0;
            if(((in_array($this->session_user_info->id_user,array($contractDetails[0]['delegate_id'],$contractDetails[0]['contract_owner_id'])))||(in_array($this->session_user_info->user_role_id,array(2)))))
            {
                $result['unique_attachment']['documents'][$ka]['action']=1;
            }
            if(($result['unique_attachment']['documents'][$ka]['is_lock']==1))
            {
                if(
                    !((in_array($this->session_user_info->id_user,array($contractDetails[0]['delegate_id'],$contractDetails[0]['contract_owner_id'])))||
                    (in_array($this->session_user_info->user_role_id,array(2))))
                    )
                {
                    unset($result['unique_attachment']['documents'][$ka]);
                }
            }
            if( ($va['document_mime_type'] == 'application/pdf') && $va['module_type']!= 'document_intelligence')
            {
                $result['unique_attachment']['documents'][$ka]['show_icon']=true;
            }
        }
        $result['unique_attachment']['documents']= array_values($result['unique_attachment']['documents']);
        foreach($result['unique_attachment']['links'] as $ka=>$va){
            $result['unique_attachment']['links'][$ka]['document_source_exactpath']=($va['document_source']);
            $result['unique_attachment']['links'][$ka]['id_document']=pk_encrypt($result['unique_attachment']['links'][$ka]['id_document']);
            $result['unique_attachment']['links'][$ka]['module_id']=pk_encrypt($result['unique_attachment']['links'][$ka]['module_id']);
            $result['unique_attachment']['links'][$ka]['reference_id']=pk_encrypt($result['unique_attachment']['links'][$ka]['reference_id']);
            $result['unique_attachment']['links'][$ka]['uploaded_by']=pk_encrypt($result['unique_attachment']['links'][$ka]['uploaded_by']);
            $result['unique_attachment']['links'][$ka]['user_role_id']=pk_encrypt($result['unique_attachment']['links'][$ka]['user_role_id']);
            $result['unique_attachment']['links'][$ka]['action']=0;
            if(((in_array($this->session_user_info->id_user,array($contractDetails[0]['delegate_id'],$contractDetails[0]['contract_owner_id'])))||(in_array($this->session_user_info->user_role_id,array(2)))))
            {
                $result['unique_attachment']['links'][$ka]['action']=1;
            }
            if(($result['unique_attachment']['links'][$ka]['is_lock']==1))
            {
                if(
                    !((in_array($this->session_user_info->id_user,array($contractDetails[0]['delegate_id'],$contractDetails[0]['contract_owner_id'])))||
                    (in_array($this->session_user_info->user_role_id,array(1,2))))
                    )
                {
                    unset($result['unique_attachment']['links'][$ka]);
                }
            }
        }

        $result = array('status'=>TRUE, 'data'=>$result);
        $this->response($result, REST_Controller::HTTP_OK);

    }
}